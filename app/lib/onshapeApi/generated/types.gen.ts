// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'https://cad.onshape.com/api/v12' | (string & {});
};

export type Accessor = {
    bufferView?: number;
    byteOffset?: number;
    componentType?: number;
    count?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    max?: Array<number>;
    min?: Array<number>;
    name?: string;
    normalized?: boolean;
    sparse?: AccessorSparse;
    type?: string;
};

export type AccessorData = {
    numComponentsPerElement?: number;
    numElements?: number;
    totalNumComponents?: number;
};

export type AccessorModel = {
    accessorData?: AccessorData;
    bufferViewModel?: BufferViewModel;
    byteOffset?: number;
    byteStride?: number;
    componentSizeInBytes?: number;
    componentType?: number;
    count?: number;
    elementSizeInBytes?: number;
    elementType?: ElementType;
    max?: Array<number>;
    min?: Array<number>;
    name?: string;
};

export type AccessorSparse = {
    count?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    indices?: AccessorSparseIndices;
    values?: AccessorSparseValues;
};

export type AccessorSparseIndices = {
    bufferView?: number;
    byteOffset?: number;
    componentType?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
};

export type AccessorSparseValues = {
    bufferView?: number;
    byteOffset?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
};

export type Animation = {
    channels?: Array<AnimationChannel>;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    samplers?: Array<AnimationSampler>;
};

export type AnimationChannel = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    sampler?: number;
    target?: AnimationChannelTarget;
};

export type AnimationChannelTarget = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    node?: number;
    path?: string;
};

export type AnimationSampler = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    input?: number;
    interpolation?: string;
    output?: number;
};

export type ApiResponse = {
    content?: {
        empty?: boolean;
        [key: string]: MediaType | boolean | undefined;
    };
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get$ref?: string;
    headers?: {
        [key: string]: Header;
    };
    links?: {
        [key: string]: Link;
    };
};

export type Asset = {
    copyright?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    generator?: string;
    minVersion?: string;
    version?: string;
};

export type BtapiApplicationExtensionInfo = {
    actionBody?: string;
    actionType?: number;
    actionUrl?: string;
    applicationId?: string;
    clientId?: string;
    description?: string;
    extensionContext?: number;
    extensionLocation?: number;
    hasIcon?: boolean;
    hasPendingIcon?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    iconUrl?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    parentAppPrimaryFormat?: string;
    plusMenuApp?: boolean;
    showBetaLabel?: boolean;
    showResponse?: boolean;
    showUpgradeLabel?: boolean;
    systemAppExtension?: boolean;
    systemAppIconName?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    visibilityRule?: string;
};

export type BtapiApplicationSummaryInfo = {
    applicationOwnerType?: number;
    clientId?: string;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    state?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

/**
 * All workflowable types that can be enumerated.
 */
export type BtapiWorkflowableType = 'RELEASE' | 'TASK' | 'ASSIGNMENT' | 'OBSOLETION';

export type BtAclEntryInfo = {
    acceptOwnerTransfer?: boolean;
    companyName?: string;
    connectionId?: string;
    connectionName?: string;
    connectionUser?: boolean;
    email?: string;
    enterpriseMember?: boolean;
    entryId?: string;
    entryState?: BtUserState;
    entryType?: number;
    image?: string;
    name?: string;
    objectId?: string;
    pendingOwnerTransfer?: boolean;
    permission?: number;
    permissionSet?: Array<string>;
    proCompanySubtype?: number;
    teamName?: string;
};

export type BtAclInfo = {
    admin?: boolean;
    entries?: Array<BtAclEntryInfo>;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    inheritedAcls?: Array<BtInheritedAclInfo>;
    /**
     * Name of the resource.
     */
    name?: string;
    objectId?: string;
    objectType?: number;
    owner?: BtOwnerInfo;
    public?: boolean;
    sharedWithSupport?: boolean;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    visibility?: string;
};

export type BtAclParams = {
    anonymousAccessAllowed?: boolean;
    anonymousAllowsExport?: boolean;
    docStateParams?: {
        [key: string]: string;
    };
    documentId?: string;
    elementId?: string;
    public?: boolean;
    workspaceId?: string;
};

export type BtActiveSheetMetalFilter2944 = BtQueryFilter183 & {
    btType?: 'BTActiveSheetMetalFilter-2944';
} & {
    btType?: string;
    isFromActiveSheetMetal?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtActiveWorkflowInfo = {
    allowReleaseItemsFromOtherDocuments?: boolean;
    canCurrentUserCreateReleases?: boolean;
    canCurrentUserEditStandardContent?: boolean;
    canCurrentUserManageWorkflows?: boolean;
    /**
     * Deprecated, use canCurrentUserSeePLMItemLink
     */
    canCurrentUserSeeArenaItemLink?: boolean;
    canCurrentUserSeePLMItemLink?: boolean;
    /**
     * Deprecated, use canCurrentUserSyncBomToPLM
     */
    canCurrentUserSyncBomToArena?: boolean;
    canCurrentUserSyncBomToPLM?: boolean;
    canCurrentUserSyncDrawingToPLM?: boolean;
    /**
     * Deprecated, use canCurrentUserSyncRevisionsToPLM
     */
    canCurrentUserSyncRevisionsToArena?: boolean;
    canCurrentUserSyncRevisionsToPLM?: boolean;
    /**
     * Deprecated, use canCurrentUserSyncStandardContentToPLM
     */
    canCurrentUserSyncStandardContentToArena?: boolean;
    canCurrentUserSyncStandardContentToPLM?: boolean;
    /**
     * Deprecated, use canCurrentUserSyncToPLM
     */
    canCurrentUserSyncToArena?: boolean;
    canCurrentUserSyncToPLM?: boolean;
    companyId?: string;
    documentId?: string;
    drawingCanDuplicatePartNumber?: boolean;
    /**
     * Deprecated, can be determined by checking if the length of releaseWorkflowInfo.pickableWorkflows > 1
     */
    enabledActiveMultipleWorkflows?: boolean;
    /**
     * Deprecated, use hasInactiveCustomWorkflows field on the workflowInfo object
     */
    hasInactiveCustomWorkflows?: boolean;
    obsoletionWorkflow?: BtPublishedWorkflowInfo;
    /**
     * Deprecated, use obsoletionWorkflowInfo.workflow.id instead
     */
    obsoletionWorkflowId?: string;
    obsoletionWorkflowInfo?: BtActiveWorkflowTypeInfo;
    /**
     * Deprecated, no current alternative
     */
    osCategoryIdToArenaNumberFormatId?: {
        [key: string]: string;
    };
    pLMIntegrationType?: number;
    pLMName?: string;
    partNumberingSchemeId?: string;
    /**
     * Deprecated, use the pickableWorkflows field on the workflowInfo object
     */
    pickableWorkflows?: Array<BtPublishedWorkflowInfo>;
    releaseWorkflow?: BtPublishedWorkflowInfo;
    /**
     * Deprecated, use releaseWorkflowInfo.workflow.id instead
     */
    releaseWorkflowId?: string;
    releaseWorkflowInfo?: BtActiveWorkflowTypeInfo;
    /**
     * Deprecated, no current alternative
     */
    releaseableApplications?: Array<string>;
    standardContentNumberingSchemeId?: string;
    standardContentUsingAutoNumbering?: boolean;
    standardContentUsingThirdPartyPartNumbering?: boolean;
    taskWorkflow?: BtPublishedWorkflowInfo;
    taskWorkflowInfo?: BtActiveWorkflowTypeInfo;
    usingAutoPartNumbering?: boolean;
    usingManagedWorkflow?: boolean;
    usingThirdPartyPartNumbering?: boolean;
};

export type BtActiveWorkflowTypeInfo = {
    hasInactiveCustomWorkflows?: boolean;
    pickableWorkflows?: Array<BtPublishedWorkflowInfo>;
    workflow?: BtPublishedWorkflowInfo;
};

export type BtAddressInfo = {
    address?: string;
    city?: string;
    country?: string;
    countryCode?: string;
    id?: string;
    state?: string;
    stateCode?: string;
    zip?: string;
};

export type BtAliasEntryInfo = {
    createdAt?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    identity?: BtIdentityInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtAliasEntryParams = {
    email?: string;
    teamId?: string;
    userId?: string;
};

export type BtAliasInfo = {
    companyId?: string;
    createdAt?: string;
    description?: string;
    entries?: Array<BtAliasEntryInfo>;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    identities?: Array<BtIdentityInfo>;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtAliasParams = {
    additions?: Array<BtAliasEntryParams>;
    description?: string;
    entries?: Array<BtAliasEntryParams>;
    name?: string;
    removals?: Array<BtAliasEntryParams>;
};

export type BtAllowEdgePointFilter2371 = BtQueryFilter183 & {
    btType?: 'BTAllowEdgePointFilter-2371';
} & {
    allowsEdgePoint?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAllowFlattenedGeometryFilter2140 = BtQueryFilter183 & {
    btType?: 'BTAllowFlattenedGeometryFilter-2140';
} & {
    allowsFlattenedGeometry?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAllowMeshGeometryFilter1026 = BtQueryFilter183 & {
    btType?: 'BTAllowMeshGeometryFilter-1026';
} & {
    allowsMeshGeometry?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAllowedMateTypeFilter1511 = BtMateFilter162 & {
    btType?: 'BTAllowedMateTypeFilter-1511';
} & {
    allowedMateTypes?: Array<GbtMateType>;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAndFilter110 = BtQueryFilter183 & {
    btType?: 'BTAndFilter-110';
} & {
    btType?: string;
    operand1?: BtQueryFilter183;
    operand2?: BtQueryFilter183;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAngularDimensionDisplayData320 = BtDimensionDisplayData323 & {
    btType?: 'BTAngularDimensionDisplayData-320';
} & {
    btType?: string;
    clockwise?: boolean;
    positionR?: number;
    positionT?: number;
    witnessEndPoint0r?: number;
    witnessEndPoint0t?: number;
    witnessEndPoint1r?: number;
    witnessEndPoint1t?: number;
    witnessMaxPoint0r?: number;
    witnessMaxPoint1r?: number;
    witnessMinPoint0r?: number;
    witnessMinPoint1r?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAnnotationDeleteDisplayData1815 = BtAnnotationDisplayData3225 & {
    btType?: 'BTAnnotationDeleteDisplayData-1815';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAnnotationDisplayData3225 = {
    annotationPlane?: BtCoordinateSystem387;
    basePlane?: BtCoordinateSystem387;
    /**
     * Type of JSON object.
     */
    btType?: string;
    characteristicId?: string;
    deterministicId?: string;
    dxdySegments?: Array<BtVector2d1812>;
    isDeletion?: boolean;
    mainConstraintId?: string;
    mainFeatureId?: string;
    mainParameterId?: string;
    mainPartId?: string;
};

export type BtAnnotationElementDisplayData894 = {
    annotationIdToDisplayObject?: {
        [key: string]: BtAnnotationDisplayData3225;
    };
    annotationIds?: Array<string>;
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAnnotationFilter4841 = BtQueryFilter183 & {
    btType?: 'BTAnnotationFilter-4841';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAnnotationGTolDisplayData4887 = BtAnnotationDisplayData3225 & {
    btType?: 'BTAnnotationGTolDisplayData-4887';
} & {
    btType?: string;
    lower?: string;
    rows?: Array<BtAnnotationGTolRowDisplayData4397>;
    upper?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAnnotationGTolRowDisplayData4397 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    constraintType?: GbtgTolConstraintType;
    prefix?: string;
    references?: Array<string>;
    suffix?: string;
    tolerance?: number;
};

export type BtAnnotationWeldDisplayData4919 = BtAnnotationDisplayData3225 & {
    btType?: 'BTAnnotationWeldDisplayData-4919';
} & {
    allAround?: boolean;
    btType?: string;
    flag?: GbtFieldWeldFlag;
    isoFlip?: boolean;
    jointType?: GbtWeldJointType;
    lowerContourType?: GbtWeldContourType;
    lowerFinishing?: GbtWeldFinishing;
    lowerFlag?: boolean;
    lowerGroove?: number;
    lowerRootOpening?: number;
    lowerValueFour?: number;
    lowerValueOne?: number;
    lowerValueThree?: number;
    lowerValueTwo?: number;
    lowerWeldType?: GbtWeldType;
    reference?: string;
    standard?: GbtWeldStandard;
    upperContourType?: GbtWeldContourType;
    upperFinishing?: GbtWeldFinishing;
    upperFlag?: boolean;
    upperGroove?: number;
    upperRootOpening?: number;
    upperValueFour?: number;
    upperValueOne?: number;
    upperValueThree?: number;
    upperValueTwo?: number;
    upperWeldType?: GbtWeldType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtApiConfiguration = {
    current?: boolean;
    default?: boolean;
    null?: boolean;
    parameterMap?: {
        [key: string]: string;
    };
    standardContent?: boolean;
    standardContentParametersId?: string;
};

export type BtApiTable2300 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    columns?: Array<BtApiTableColumn3141>;
    entityIds?: Array<string>;
    id?: string;
    rows?: Array<BtApiTableRow2915>;
    title?: string;
};

export type BtApiTableColumn3141 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    header?: string;
    id?: string;
    textAlignment?: GbtTableTextAlignment;
};

export type BtApiTableList1223 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    tables?: Array<BtApiTable2300>;
};

export type BtApiTableRow2915 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    callout?: string;
    columnIdToValue?: {
        [key: string]: string;
    };
    entityIds?: Array<string>;
};

export type BtApiVersion = 'UNDEFINED' | 'V1_START' | 'V2_SERIALIZATION_UNIFICATION' | 'V3_NEW_BOM_FORMAT' | 'V4_TRANSACTIONS_NO_NEW' | 'V5_BODY_DETAILS_COMPOSITE_REFERENCE' | 'V6_JSON_EDIT_RESPONSE_BUGFIX' | 'V7_SKETCH_ENDPOINT_INCLUDES_SOLVE_STATUS' | 'V8_RESTORE_NOOP_NO_NEW_MICROVERSION' | 'V9_INCLUDE_DETERMINISTIC_IDS_TO_QUERY_RESPONSES' | 'V10_VALIDATE_VISIBILTY_CONDITIONS_FOR_PS_CONFIG_PARAMS' | 'V11_EXCLUDE_ZIP_CONTENTS_BY_DEFAULT' | 'V12_VALIDATE_ELEMENT_TYPE_FOR_TRANSLATIONS';

export type BtAppArrayInfoBtAppDrawingViewInfo = {
    changeId?: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    items?: Array<BtAppDrawingViewInfo>;
    parentChangeId?: string;
};

export type BtAppAssociativeDataArrayInfo = {
    changeId?: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    items?: Array<BtAssociativeDataInfo>;
    parentChangeId?: string;
};

export type BtAppDrawingViewInfo = {
    associativityChangeId?: string;
    bomReferenceId?: string;
    brokenOutBBoxes?: {
        [key: string]: BtBoundingBox1052;
    };
    brokenOutEndConditions?: {
        [key: string]: BtBrokenOutEndCondition1107;
    };
    brokenOutPointNumbers?: Array<number>;
    changeId?: string;
    computeIntersection?: boolean;
    cutPoint?: Array<number>;
    depthSectionEndCondition?: BtBrokenOutEndCondition1107;
    displayStateId?: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    explodedViewId?: string;
    hasSecondaryViewDefinition?: boolean;
    hiddenLines?: string;
    ignoreFaultyParts?: boolean;
    includeHiddenInstances?: boolean;
    includeSurfaces?: boolean;
    includeWires?: boolean;
    isAlignedSection?: boolean;
    isBrokenOutSection?: boolean;
    isCopiedView?: boolean;
    isCropView?: boolean;
    isPartialSection?: boolean;
    isSectionOfAlignedSection?: boolean;
    isSectionOfSectionOnBase?: boolean;
    isSurface?: boolean;
    modelReferenceId?: string;
    modificationId?: string;
    namedPositionId?: string;
    occurrenceOrQueryToGeometryProperties?: {
        [key: string]: BtAppElementViewGeometryProperties1100;
    };
    offsetSectionPoints?: Array<number>;
    parentChangeId?: string;
    parentViewId?: string;
    perspective?: boolean;
    projectionAngle?: string;
    qualityOption?: number;
    renderSketches?: boolean;
    sectionId?: string;
    sectionPlanes?: Array<number>;
    showAutoCenterlines?: boolean;
    showAutoCentermarks?: boolean;
    showCutGeomOnly?: boolean;
    showTangentLines?: boolean;
    showThreads?: boolean;
    showViewingPlane?: boolean;
    simplificationOption?: number;
    simplificationThreshold?: number;
    useParentViewSectionData?: boolean;
    viewDirection?: Array<number>;
    viewId?: string;
    viewMatrix?: Array<number>;
    viewVersion?: number;
};

export type BtAppElementBasicInfo = {
    changeId?: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    parentChangeId?: string;
};

export type BtAppElementBulkCreateInfo = {
    /**
     * The latest document microversion, after the edit was committed.
     */
    documentMicroversionId: string;
    /**
     * The ids of the created elements.
     */
    elementIds?: Array<string>;
    /**
     * The microversion ids of the created elements, at creation time.
     */
    elementMicroversions?: Array<string>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
};

export type BtAppElementBulkCreateParams = {
    /**
     * The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
     */
    description?: string;
    /**
     * The data type of the application. This string allows an application to distinguish their elements from elements of another application.
     */
    formatId: string;
    location?: BtElementLocationParams;
    /**
     * The name of the element being created. If blank, a name will be auto-generated.
     */
    names?: Array<string>;
};

export type BtAppElementBulkModifyInfo = {
    /**
     * The latest change id for the element, after the edit was committed. Deprecated in favor of elementChangeResults.
     *
     * @deprecated
     */
    changeId?: string;
    /**
     * The latest change id for the document, after the edit was committed.
     */
    documentMicroversionId?: string;
    /**
     * The results of editing each element affected by the edit.
     */
    elementChangeResults?: Array<BtAppElementModifyInfo>;
    /**
     * The id of the edited element, if a single element was edited. Deprecated in favor of elementChangeResults.
     *
     * @deprecated
     */
    elementId?: string;
    /**
     * The ids of the edited elements. Deprecated in favor of elementChangeResults.
     *
     * @deprecated
     */
    elementIds?: Array<string>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    /**
     * The latest change id for the element, before the edit was made. Deprecated in favor of elementChangeResults.
     *
     * @deprecated
     */
    parentChangeId?: string;
    /**
     * The latest change id for the document, before the edit was made.
     */
    parentDocumentMicroversionId?: string;
    /**
     * Whether the properties of any edited application element were changed after the transaction was created. Deprecated in favor of elementChangeResults.
     *
     * @deprecated
     */
    propertyEditsMerged?: boolean;
    /**
     * The id of the transaction in which the edit was applied. Deprecated in favor of elementChangeResults.
     *
     * @deprecated
     */
    transactionId?: string;
};

export type BtAppElementChangeParams = {
    /**
     * This base64-encoded data is treated as a full representation of the sub-element's data and all deltas previously added will no longer be returned.
     */
    baseContent?: string;
    /**
     * This base64-encoded data is a delta which the application can apply to the last added baseContent data.
     */
    delta?: string;
    /**
     * The id of the subelement to edit. The value is determined by the application.
     */
    subelementId: string;
};

export type BtAppElementCommitTransactionParams = {
    allowMerge?: boolean;
    /**
     * The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
     */
    description?: string;
    returnError?: boolean;
    transactionIds?: Array<string>;
};

export type BtAppElementContentDeltaInfo = {
    delta?: string;
};

export type BtAppElementContentEntryInfo = {
    baseContent?: string;
    deltas?: Array<BtAppElementContentDeltaInfo>;
    subelementId?: string;
};

export type BtAppElementContentInfo = {
    changeId?: string;
    data?: Array<BtAppElementContentEntryInfo>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
};

export type BtAppElementErrorCode = 'OK' | 'TRANSACTION_CONFLICT' | 'NOT_FOUND' | 'INCONSISTENT_CHANGES';

export type BtAppElementHistoryEntryInfo = {
    changeId?: string;
    createdAt?: string;
    description?: string;
};

export type BtAppElementHistoryInfo = {
    changes?: Array<BtAppElementHistoryEntryInfo>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
};

export type BtAppElementIdsInfo = {
    changeId?: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    subelementIds?: Array<string>;
};

export type BtAppElementModifyInfo = {
    /**
     * The latest change id for the element, after the edit was committed.
     */
    changeId: string;
    /**
     * The id of the edited element.
     */
    elementId?: string;
    /**
     * The ids of the edited elements, if multiple elements were edited.
     */
    elementIds?: Array<string>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    jsonDifference?: BtDiffJsonResponse2725;
    /**
     * The latest change id for the element, before the edit was made.
     */
    parentChangeId?: string;
    /**
     * When committing a transaction, this field indicates if the properties of the application element were changed after the transaction was created.
     */
    propertyEditsMerged?: boolean;
    /**
     * The id of the transaction in which the edit was applied.
     */
    transactionId?: string;
};

export type BtAppElementParams = {
    /**
     * The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
     */
    description?: string;
    /**
     * The data type of the application. This string allows an application to distinguish their elements from elements of another application.
     */
    formatId: string;
    /**
     * Initialization data for the new element's json tree.
     */
    jsonTree?: {
        [key: string]: unknown;
    };
    location?: BtElementLocationParams;
    /**
     * The name of the element being created. If blank, a name will be auto-generated.
     */
    name?: string;
    /**
     * Initialization data for the new element's subelements.
     */
    subelements?: Array<BtAppElementChangeParams>;
};

export type BtAppElementParamsArrayBtCopyViewAssociativeDataParams = {
    description?: string;
    items?: Array<BtCopyViewAssociativeDataParams>;
    parentChangeId?: string;
    transactionId?: string;
};

export type BtAppElementReferenceInfo = {
    /**
     * The latest change id for the element, after the edit was committed.
     */
    changeId: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    /**
     * The latest change id for the element, before the edit was made.
     */
    parentChangeId?: string;
    referenceId?: string;
    /**
     * The id of the transaction in which the edit was applied.
     */
    transactionId?: string;
};

export type BtAppElementReferenceParams = {
    hasDocumentMicroversions?: boolean;
    idTag?: string;
    idTagMicroversionId?: string;
    isLocked?: boolean;
    isSketchOnly?: boolean;
    parentChangeId?: string;
    parentViewId?: string;
    partNumber?: string;
    pureSketch?: boolean;
    referenceType?: number;
    returnError?: boolean;
    revision?: string;
    sketchIds?: Array<string>;
    targetConfiguration?: string;
    targetDocumentId?: string;
    targetElementId?: string;
    targetMicroversionId?: string;
    targetVersionId?: string;
    trackNewVersions?: boolean;
    transactionId?: string;
    updateSketchInfo?: boolean;
};

export type BtAppElementReferenceResolveInfo = {
    changeId?: string;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
    idTag?: string;
    idTagIsValid?: boolean;
    isConfigurable?: boolean;
    isFlattenedPart?: boolean;
    isLocked?: boolean;
    isSketchOnly?: boolean;
    isSurface?: boolean;
    latestElementMicroversionId?: string;
    partIdentity?: string;
    partNumber?: string;
    referenceId?: string;
    referenceType?: number;
    resolvedDocumentMicroversionId?: string;
    resolvedElementMicroversionId?: string;
    revision?: string;
    sketchIds?: Array<string>;
    sourceElementId?: string;
    targetConfiguration?: string;
    targetDocumentId?: string;
    targetDocumentMicroversionId?: string;
    targetElementId?: string;
    targetElementMicroversionId?: string;
    /**
     * Reference to a part or assembly in a version; `NULL` when reference is in a workspace.
     */
    targetVersionId?: string;
    trackNewVersions?: boolean;
};

export type BtAppElementReferencesResolveInfo = {
    resolvedReferences?: Array<BtAppElementReferenceResolveInfo>;
    unresolvedReferenceIds?: Array<string>;
};

export type BtAppElementStartTransactionParams = {
    /**
     * The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
     */
    description?: string;
    parentChangeId?: string;
    returnError?: boolean;
};

export type BtAppElementTransactionsInfo = {
    elementTransactions?: Array<BtElementTransaction>;
    /**
     * `0: OK (healthy) | 1: INFO | 2: WARNING | 3: ERROR (dangling or view generation call failed) | 4: UNKNOWN`
     */
    errorCode?: number;
    /**
     * A human-readable value for the error that occurred, if one occurred.
     */
    errorDescription?: string;
    errorValue?: BtAppElementErrorCode;
};

export type BtAppElementUpdateParams = {
    /**
     * The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
     */
    description?: string;
    /**
     * A json patch that will be applied to the application element's json data. The JSON patch format is as specified in RFC 6902 from the IETF.
     */
    jsonPatch?: string;
    jsonTreeEdit?: BtjEdit3734;
    /**
     * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
     */
    parentChangeId?: string;
    /**
     * Edits to be applied to the element's metadata.
     */
    propertyUpdates?: Array<BtMetadataPropertyUpdateParams>;
    /**
     * If true, errors in request processing will be returned in a 200 response with a meaningful description. Otherwise, errors will result in a relevant HTTP error response.
     */
    returnError?: boolean;
    /**
     * If specified, and jsonTreeEdit is non-empty, the json difference will be returned in this format, otherwise no json difference will be returned.
     */
    returnJsonDifferenceFormat?: 'default' | 'full_path' | 'json_patch';
    /**
     * The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
     */
    transactionId?: string;
};

export type BtAppElementViewGeometryProperties1100 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    propertyToValue?: {
        [key: string]: string;
    };
};

export type BtAppModificationRequestInfo = {
    documentId?: string;
    elementId?: string;
    failureReason?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    output?: string;
    outputStatusCode?: number;
    parentDocumentMicroversionId?: string;
    parentElementMicroversionId?: string;
    requestState?: BtAppModificationRequestState;
    resultDocumentMicroversionId?: string;
    resultElementMicroversionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
};

export type BtAppModificationRequestState = 'ACTIVE' | 'DONE' | 'FAILED';

export type BtAppearanceOverride2517 = {
    appearance?: BtGraphicsAppearance1152;
    appearanceReset?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    copyWithoutEntities?: BtAppearanceOverride2517;
    entityDeterministicIds?: Array<string>;
    isDeletion?: boolean;
};

export type BtApplicationElementThumbnailParams = {
    base64EncodedImage?: string;
    description?: string;
    imageHeight?: number;
    imageWidth?: number;
    isPrimary?: boolean;
    uniqueId?: string;
};

export type BtApplicationElementThumbnailParamsArray = {
    thumbnails?: Array<BtApplicationElementThumbnailParams>;
};

export type BtApplicationSettingsType = 'USER' | 'COMPANY' | 'TEAM';

export type BtApplicationTargetInfo = {
    baseHref?: string;
    clientId?: string;
    supportsCollaboration?: boolean;
    tabIconHref?: string;
};

export type BtArcLengthDimensionDisplayData1018 = BtAngularDimensionDisplayData320 & {
    btType?: 'BTArcLengthDimensionDisplayData-1018';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyDefinitionInfo = {
    partStudioFeatures?: Array<BtAssemblyPsFeatureInfo>;
    parts?: Array<BtAssemblyPartInfo>;
    rootAssembly?: BtRootAssemblyInfo;
    subAssemblies?: Array<BtSubAssemblyInfo>;
};

export type BtAssemblyFeatureDataInfo = {
    name?: string;
};

export type BtAssemblyFeatureDisplayData1783 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    hidden?: boolean;
    isDerivedFeature?: boolean;
    nodeId?: string;
    ownerOccurrence?: BtOccurrence74;
    status?: GbtAssemblyFeatureDisplayStatus;
};

/**
 * List of Assembly features including those are created by replicates.
 */
export type BtAssemblyFeatureInfo = {
    featureData?: BtAssemblyFeatureDataInfo;
    featureType?: string;
    id?: string;
    suppressed?: boolean;
};

export type BtAssemblyFeatureListResponse1174 = BtFeatureApiBase1430 & {
    btType?: 'BTAssemblyFeatureListResponse-1174';
} & {
    btType?: string;
    featureStates?: {
        [key: string]: BtFeatureState1688;
    };
    features?: Array<BtmAssemblyFeature887>;
    isComplete?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyInsertTransformedInstancesResponse = {
    insertInstanceResponses?: Array<BtAssemblyInstanceOccurrenceInfo>;
    insertResponses?: Array<BtAssemblyOccurrenceInfo>;
};

export type BtAssemblyInstance947 = BtInstance642 & {
    btType?: 'BTAssemblyInstance-947';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyInstanceDefinitionParams = {
    configuration?: string;
    documentId: string;
    elementId?: string;
    featureId?: string;
    includePartTypes?: Array<GbtInsertableType>;
    isAssembly?: boolean;
    isHidden?: boolean;
    isSuppressed?: boolean;
    isWholePartStudio?: boolean;
    microversionId?: string;
    partId?: string;
    partNumber?: string;
    revision?: string;
    versionId?: string;
};

/**
 * List of instances including those created by patterns and replicates.
 */
export type BtAssemblyInstanceInfo = {
    configuration?: string;
    documentId?: string;
    documentMicroversion?: string;
    documentVersion?: string;
    elementId?: string;
    featureId?: string;
    fullConfiguration?: string;
    id?: string;
    isStandardContent?: boolean;
    name?: string;
    partId?: string;
    partNumber?: string;
    revision?: string;
    status?: BtAssemblyInstanceStatus;
    suppressed?: boolean;
    type?: BtAssemblyInstanceType;
};

export type BtAssemblyInstanceOccurrenceInfo = {
    occurrences?: Array<BtAssemblyOccurrenceInfo>;
};

export type BtAssemblyInstanceStatus = 'DeletedElement';

export type BtAssemblyInstanceType = 'Assembly' | 'Feature' | 'Part' | 'Unknown';

export type BtAssemblyItemMetadataInfo = {
    children?: Array<BtAssemblyItemMetadataInfo>;
    propertyIdToError?: {
        [key: string]: string;
    };
    propertyIdToEvalInfo?: {
        [key: string]: string;
    };
    propertyIdToOverrideStatus?: {
        [key: string]: string;
    };
    propertyIdToSourceType?: {
        [key: string]: string;
    };
    propertyIdToValue?: {
        [key: string]: string;
    };
    requestInfo?: BtAssemblyItemMetadataRequestInfo;
};

export type BtAssemblyItemMetadataRequestInfo = {
    apiConfig?: string;
    documentId?: string;
    elementId?: string;
    itemId?: string;
    linkedDocumentId?: string;
    partId?: string;
    wvmId?: string;
    wvmType?: string;
};

export type BtAssemblyMateConnectorInfo = {
    featureId?: string;
    mateConnectorCS?: BtMateConnectorCsInfo;
};

/**
 * Quantities for length are specified in meters, and quantities for angles are specified in radians.
 */
export type BtAssemblyMateValueInfo = {
    /**
     * The ID of the assembly mate feature.
     */
    featureId?: string;
    jsonType: string;
    /**
     * The name of the assembly mate feature.
     */
    mateName?: string;
};

/**
 * Get a list of mate values for all the mates of a specified assembly.
 */
export type BtAssemblyMateValuesInfo = {
    /**
     * Describes the relative position of the first mate connector with respect to the second along the designated degrees of freedom (DOF) for mates in the specified assembly.
     */
    mateValues?: Array<BtAssemblyMateValueInfo>;
};

export type BtAssemblyMirror2996 = BtParametricInstance2641 & {
    btType?: 'BTAssemblyMirror-2996';
} & {
    btType?: string;
    mirrorFeature?: BtmAssemblyMirrorFeature3037;
    mirrorFeatureInterface?: BtAssemblyMirrorFeatureInterface;
    nodeWithReferenceList?: Array<BtNodeWithReference>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyMirrorFeatureInterface = {
    arrayParameterFromFeature?: BtmParameterArray2025;
    feature?: BtmAssemblyFeature887;
    nodeId?: string;
};

export type BtAssemblyModificationParams = {
    deleteInstances?: Array<string>;
    editDescription?: string;
    suppressInstances?: Array<string>;
    transformDefinitions?: Array<BtAssemblyTransformDefinitionParams>;
    unsuppressInstances?: Array<string>;
};

export type BtAssemblyOccurrenceInfo = {
    fixed?: boolean;
    hidden?: boolean;
    path?: Array<string>;
    transform?: Array<number>;
};

export type BtAssemblyPartBodyType = 'solid' | 'sheet' | 'composite';

export type BtAssemblyPartInfo = {
    bodyType?: BtAssemblyPartBodyType;
    configuration?: string;
    documentId?: string;
    documentMicroversion?: string;
    documentVersion?: string;
    elementId?: string;
    fullConfiguration?: string;
    isStandardContent?: boolean;
    mateConnectors?: Array<BtAssemblyMateConnectorInfo>;
    partId?: string;
    partNumber?: string;
    revision?: string;
};

export type BtAssemblyPattern1974 = BtParametricInstance2641 & {
    btType?: 'BTAssemblyPattern-1974';
} & {
    btType?: string;
    patternFeature?: BtmAssemblyPatternFeature2241;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * Pattern description.
 */
export type BtAssemblyPatternInfo = {
    /**
     * Id of the pattern.
     */
    id?: string;
    /**
     * Name of the pattern.
     */
    name?: string;
    /**
     * Mapping of seed to pattern instance ids.
     */
    seedToPatternInstances?: {
        [key: string]: Array<string>;
    };
    /**
     * If pattern is suppressed.
     */
    suppressed?: boolean;
    type?: GbtPatternType;
};

export type BtAssemblyPsFeatureInfo = {
    configuration?: string;
    documentId?: string;
    documentMicroversion?: string;
    documentVersion?: string;
    elementId?: string;
    featureId?: string;
    featureType?: string;
    fullConfiguration?: string;
    partNumber?: string;
    revision?: string;
};

export type BtAssemblyReferencesDisplayData1562 = {
    annotationsForElement?: BtAnnotationElementDisplayData894;
    assemblyReferences?: Array<BtSingleReferenceDisplayData1943>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementId?: string;
    fromFullElementId?: BtFullElementId756;
    fullElementId?: BtFullElementId756;
    incremental?: boolean;
    instanceCount?: number;
    keepFromMicroversion?: boolean;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfigurationInterval?: BtMicroversionIdAndConfigurationInterval2364;
    microversionInterval?: BtMicroversionIdInterval367;
    versionForRasterization?: BtElementDisplayData326;
};

export type BtAssemblyReplicate2774 = BtParametricInstance2641 & {
    btType?: 'BTAssemblyReplicate-2774';
} & {
    btType?: string;
    replicateFeature?: BtmAssemblyReplicateFeature1351;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblySimulation2246 = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    inertialRelief?: boolean;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    modal?: boolean;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    numberOfModes?: number;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    type?: GbtAssemblySimulationType;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtAssemblySimulationData978 = BtmNode19 & {
    btType?: 'BTAssemblySimulationData-978';
} & {
    btType?: string;
    contactBehavior?: GbtSimulationContactBehavior;
    loads?: Array<BtmLoad3538>;
    loadsByNodeId?: {
        [key: string]: BtmLoad3538;
    };
    simulations?: Array<BtAssemblySimulation2246>;
    structuralLoads?: Array<BtmLoad3538>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblySimulationStructuralLoadsTable3867 = BtTable1825 & {
    btType?: 'BTAssemblySimulationStructuralLoadsTable-3867';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblySimulationTable3236 = BtTable1825 & {
    btType?: 'BTAssemblySimulationTable-3236';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyTransformDefinitionParams = {
    isRelative?: boolean;
    occurrences?: Array<BtOccurrence74>;
    transform?: Array<number>;
};

export type BtAssemblyTransformedInstancesDefinitionParams = {
    transformGroups?: Array<TransformGroup>;
};

export type BtAssociativeDataInfo = {
    associativeDataId?: string;
    data?: Array<BtNameValuePair>;
    documentId?: string;
    documentMicroversion?: string;
    elementId?: string;
    error?: string;
    idTag?: string;
    microversionId?: string;
    occurrenceId?: string;
    type?: GbtAppElementAssociativeDataType;
    versionId?: string;
};

/**
 * Options for exporting assemblies.
 */
export type BtbAssemblyExportParams = {
    /**
     * IDs of the occurrences to retrieve. Use comma-separated IDs for multiple instances (example: occurrencesToExport=JHK,JHD).
     */
    occurrencesToExport?: string;
};

/**
 * Options for exporting elements to cloud storage.
 */
export type BtbCloudStorageOptions = {
    /**
     * Folder id where to store the exported model.
     */
    cloudObjectId: string;
    /**
     * Account id to access the cloud storage.
     */
    cloudStorageAccountId: string;
};

/**
 * A single drawing entity creation or modification definition
 */
export type BtbDrawingOperationParams = {
    /**
     * Operation description
     */
    description?: string;
    /**
     * Version of drawing entity format.
     */
    formatVersion: string;
    /**
     * Type of drawing modification operation: `onshapeCreateAnnotations` | `onshapeEditAnnotations`
     */
    messageName: string;
    /**
     * Other entity creation or modification parameters.
     */
    otherFields?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
};

/**
 * Options for exporting elements as a link in an email.
 */
export type BtbEmailExportOptions = {
    /**
     * Use `true` if a link in an email should be sent.
     */
    emailLink: boolean;
    /**
     * Message to send in the email body along with the download link.
     */
    emailMessage?: string;
    /**
     * Subject to send the email with.
     */
    emailSubject?: string;
    /**
     * List of email addresses to send the email to.
     */
    emailTo: Array<string>;
    /**
     * Id of the user who does the export.
     */
    fromUserId: string;
    /**
     * A password to protect the email with.
     */
    password?: string;
    /**
     * Use `true` if the email should be protected with a password.
     */
    passwordRequired?: boolean;
    /**
     * Use `true` if email copy should be sent to the user who does the export.
     */
    sendCopyToMe?: boolean;
    /**
     * Number of days to keep the link valid for.
     */
    validForDays?: number;
};

/**
 * Advanced element export options.
 */
export type BtbExportAdvancedParams = {
    assemblyExportParams?: BtbAssemblyExportParams;
    /**
     * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
     */
    configuration?: string;
    /**
     * An array of element ids for multi-element export.
     */
    elementIds?: Array<string>;
    /**
     * Set to `true` to evaluate the export rule for the given `formatName` and to include an `exportRuleFileName` value in the response.
     */
    evaluateExportRule?: boolean;
    /**
     * For multiple elements export, use `true` if export rule shouldn't be applied for all elements.
     */
    ignoreExportRulesForContents?: boolean;
    /**
     * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
     */
    linkDocumentId?: string;
    /**
     * The id of the workspace through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
     */
    linkDocumentWorkspaceId?: string;
    /**
     * IDs of the parts to retrieve. Use comma-separated IDs for multiple parts (example: partIds=JHK,JHD).
     */
    partIds?: string;
    partsExportFilter?: BtPartsExportFilter4308;
};

/**
 * Options for an element export to mesh format.
 */
export type BtbExportMeshParams = {
    /**
     * Determines the maximum angular deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
     */
    angularTolerance?: number;
    /**
     * Determines the maximum distance deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
     */
    distanceTolerance?: number;
    /**
     * Determines the maximum of a triangle edge length. Lower values result in a finer geometry and higher values result in coarser geometry.
     */
    maximumChordLength?: number;
    resolution?: GbtExportResolution;
    unit?: GbtExportUnit;
};

/**
 * Onshape document export schema
 */
export type BtbExportModelParams = {
    angleTolerance?: number;
    batchAllFlatPatterns?: boolean;
    batchFlatPatterns?: boolean;
    chordTolerance?: number;
    cloudObjectId?: string;
    cloudStorageAccountId?: string;
    configuration?: string;
    destinationName?: string;
    documentId: string;
    documentVersionId?: string;
    elementId?: string;
    elementIds?: string;
    emailLink?: boolean;
    emailMessage?: string;
    emailSubject?: string;
    /**
     * Base64-encoded email address. When sending an email, the `fromUserId` parameter is also required.
     */
    emailTo?: string;
    /**
     * If `true`, the exported file won't have any parts and assemblies marked as hidden
     */
    excludeHiddenEntities?: boolean;
    featureIds?: string;
    flatten?: boolean;
    format: string;
    /**
     * Your user ID. Required when providing the `emailTo` parameter.
     */
    fromUserId?: string;
    grouping?: string;
    ignoreExportRulesForContents?: boolean;
    includeBendCenterlines?: boolean;
    includeBendLines?: boolean;
    includeCboreCsink?: boolean;
    includeExportIds?: boolean;
    includeFormedCentermarks?: boolean;
    includeFormedOutlines?: boolean;
    includeSketches?: boolean;
    isPartingOut?: boolean;
    linkDocumentId?: string;
    linkDocumentWorkspaceId?: string;
    maxFacetWidth?: number;
    microversion?: string;
    minFacetWidth?: number;
    mode?: string;
    occurrencesToExport?: string;
    partIds?: string;
    partQuery?: string;
    password?: string;
    passwordRequired?: boolean;
    resolution?: string;
    scale?: number;
    sendCopyToMe?: boolean;
    sheetMetalFlat?: boolean;
    splinesAsPolylines?: boolean;
    storeInDocument?: boolean;
    triggerAutoDownload?: boolean;
    units?: string;
    /**
     * If `true`, the exported file will have all the parts and assemblies reoriented such that the Z-axis within Onshape becomes the Y-axis in the exported file.
     */
    useYAxisAsUp?: boolean;
    userId?: string;
    validForDays?: number;
    version?: string;
    view?: string;
    workspaceId?: string;
    zipSingleFileOutput?: boolean;
};

/**
 * Options for exporting elements to GLTF.
 */
export type BtbGltfExportParams = {
    advancedParams?: BtbExportAdvancedParams;
    cloudStorageOptions?: BtbCloudStorageOptions;
    /**
     * The name of the exported file.
     */
    destinationName?: string;
    emailExportOptions?: BtbEmailExportOptions;
    /**
     * Whether or not to exclude hidden parts from export.
     */
    excludeHiddenEntities?: boolean;
    /**
     * Whether parts should be exported as a group or individually in a .zip file.
     */
    grouping?: boolean;
    /**
     * Whether topology ids should be exported as parasolid attributes.
     */
    includeExportIds?: boolean;
    /**
     * Rotate model from Z-axis-up orientation to Y-axis-up.
     */
    isYAxisUp?: boolean;
    meshParams?: BtbExportMeshParams;
    /**
     * Send notification to the user client.
     */
    notifyUser?: boolean;
    /**
     * Create a blob with exported file in the source document.
     */
    storeInDocument?: boolean;
    /**
     * Automatically download a translated file.
     */
    triggerAutoDownload?: boolean;
};

/**
 * Options for exporting elements to OBJ.
 */
export type BtbObjExportParams = {
    advancedParams?: BtbExportAdvancedParams;
    cloudStorageOptions?: BtbCloudStorageOptions;
    /**
     * The name of the exported file.
     */
    destinationName?: string;
    emailExportOptions?: BtbEmailExportOptions;
    /**
     * Whether or not to exclude hidden parts from export.
     */
    excludeHiddenEntities?: boolean;
    /**
     * Whether parts should be exported as a group or individually in a .zip file.
     */
    grouping?: boolean;
    /**
     * Whether topology ids should be exported as parasolid attributes.
     */
    includeExportIds?: boolean;
    /**
     * Rotate model from Z-axis-up orientation to Y-axis-up.
     */
    isYAxisUp?: boolean;
    meshParams?: BtbExportMeshParams;
    /**
     * Send notification to the user client.
     */
    notifyUser?: boolean;
    /**
     * Create a blob with exported file in the source document.
     */
    storeInDocument?: boolean;
    /**
     * Automatically download a translated file.
     */
    triggerAutoDownload?: boolean;
};

export type BtbsMatrix386 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    fullTransformation?: Array<number>;
    isNormalized?: boolean;
    m00?: number;
    m01?: number;
    m02?: number;
    m03?: number;
    m10?: number;
    m11?: number;
    m12?: number;
    m13?: number;
    m20?: number;
    m21?: number;
    m22?: number;
    m23?: number;
    rigid?: boolean;
    rigidWithinTransformTolerance?: boolean;
    translation?: BtVector3d389;
};

/**
 * Options for exporting elements to Solidworks.
 */
export type BtbSolidworksExportParams = {
    advancedParams?: BtbExportAdvancedParams;
    cloudStorageOptions?: BtbCloudStorageOptions;
    /**
     * The name of the exported file.
     */
    destinationName?: string;
    emailExportOptions?: BtbEmailExportOptions;
    /**
     * Whether or not to exclude hidden parts from export.
     */
    excludeHiddenEntities?: boolean;
    /**
     * Whether parts should be exported as a group or individually in a .zip file.
     */
    grouping?: boolean;
    /**
     * Whether topology ids should be exported as parasolid attributes.
     */
    includeExportIds?: boolean;
    /**
     * Rotate model from Z-axis-up orientation to Y-axis-up.
     */
    isYAxisUp?: boolean;
    /**
     * Send notification to the user client.
     */
    notifyUser?: boolean;
    /**
     * Create a blob with exported file in the source document.
     */
    storeInDocument?: boolean;
    /**
     * Automatically download a translated file.
     */
    triggerAutoDownload?: boolean;
};

/**
 * Options for exporting elements to STEP.
 */
export type BtbStepExportParams = {
    advancedParams?: BtbExportAdvancedParams;
    cloudStorageOptions?: BtbCloudStorageOptions;
    /**
     * The name of the exported file.
     */
    destinationName?: string;
    emailExportOptions?: BtbEmailExportOptions;
    /**
     * Whether or not to exclude hidden parts from export.
     */
    excludeHiddenEntities?: boolean;
    /**
     * Whether parts should be exported as a group or individually in a .zip file.
     */
    grouping?: boolean;
    /**
     * Whether topology ids should be exported as parasolid attributes.
     */
    includeExportIds?: boolean;
    /**
     * Rotate model from Z-axis-up orientation to Y-axis-up.
     */
    isYAxisUp?: boolean;
    /**
     * Send notification to the user client.
     */
    notifyUser?: boolean;
    stepParasolidPreprocessingOption?: GbtPreProcessParasolidOption;
    stepUnit?: GbtExportUnit;
    /**
     * Export STEP in version: `AP242` | `AP203` | `AP214`
     */
    stepVersionString?: string;
    /**
     * Create a blob with exported file in the source document.
     */
    storeInDocument?: boolean;
    /**
     * Automatically download a translated file.
     */
    triggerAutoDownload?: boolean;
};

export type BtBaseEntityAppearanceEntry3607 = {
    affectedDeterministicIds?: Array<string>;
    appearance?: BtGraphicsAppearance1152;
    /**
     * Type of JSON object.
     */
    btType?: string;
    source?: BtPartMetadataSource2895;
};

export type BtBaseEntityAppearanceSettings1391 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    colorIdToBaseEntityAppearanceEntry?: {
        [key: string]: BtBaseEntityAppearanceEntry3607;
    };
    isNoop?: boolean;
};

export type BtBaseEntityData33 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    constructionPlane?: boolean;
    copyWithoutGeometry?: BtBaseEntityData33;
    decompressed?: BtBaseEntityData33;
    defaultPane?: boolean;
    deletion?: boolean;
    featureIds?: Array<string>;
    fromSketch?: boolean;
    geometries?: Array<BtEntityGeometry35>;
    origin?: boolean;
};

export type BtBaseInfo = {
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtBasePartColorCycle2614 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBaseSmJointTableRowMetadata2232 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTBaseSMJointTableRowMetadata-2232';
} & {
    btType?: string;
    crossHighlightData?: BtTableCrossHighlightData1753;
    crossHighlightDataIfAny?: BtTableCrossHighlightData1753;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBezierDegreeDimensionDisplayData2597 = BtDimensionDisplayData323 & {
    btType?: 'BTBezierDegreeDimensionDisplayData-2597';
} & {
    btType?: string;
    positionX?: number;
    positionY?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBillOfMaterialsElementInfo = {
    configuration?: string;
    headerIdToValue?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtBillOfMaterialsHeaderInfo = {
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    propertyName?: string;
    valueType?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    visible?: boolean;
};

export type BtBillOfMaterialsInfo = {
    bomSource?: BtBillOfMaterialsSourceInfo;
    createdAt?: string;
    formatVersion?: string;
    headers?: Array<BtBillOfMaterialsHeaderInfo>;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    rows?: Array<BtBillOfMaterialsRowInfo>;
    templateId?: string;
    topLevelAssemblyRow?: BtBillOfMaterialsRowInfo;
    type?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtBillOfMaterialsItemSourceInfo = {
    configuration?: string;
    documentId?: string;
    elementId?: string;
    fullConfiguration?: string;
    href?: string;
    isStandardContent?: boolean;
    nonGeometricItemId?: string;
    partId?: string;
    partIdentity?: string;
    sourceElementMicroversionId?: string;
    thumbnailInfo?: BtThumbnailInfo;
    versionMetadataWorkspaceMicroversionId?: string;
    viewHref?: string;
    wvmId?: string;
    wvmType?: string;
};

export type BtBillOfMaterialsObjectWithPropertiesInfo = {
    headerIdToValue?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtBillOfMaterialsRowInfo = {
    headerIdToValue?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    indentLevel?: number;
    itemSource?: BtBillOfMaterialsItemSourceInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Occurrence IDs in the assembly that refer to the part described by this BOM row.
     */
    relatedOccurrences?: Array<string>;
    rowId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtBillOfMaterialsSourceInfo = {
    document?: BtBillOfMaterialsObjectWithPropertiesInfo;
    documentMicroversion?: BtBillOfMaterialsObjectWithPropertiesInfo;
    element?: BtBillOfMaterialsElementInfo;
    href?: string;
    thumbnailInfo?: BtThumbnailInfo;
    version?: BtBillOfMaterialsObjectWithPropertiesInfo;
    viewHref?: string;
    workspace?: BtBillOfMaterialsObjectWithPropertiesInfo;
};

export type BtBillOfMaterialsTable1073 = BtTable1825 & {
    btType?: 'BTBillOfMaterialsTable-1073';
} & {
    btType?: string;
    failedMetadataRepresentativeOccurrences?: Array<string>;
    indented?: boolean;
    isProtectedWorkspace?: boolean;
    isShowingTopLevelAssemblyRow?: boolean;
    partNumber?: string;
    revision?: string;
    showingExcluded?: boolean;
    subassemblyBomBehaviorName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBillOfMaterialsTableRow1425 = BtTableRow1054 & {
    btType?: 'BTBillOfMaterialsTableRow-1425';
} & {
    btType?: string;
    excludeIsEditable?: boolean;
    exclusionStatus?: GbtBillOfMaterialsExclusionStatus;
    expansionStatus?: GbtBillOfMaterialsExpansionStatus;
    indentLevel?: number;
    isComponentsOnly?: boolean;
    isSuppressed?: boolean;
    metadataObjectType?: number;
    metadataUpdateHref?: string;
    name?: string;
    relatedOccurrencePaths?: Array<string>;
    subassemblyBomBehaviorName?: string;
    suppressionStatus?: GbtBillOfMaterialsSuppressionStatus;
    uniqueItemId?: BtBillOfMaterialsUniqueItemId2029;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBillOfMaterialsTableRowMetadata1300 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTBillOfMaterialsTableRowMetadata-1300';
} & {
    btType?: string;
    crossHighlightData?: BtTableAssemblyCrossHighlightData2675;
    crossHighlightDataIfAny?: BtTableAssemblyCrossHighlightData2675;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBillOfMaterialsUniqueItemId2029 = {
    apiConfiguration?: string;
    /**
     * Type of JSON object.
     */
    btType?: string;
    isStandardContent?: boolean;
    itemDefinitionId?: string;
    metadataObjectType?: BtMetadataObjectType;
    partId?: string;
    partIdentity?: BtpsoIdentity2741;
    sourceElement?: BtElementReference725;
    versionMetadataWorkspaceId?: string;
    versionMetadataWorkspaceMicroversionId?: string;
};

export type BtBillingPlanInfo = {
    amountCents?: number;
    applicationId?: string;
    clientId?: string;
    companyPlan?: boolean;
    consumableQuantity?: number;
    deprecated?: boolean;
    description?: string;
    discountInfo?: BtDiscountInfo;
    group?: string;
    hidden?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    interval?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    onshapePlan?: boolean;
    planType?: number;
    trialPeriodDays?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtBodyEntity26 = BtFeatureEntity34 & {
    btType?: 'BTBodyEntity-26';
} & {
    btType?: string;
    doesNotUseLevelsOfDetail?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBodyTypeFilter112 = BtQueryFilter183 & {
    btType?: 'BTBodyTypeFilter-112';
} & {
    bodyType?: GbtBodyType;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * An axis-aligned bounding box indicated by two opposite corners.
 */
export type BtBoundingBox1052 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    maxCorner?: BtVector3d389;
    minCorner?: BtVector3d389;
    valid?: boolean;
};

export type BtBoundingBoxInfo = {
    highX?: number;
    highY?: number;
    highZ?: number;
    lowX?: number;
    lowY?: number;
    lowZ?: number;
};

export type BtBrokenOutEndCondition1107 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    hasOffset?: boolean;
    hasUptoPoint?: boolean;
    offsetDistance?: number;
    offsetOppositeDirection?: boolean;
    uptoPoint?: Array<number>;
    uptoPoint3d?: BtVector3d389;
};

export type BtCacheDataPath191 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    documentId?: string;
    elementId?: string;
    immutableContextVersion?: string;
    immutablePathContentsShouldExist?: boolean;
    isImmutableContextPath?: boolean;
    key?: string;
    keyContainsConfiguration?: boolean;
    region?: string;
    useLocalFileCache?: boolean;
};

export type BtCardInfo = {
    billingAddress?: BtAddressInfo;
    expMonth?: number;
    expYear?: number;
    last4?: string;
    type?: string;
};

export type BtCategoryParam = {
    id?: string;
    name?: string;
};

export type BtCategoryPropertyConfigInfo = {
    computedAssemblyPropertyAggregatedPropertyId?: string;
    computedAssemblyPropertyAggregationOperator?: number;
    computedAssemblyPropertyConfig?: BtComputedAssemblyPropertyConfig;
    computedAssemblyPropertyErrorValuePolicy?: number;
    computedAssemblyPropertyFilterInverted?: boolean;
    computedAssemblyPropertyFilterPropertyId?: string;
    computedAssemblyPropertyMissingValuePolicy?: number;
    computedAssemblyPropertySecondaryPropertyId?: string;
    computedPartPropertyConfig?: BtComputedPartPropertyConfig;
    computedPropertyFunctionName?: string;
    computedPropertyFunctionNamespace?: string;
    computedPropertyFunctionURL?: string;
    defaultValue?: string;
    displayName?: string;
    enumValues?: Array<BtMetadataEnumValue>;
    maxCount?: number;
    maxDate?: string;
    maxLength?: number;
    maxValue?: number;
    minCount?: number;
    minDate?: string;
    minLength?: number;
    minValue?: number;
    multiline?: boolean;
    multivalued?: boolean;
    pattern?: string;
    publishState?: number;
    quantityType?: number;
    required?: boolean;
};

export type BtCategoryPropertyInfo = {
    array?: boolean;
    assignable?: boolean;
    blobMimeType?: string;
    categoryPropertyConfigInfo?: BtCategoryPropertyConfigInfo;
    categorySummaryInfoList?: Array<BtMetadataCategorySummaryInfo>;
    description?: string;
    editableInMicroversion?: boolean;
    editableInVersion?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    objectDefName?: string;
    ownerId?: string;
    ownerType?: number;
    uiReadonlyInMicroversion?: boolean;
    uiReadonlyInVersion?: boolean;
    valueType?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtCenterlineDimensionDisplayData1798 = BtLinearDimensionDisplayData330 & {
    btType?: 'BTCenterlineDimensionDisplayData-1798';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCircleDescription1145 = BtCurveDescription1583 & {
    btType?: 'BTCircleDescription-1145';
} & {
    btType?: string;
    normal?: BtVector3d389;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtClassroomInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'classroom';
} & {
    assignmentsWithErrors?: {
        [key: string]: string;
    };
    educator?: boolean;
    numberOfAssignments?: number;
    numberOfMembers?: number;
    state?: number;
    stateName?: string;
    title?: string;
};

export type BtClonedInstance2505 = BtParametricOutputInstance2288 & {
    btType?: 'BTClonedInstance-2505';
} & {
    btType?: string;
    seedOccurrence?: BtOccurrence74;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtClosedCompositeConstituentFilter2804 = BtQueryFilter183 & {
    btType?: 'BTClosedCompositeConstituentFilter-2804';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtClosedConstituentPartData2911 = {
    bodyType?: GbtBodyType;
    /**
     * Type of JSON object.
     */
    btType?: string;
    isActiveSheetMetal?: boolean;
    isMesh?: boolean;
    meshState?: GbtMeshState;
};

export type BtClosedCurveFilter1206 = BtQueryFilter183 & {
    btType?: 'BTClosedCurveFilter-1206';
} & {
    btType?: string;
    isClosed?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCloudStorageAccountInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'cloudstorageaccount';
} & {
    cloudStorageAccountId?: string;
    cloudStorageProvider?: number;
    enabled?: boolean;
    exportFolder?: BtCloudStorageObjectInfo;
    importFolder?: BtCloudStorageObjectInfo;
    lastAuthenticated?: string;
};

export type BtCloudStorageObjectInfo = {
    canMove?: boolean;
    cloudStorageAccountId?: string;
    cloudStorageObjectId?: string;
    cloudStorageProvider?: number;
    connectionName?: string;
    connectionNames?: Array<string>;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    createdById?: string;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    iconLink?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isContainer?: boolean;
    isEnterpriseOwned?: boolean;
    isExternalConnectionResource?: boolean;
    isMutable?: boolean;
    mimeType?: string;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    modifiedById?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    owner?: BtOwnerInfo;
    parentId?: string;
    projectId?: string;
    resourceType?: string;
    sizeBytes?: number;
    thumbnailInfo?: BtThumbnailInfo;
    treeHref?: string;
    unparentHref?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    webViewLink?: string;
};

export type BtColorInfo = {
    blue?: number;
    green?: number;
    red?: number;
};

export type BtCommentAttachmentInfo = {
    fileName?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    mimeType?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    thumbnailFor?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtCommentInfo = {
    assemblyFeatures?: Array<string>;
    assignedAt?: string;
    assignee?: BtUserSummaryInfo;
    attachment?: BtCommentAttachmentInfo;
    canDelete?: boolean;
    canResolveOrReopen?: boolean;
    coordinates?: CoordinatesInfo;
    createdAt?: string;
    documentId?: string;
    elementFeature?: string;
    elementId?: string;
    elementOccurrences?: Array<string>;
    elementQuery?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    message?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    objectId?: string;
    objectType?: number;
    parentId?: string;
    releasePackageId?: string;
    reopenedAt?: string;
    reopenedBy?: BtUserSummaryInfo;
    replyCount?: number;
    resolvedAt?: string;
    resolvedBy?: BtUserSummaryInfo;
    state?: number;
    thumbnail?: BtCommentAttachmentInfo;
    topLevel?: boolean;
    user?: BtUserSummaryInfo;
    userCompany?: string;
    versionId?: string;
    viewData?: BtViewDataInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
};

export type BtCommentParams = {
    assemblyFeature?: string;
    /**
     * Assign the comment during creation. Comments cannot be reassigned during an update at this time.
     */
    assignee?: string;
    coordinates?: CoordinatesParams;
    documentId?: string;
    elementFeature?: string;
    elementId?: string;
    elementOccurrence?: string;
    elementQuery?: string;
    id?: string;
    message?: string;
    objectId?: string;
    objectType?: number;
    parentId?: string;
    versionId?: string;
    viewData?: BtViewDataParams;
    workspaceId?: string;
};

export type BtCommonUnitInfo = {
    abbreviation?: string;
    unit?: string;
    unitName?: string;
    unitType?: string;
    valueInBaseUnits?: number;
};

export type BtCommonUnitsInfo = {
    quantityTypeToBaseUnits?: {
        [key: string]: {
            [key: string]: number;
        };
    };
    units?: Array<BtCommonUnitInfo>;
};

export type BtCompanyInfo = {
    address?: BtAddressInfo;
    admin?: boolean;
    description?: string;
    domainPrefix?: string;
    enterpriseBaseUrl?: string;
    enterpriseSubtype?: number;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    image?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    noPublicDocuments?: boolean;
    ownerId?: string;
    purchase?: BtPurchaseInfo;
    secondaryDomainPrefixes?: Array<string>;
    state?: number;
    type?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtCompanySummaryInfo = {
    admin?: boolean;
    description?: string;
    domainPrefix?: string;
    enterpriseBaseUrl?: string;
    enterpriseSubtype?: number;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    image?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    noPublicDocuments?: boolean;
    ownerId?: string;
    secondaryDomainPrefixes?: Array<string>;
    state?: number;
    type?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtCompanyUserInfo = {
    admin?: boolean;
    company?: BtCompanySummaryInfo;
    dateAdded_?: string;
    documentationNameOverride?: string;
    guest?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    lastLoginTime?: string;
    light?: boolean;
    /**
     * Name of the resource.
     */
    name?: string;
    state?: number;
    user?: BtUserBasicSummaryInfo;
    userRolePriority?: UserRolePriority;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtCompanyUserParams = {
    /**
     * Indicates the user is an admin if true.
     */
    admin?: boolean;
    /**
     * Company ID of the user.
     */
    companyId?: string;
    /**
     * String to override documentation name.
     */
    documentationNameOverride?: string;
    /**
     * Email ID of the company user.
     */
    email?: string;
    /**
     * List of global permissions to grant. See [Onshape Help: Global Permissions](https://cad.onshape.com/help/Content/Plans/global_permissions.htm#Assignin) for details on each of the available permissions.
     * * `0`: Manage role based access control
     * * `1`: Manage users, teams, and aliases
     * * `2`: Enterprise administrator
     * * `3`: Permanently delete
     * * `4`: Analytics administrator
     * * `5`: Invite guest users
     * * `6`: Create projects
     * * `7`: Approve releases
     * * `8`: Enable link sharing
     * * `9`: Create releases
     * * `10`: Allow access to the App Store
     * * `11`: Create documents and folders in the Enterprise root
     * * `12`: Allow access to public documents
     * * `17`: Manage non-geometric items
     * * `18`: Manage workflows
     * * `19`: Transfer documents out of Enterprise
     * * `20`: Sync to Arena
     * * `21`: Create tasks
     * * `22`: Manage standard content metadata
     * * `23`: Workspace protection permissions
     * * `24`: Import files
     * * `25`: Use revision tools  * `26`: Export files
     *
     */
    globalPermissions?: Array<number>;
    /**
     * Indicates the user is a guest user if true.
     */
    guest?: boolean;
    /**
     * Indicates the user is a light user if true.
     */
    light?: boolean;
};

export type BtCompanyUserSummaryAdminInfo = BtCompanyUserSummaryInfo & {
    jsonType?: 'companyuseradmin';
} & {
    totpEnabled?: boolean;
};

export type BtCompanyUserSummaryInfo = BtUserSummaryInfo & {
    jsonType?: 'companyuser';
} & {
    admin?: boolean;
    cls?: string;
    companyUserState?: number;
};

export type BtComputedAssemblyPropertyAggregationOperator = 'SUM' | 'MINIMUM' | 'MAXIMUM' | 'AVERAGE' | 'WEIGHTED_SUM' | 'WEIGHTED_AVERAGE' | 'ANY' | 'ALL' | 'NOT_ANY' | 'NOT_ALL';

export type BtComputedAssemblyPropertyConfig = {
    aggregatedPropertyId?: string;
    aggregationOperator?: BtComputedAssemblyPropertyAggregationOperator;
    errorValuePolicy?: BtComputedAssemblyPropertyErrorPolicy;
    filterPropertyId?: string;
    isFilterPropertyInverted?: boolean;
    missingValuePolicy?: BtComputedAssemblyPropertyErrorPolicy;
    secondaryPropertyId?: string;
};

export type BtComputedAssemblyPropertyErrorPolicy = 'ExcludeFromComputation' | 'TreatAsZero' | 'TreatAsTrue' | 'TreatAsFalse' | 'PropagateError';

export type BtComputedConfigurationInputSpec2525 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    inputId?: string;
};

export type BtComputedPartPropertyConfig = {
    computedPartPropertySpecFunction?: string;
    computedPartPropertySpecNamespace?: string;
    computedPropertyFunctionReturnType?: number;
    propertyFunctionDocumentId?: string;
};

export type BtComputedPartPropertySpec1746 = BtFeatureSpec129 & {
    btType?: 'BTComputedPartPropertySpec-1746';
} & {
    btType?: string;
    computedPartPropertySpecId?: string;
    propertyFunctionReturnType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConeDescription860 = BtSurfaceDescription1564 & {
    btType?: 'BTConeDescription-860';
} & {
    axis?: BtVector3d389;
    btType?: string;
    halfAngle?: number;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfigurableTreeNode = {
    name?: string;
    parameterLibraries?: Array<BtmParameter1>;
    parameters?: Array<BtmParameter1>;
    suppressed?: boolean;
    suppressionState?: BtmSuppressionState1924;
};

export type BtConfigurationInfo = {
    isStandardContent?: boolean;
    parameters?: Array<ConfigurationInfoEntry>;
};

export type BtConfigurationParams = {
    parameters?: Array<ConfigurationEntry>;
    standardContentParametersId?: string;
};

export type BtConfigurationResponse2019 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configurationParameters?: Array<BtmConfigurationParameter819>;
    currentConfiguration?: Array<BtmParameter1>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtConfigurationUpdateCall2933 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configurationParameters?: Array<BtmConfigurationParameter819>;
    currentConfiguration?: Array<BtmParameter1>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtConfiguredDimensionColumnInfo2168 = BtConfiguredValuesColumnInfo1025 & {
    btType?: 'BTConfiguredDimensionColumnInfo-2168';
} & {
    btType?: string;
    dimensionId?: string;
    parameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredFeatureColumnInfo1014 = BtConfiguredValuesColumnInfo1025 & {
    btType?: 'BTConfiguredFeatureColumnInfo-1014';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredParameterColumnInfo2900 = BtConfiguredValuesColumnInfo1025 & {
    btType?: 'BTConfiguredParameterColumnInfo-2900';
} & {
    btType?: string;
    innerParameterLocation?: BtInnerParameterLocation1715;
    parameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredPartProperties2645 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
    parts?: Array<BtPartWithConfiguredProperties2163>;
    propertyIdToConfiguredTable?: {
        [key: string]: BtPartWithConfiguredProperties2163;
    };
    synchronizeToSingleEnumInput?: boolean;
};

export type BtConfiguredPartPropertiesTable2740 = BtTable1825 & {
    btType?: 'BTConfiguredPartPropertiesTable-2740';
} & {
    btType?: string;
    partDeterministicId?: string;
    partDeterministicIds?: Array<string>;
    propertyNodeId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredSuppressionColumnInfo2498 = BtConfiguredValuesColumnInfo1025 & {
    btType?: 'BTConfiguredSuppressionColumnInfo-2498';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * Configured variable description, if configured
 */
export type BtConfiguredValue = {
    /**
     * The configuration parameter configuring this value, if configured
     */
    configurationParameterId?: string;
    /**
     * Configuration to value, required if configuration parameter id is specified
     */
    configurationToValue?: {
        [key: string]: string;
    };
};

export type BtConfiguredValuesColumnInfo1025 = BtTableColumnInfo1222 & {
    btType?: 'BTConfiguredValuesColumnInfo-1025';
} & {
    btType?: string;
    parentId?: string;
    parentName?: string;
    parentType?: GbtConfiguredParentType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConstructionObjectFilter113 = BtQueryFilter183 & {
    btType?: 'BTConstructionObjectFilter-113';
} & {
    btType?: string;
    isConstruction?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConstructionPlaneEntity27 = BtFeatureEntity34 & {
    btType?: 'BTConstructionPlaneEntity-27';
} & {
    btType?: string;
    isDefault?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCoordinateSystem387 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    matrix?: BtbsMatrix386;
    origin?: BtVector3d389;
    xAxis?: BtVector3d389;
    yAxis?: BtVector3d389;
    zAxis?: BtVector3d389;
};

export type BtCopyDocumentInfo = {
    newDocumentId?: string;
    newDocumentName?: string;
    newOwner?: BtOwnerInfo;
    newParentId?: string;
    newProjectId?: string;
    newWorkspaceId?: string;
};

/**
 * Options for the new copied document.
 */
export type BtCopyDocumentParams = {
    /**
     * `true` to make the new document public.
     */
    isPublic?: boolean;
    /**
     * Name for the new document.
     */
    newName?: string;
    /**
     * Owner of the new document. Can be a [user ID](#/User/sessionInfo) or [company ID](#/Company/findCompany), depending on `ownerTypeIndex`.
     */
    ownerId?: string;
    /**
     * Type of owner. `0: User, 1: Company`
     */
    ownerTypeIndex?: number;
    /**
     * Optionally add the new document to the specified folder. Provide the folder ID as the parent ID.
     */
    parentId?: string;
    /**
     * Optionally add the new document to the specified project.
     */
    projectId?: string;
    /**
     * `true` to re-point version references in application elements to the initial version in the new document.
     */
    repointAppElementVersionRefs?: boolean;
};

export type BtCopyElementParams = {
    anchorElementId?: string;
    documentIdSource?: string;
    elementIdSource?: string;
    isGroupAnchor?: boolean;
    workspaceIdSource?: string;
};

export type BtCopyViewAssociativeDataParams = {
    associativeDataIds?: Array<string>;
    destinationViewId?: string;
    sourceElementId?: string;
    sourceViewId?: string;
};

export type BtCosmeticThreadMetadata3248 = BtDomainSpecificMetadata961 & {
    btType?: 'BTCosmeticThreadMetadata-3248';
} & {
    btType?: string;
    cylinderRadius?: number;
    cylinderSystem?: BtCoordinateSystem387;
    pitch?: number;
    threadLength?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCountDimensionDisplayData1778 = BtDimensionDisplayData323 & {
    btType?: 'BTCountDimensionDisplayData-1778';
} & {
    btType?: string;
    positionX?: number;
    positionY?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCreateTaskParams = {
    /**
     * Id of the company that owns the task.
     */
    companyId: string;
    /**
     * Description of the task.
     */
    description?: string;
    descriptionParamValue?: string;
    /**
     * Id of a document to associate the task to.
     */
    documentId?: string;
    /**
     * References to include in the task.
     */
    itemParams?: Array<BtTaskItemParams>;
    /**
     * Name of the task.
     */
    name?: string;
    nameParamValue?: string;
    /**
     * Set Task metadata properties.
     */
    propertyValues?: Array<BtPropertyValueParam>;
};

export type BtCurveDescription1583 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    direction?: BtVector3d389;
    directionOrientedWithFace?: BtVector3d389;
    origin?: BtVector3d389;
    type?: GbtCurveTypeEnum;
};

export type BtCurveLengthDimensionDisplayData322 = BtDimensionDisplayData323 & {
    btType?: 'BTCurveLengthDimensionDisplayData-322';
} & {
    btType?: string;
    positionX?: number;
    positionY?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCylinderDescription686 = BtSurfaceDescription1564 & {
    btType?: 'BTCylinderDescription-686';
} & {
    axis?: BtVector3d389;
    btType?: string;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtCylindricalImageMapping1640 = BtImageMapping3821 & {
    btType?: 'BTCylindricalImageMapping-1640';
} & {
    btType?: string;
    cylinderSystem?: BtCoordinateSystem387;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDatumDisplayData3408 = BtAnnotationDisplayData3225 & {
    btType?: 'BTDatumDisplayData-3408';
} & {
    btType?: string;
    name?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDatumTableRowMetadata3060 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTDatumTableRowMetadata-3060';
} & {
    annotationId?: string;
    btType?: string;
    crossHighlightData?: BtTableCrossHighlightData1753;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDebugGeometry2059 = BtEntityGeometry35 & {
    btType?: 'BTDebugGeometry-2059';
} & {
    appearance?: BtGraphicsAppearance1152;
    belongsToFlattenedSheetMetalBody?: boolean;
    bodyId?: string;
    btType?: string;
    color?: GbtDebugEntityColor;
    deterministicId?: string;
    sheetMetalModelId?: string;
    style?: GbtDebugEntityStyle;
    tessellation?: BtTessellatedGeometry2576;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDecal2404 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    imageSourceId?: string;
    mappings?: Array<BtImageMapping3821>;
};

export type BtDefaultFeatures119 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    children?: Array<BtmFeature134>;
};

/**
 * Specifies which unit should be used for each supported quantity type.
 */
export type BtDefaultUnitInfo = {
    /**
     * The quantity type.
     */
    key?: string;
    /**
     * The unit that should be used.
     */
    value?: string;
};

export type BtDefaultUnitsInfo = {
    nodeId?: string;
    units?: Array<BtDefaultUnitInfo>;
};

export type BtDerivedAssemblyMirror4204 = BtParametricInstance2641 & {
    btType?: 'BTDerivedAssemblyMirror-4204';
} & {
    assemblyReferenceParameter?: BtmParameterReferenceWithConfiguration3028;
    btType?: string;
    configuration?: Array<BtmParameter1>;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    lockedState?: BtInstanceWithReference;
    microversionId?: BtMicroversionId366;
    mirrorFeature?: BtmDerivedAssemblyMirrorFeature5094;
    mirrorFeatureInterface?: BtAssemblyMirrorFeatureInterface;
    nodeWithReferenceList?: Array<BtNodeWithReference>;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028;
    versionId?: string;
    versionIdIfExternal?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDeviceLoginSecretInfo = {
    createdAt?: string;
    modifiedAt?: string;
    randomToken?: string;
};

export type BtDiffInfo = {
    changes?: {
        [key: string]: BtDiffInfo;
    };
    entityType?: BtDiffInfoCollectionType;
    geometryChangeMessages?: Array<string>;
    sourceId?: string;
    sourceValue?: string;
    targetId?: string;
    targetValue?: string;
    type?: GbtNodeChange;
};

export type BtDiffInfoCollectionType = 'parts' | 'sketches' | 'points' | 'mateConnectors' | 'planes' | 'curves' | 'surfaces';

export type BtDiffJsonResponse2725 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    change?: BtjEdit3734;
    patch?: {
        btType?: string;
    };
    sourceChangeId?: string;
    targetChangeId?: string;
};

export type BtDimensionDisplayData323 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    characteristicId?: string;
    coordinateSystem?: BtMatrix3X3340;
    featureId?: string;
    fitClass?: string;
    hasMaximumLimit?: boolean;
    hasMinimumLimit?: boolean;
    id?: string;
    isAnnotationDimension?: boolean;
    isAssociatedWithFlat?: boolean;
    isDriven?: boolean;
    isOverDefined?: boolean;
    lowerTolerance?: number;
    maximumLimit?: number;
    minimumLimit?: number;
    parameterId?: string;
    partId?: string;
    planeMatrix?: BtbsMatrix386;
    precision?: GbtTolerancePrecision;
    toleranceType?: GbtToleranceType;
    upperTolerance?: number;
    value?: number;
};

export type BtDiscount = {
    accountBalance?: number;
    amountOff?: number;
    amountOffCurrency?: string;
    couponType?: number;
    couponValidMonths?: number;
    createdAt?: string;
    createdBy?: string;
    description?: string;
    expiresAt?: string;
    id?: BtDiscountOwnerIdPlanId;
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    modifiedAt?: string;
    modifiedBy?: string;
    name?: string;
    new?: boolean;
    percentOff?: number;
    trialEndDate?: string;
    usedAt?: string;
};

export type BtDiscountInfo = {
    accountBalance?: number;
    amountOff?: number;
    couponType?: number;
    couponValidMonths?: number;
    createdAt?: string;
    createdBy?: BtUserSummaryInfo;
    expiresAt?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    ownerId?: string;
    percentOff?: number;
    planId?: string;
    trialEndDate?: string;
    usedAt?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtDiscountOwnerIdPlanId = {
    ownerId?: string;
    planId?: string;
};

/**
 * Describes a display state.
 */
export type BtDisplayStateInfo = {
    /**
     * The ID of the view feature.
     */
    id?: string;
    /**
     * `True` if this display state is in all assemblies by default; `false` if the display state is user-created.
     */
    isOnshapeDefault?: boolean;
    /**
     * The name of the view feature.
     */
    name?: string;
};

export type BtDocumentContentsInfo = {
    /**
     * The elements (tabs) in the document. This does not include folders.
     */
    elements?: Array<BtDocumentElementInfo>;
    folders?: BtElementGroup1458;
};

/**
 * List of element IDs to include in the document.
 */
export type BtDocumentElementCreationDescriptor = {
    elementParams?: BtAppElementParams;
    elementType?: number;
};

export type BtDocumentElementInfo = {
    accelerationUnits?: string;
    angleUnits?: string;
    angularVelocityUnits?: string;
    applicationTarget?: BtApplicationTargetInfo;
    areaUnits?: string;
    dataType?: string;
    deleted?: boolean;
    densityUnits?: string;
    elementType?: GbtElementType;
    energyUnits?: string;
    filename?: string;
    forceUnits?: string;
    foreignDataId?: string;
    id?: string;
    lengthUnits?: string;
    massUnits?: string;
    microversionId?: string;
    momentUnits?: string;
    name?: string;
    pressureUnits?: string;
    prettyType?: string;
    safeToShow?: boolean;
    specifiedUnit?: string;
    thumbnailInfo?: BtThumbnailInfo;
    thumbnails?: string;
    timeUnits?: string;
    type?: string;
    unupdatable?: boolean;
    volumeUnits?: string;
    zip?: BtZipFileInfo;
};

export type BtDocumentElementProcessingInfo = {
    accelerationUnits?: string;
    angleUnits?: string;
    angularVelocityUnits?: string;
    applicationTarget?: BtApplicationTargetInfo;
    areaUnits?: string;
    dataType?: string;
    deleted?: boolean;
    densityUnits?: string;
    elementType?: GbtElementType;
    energyUnits?: string;
    filename?: string;
    forceUnits?: string;
    foreignDataId?: string;
    id?: string;
    lengthUnits?: string;
    massUnits?: string;
    microversionId?: string;
    momentUnits?: string;
    name?: string;
    pressureUnits?: string;
    prettyType?: string;
    safeToShow?: boolean;
    specifiedUnit?: string;
    thumbnailInfo?: BtThumbnailInfo;
    thumbnails?: string;
    timeUnits?: string;
    translationEventKey?: string;
    translationId?: string;
    type?: string;
    unupdatable?: boolean;
    volumeUnits?: string;
    zip?: BtZipFileInfo;
};

export type BtDocumentElementReference2484 = BtGroupOrElementReference2205 & {
    btType?: 'BTDocumentElementReference-2484';
} & {
    btType?: string;
    elementId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDocumentHistoryInfo = {
    canBeRestored?: boolean;
    date?: string;
    description?: string;
    microversionId?: string;
    nextMicroversionId?: string;
    /**
     * If this microversion is the result of a restore from another microversion, the restoreId will be the microversion Id of the original microversion that was restored. Otherwise this id will not be included within the response.
     */
    restoreId?: string;
    userId?: string;
    username?: string;
};

export type BtDocumentInfo = BtGlobalTreeNodeSummaryInfo & {
    jsonType?: 'document';
} & {
    anonymousAccessAllowed?: boolean;
    anonymousAllowsExport?: boolean;
    canCreateTaskViaConnectionGlobalPermission?: boolean;
    canExportViaConnectionGlobalPermisison?: boolean;
    canImportViaConnectionGlobalPermission?: boolean;
    canMove?: boolean;
    canUnshare?: boolean;
    connectionName?: string;
    connectionNames?: Array<string>;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    createdWithEducationPlan?: boolean;
    defaultElementId?: string;
    defaultVersionGraphMode?: BtVersionGraphMode;
    defaultVersionGraphShowAutoVersions?: boolean;
    defaultVersionGraphShowMerges?: boolean;
    defaultWorkspace?: BtWorkspaceInfo;
    description?: string;
    documentLabels?: Array<BtDocumentLabelInfo>;
    documentThumbnailElementId?: string;
    documentType?: number;
    duplicateNameViolationError?: string;
    elementLibrarySummaryInfo?: Array<BtElementLibrarySummaryInfo>;
    forceExportRules?: boolean;
    hasReleaseRevisionableObjects?: boolean;
    hasRelevantInsertables?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isContainer?: boolean;
    isEnterpriseOwned?: boolean;
    isExternalConnectionResource?: boolean;
    isMutable?: boolean;
    isOrphaned?: boolean;
    isUpgradedToLatestVersion?: boolean;
    isUsingManagedWorkflow?: boolean;
    likedByCurrentUser?: boolean;
    likes?: number;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    notRevisionManaged?: boolean;
    notes?: string;
    numberOfTimesCopied?: number;
    numberOfTimesReferenced?: number;
    owner?: BtOwnerInfo;
    parentId?: string;
    permission?: BtOldPermission;
    permissionSet?: Array<string>;
    projectId?: string;
    public?: boolean;
    publishedVersionId?: string;
    recentVersion?: BtBaseInfo;
    requireApprovedDrawingTemplatesPreference?: boolean;
    resourceType?: string;
    sequence?: string;
    supportTeamUserAndShared?: boolean;
    tags?: Array<string>;
    thumbnail?: BtThumbnailInfo;
    totalWorkspacesScheduledForUpdate?: number;
    totalWorkspacesUpdating?: number;
    tracingEnabled?: boolean;
    trash?: boolean;
    trashedAt?: string;
    treeHref?: string;
    unparentHref?: string;
    userAccountLimitsBreached?: boolean;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtDocumentLabelInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'label';
} & {
    parentLabelId?: string;
    path?: string;
};

export type BtDocumentMergeInfo = {
    libraryVersionMismatch?: boolean;
    overwrittenElements?: Array<BtDocumentElementInfo>;
    parentDocumentMicroversionId?: string;
    resultDocumentMicroversionId?: string;
    sourceDocumentMicroversionId?: string;
};

export type BtDocumentMessageBody = {
    appElementSessionId?: string;
    commentId?: string;
    data?: string;
    documentId?: string;
    documentState?: string;
    documentType?: number;
    elementId?: string;
    entryId?: string;
    entryType?: string;
    event?: string;
    messageId?: string;
    metadataObjectType?: string;
    newPermissionSet?: Array<string>;
    oldPermissionSet?: Array<string>;
    partId?: string;
    partIdentity?: string;
    partNumber?: string;
    resourceType?: string;
    shareAction?: string;
    timestamp?: string;
    translationId?: string;
    userId?: string;
    versionId?: string;
    webhookId?: string;
    workspaceId?: string;
};

/**
 * Parameters for creating and updating documents.
 */
export type BtDocumentParams = {
    /**
     * Document description.
     */
    description?: string;
    /**
     * List of element IDs to include in the document.
     */
    elements?: Array<BtDocumentElementCreationDescriptor>;
    /**
     * `true` if the current user can toggle the Force Export Rule flag on a document.
     */
    forceExportRules?: boolean;
    /**
     * Set to `true` for debugging.
     */
    generateUnknownMessages?: boolean;
    /**
     * Set to `true` to generate an empty document.
     */
    isEmptyContent?: boolean;
    /**
     * Set to `true` to make the document public.
     */
    isPublic?: boolean;
    /**
     * Document name.
     */
    name?: string;
    /**
     * Set to `true` to indicate that revisions are not managed for this document.
     */
    notRevisionManaged?: boolean;
    /**
     * Document notes.
     */
    notes?: string;
    /**
     * Historical document notes.
     */
    oldClientNotes?: string;
    /**
     * The document owner's email address.
     */
    ownerEmail?: string;
    /**
     * If `ownerType=USER`, this is the user ID. If `ownerType=COMPANY`, this is the company ID.
     */
    ownerId?: string;
    /**
     * The document's owner type. `USER=0` | `COMPANY=1` | `ONSHAPE=2`
     */
    ownerType?: number;
    /**
     * Document ID of this document's parent.
     */
    parentId?: string;
    /**
     * ID of the project this document belongs to.
     */
    projectId?: string;
    /**
     * Array of strings to set as tags for the document.
     */
    tags?: Array<string>;
};

export type BtDocumentProcessingInfo = BtDocumentInfo & {
    jsonType?: 'document-processing';
} & {
    splitAssembliesIntoMultipleDocuments?: boolean;
    translationEventKey?: string;
    translationId?: string;
};

export type BtDocumentSearchHitInfo = {
    documentId?: string;
    elementName?: string;
    folderId?: string;
    highlightedFields?: {
        [key: string]: Array<string>;
    };
    hit?: BtLegacySearchHit;
    hitId?: string;
    meshState?: number;
    name?: string;
    projectId?: string;
    sourceMap?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    type?: BtSearchEntityType;
    versionOrWorkspaceName?: string;
};

export type BtDocumentSearchParams = {
    /**
     * Type of documents to search: `0: My Documents | 1: Created | 2: Shared | 3: Trash | 4: Public | 5: Recent | 6: By Owner | 7: By Company | 9: By Team`
     */
    documentFilter?: number;
    foundIn?: BtesVersionWorkspaceChoice;
    /**
     * Number of results to return per page. Default value is 20 (also the maximum).
     */
    limit?: number;
    /**
     * Offset. Determines where search results begin. Default value is 0.
     */
    offset?: number;
    /**
     * Owner ID. Can be a user ID, company ID, or team ID, depending on `ownerType`.
     */
    ownerId?: string;
    /**
     * Search document parent Id
     */
    parentId?: string;
    /**
     * Search for documents that contain the given string in the name. Search is not case-sensitive.
     */
    rawQuery?: string;
    /**
     * Column by which to sort search results. `name | modifiedAt | createdAt (default) | email | modifiedBy | promotedAt`
     */
    sortColumn?: string;
    /**
     * Type of documents to search: `0: My Documents | 1: Created | 2: Shared | 3: Trash | 4: Public | 5: Recent | 6: By Owner | 7: By Company | 9: By Team`
     */
    sortOrder?: string;
    /**
     * Type of owner. `0: User | 1: Company | 2: Onshape`. If the owner is a teamId, leave this unspecified.
     */
    type?: string;
    when?: BtesResultsFilter;
};

export type BtDocumentSelectorInfo = {
    parameters?: BtDocumentSelectorParametersInfo;
    selectorId?: string;
};

export type BtDocumentSelectorParametersInfo = {
    jsonType: string;
};

export type BtDocumentSummarySearchInfo = BtGlobalTreeNodeSummaryInfo & {
    jsonType?: 'document-summary-search';
} & {
    searchHits?: Array<BtDocumentSearchHitInfo>;
};

export type BtDocumentVersionElementIds1897 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    documentId?: string;
    elementId?: string;
    versionId?: string;
};

export type BtDocumentWithVersionAndElementId = {
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryId?: ObjectId;
    elementLibraryVersion?: ObjectId;
    partNumber?: string;
    revision?: string;
    uniqueVersionId?: string;
    validElementLibraryReference?: boolean;
    validRevisionReference?: boolean;
};

export type BtDocumentWithVersionId = {
    documentId?: string;
    documentVersionId?: string;
};

export type BtDomainSpecificMetadata961 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDrawingHiddenLineOption = 'drafting' | 'excluded' | 'marked';

export type BtDrawingModificationParams = {
    /**
     * The label that will appear in the document's edit history for this operation. If blank, a value will be auto-generated.
     */
    description?: string;
    /**
     * Array of drawing modification operations.
     */
    jsonRequests?: Array<BtbDrawingOperationParams>;
};

/**
 * JSON schema for creating or updating a drawing.
 */
export type BtDrawingParams = {
    /**
     * Set to `true` to include a border in the drawing.
     */
    border?: boolean;
    /**
     * Set to `true` to compute and display virtual edges (curves drawn where parts intersect). Leave as `false` to improve performance.
     */
    computeIntersection?: boolean;
    /**
     * `PERIOD` | `COMMA`
     */
    decimalSeparator?: string;
    /**
     * Apply this display state's properties to the drawing.
     */
    displayStateId?: string;
    /**
     * The document in which to create the drawing. If used, this value must match the document ID (`did`) value provided in the URL.
     */
    documentId?: string;
    /**
     * Create a drawing of a part or assembly from this microversion.
     */
    documentMicroversionId?: string;
    /**
     * Provide a name for the drawing.
     */
    drawingName?: string;
    /**
     * Apply this configuration from the source element to the drawing.
     */
    elementConfiguration?: string;
    /**
     * The id of the element in which to perform the operation.
     */
    elementId?: string;
    /**
     * The id of the element microversion in which to perform the operation.
     */
    elementMicroversionId?: string;
    /**
     * Apply this exploded view to the drawing.
     */
    explosionId?: string;
    /**
     * Create a drawing of an element from this external document.
     */
    externalDocumentId?: string;
    /**
     * Create a drawing of an element from this external document version.
     */
    externalDocumentVersionId?: string;
    hiddenLines?: BtDrawingHiddenLineOption;
    /**
     * Set to `true` to include surfaces in the drawing.
     */
    includeSurfaces?: boolean;
    /**
     * Set to `true` to include wires in the drawing.
     */
    includeWires?: boolean;
    /**
     * Set to `true` if creating a drawing from a flattened part.
     */
    isFlattenedPart?: boolean;
    /**
     * Set to `true` if creating a drawing of a sketch.
     */
    isSketchOnly?: boolean;
    /**
     * Set to `true` if creating a drawing from a surface.
     */
    isSurface?: boolean;
    /**
     * Set the language for the drawing. Accepts any ISO 639-1 standard language code.
     */
    language?: string;
    location?: BtElementLocationParams;
    /**
     * The type of model to include in the drawing: `partstudio` | `assembly`
     */
    modelType?: string;
    /**
     * Apply this named view to the drawing.
     */
    namedPositionId?: string;
    /**
     * The number of horizontal zones to include in the drawing's graphics area.
     */
    numberHorizontalZones?: number;
    /**
     * The number of vertical zones to include in the drawing's graphics area.
     */
    numberVerticalZones?: number;
    /**
     * Include this part in the drawing.
     */
    partId?: string;
    /**
     * Include this part in the drawing.
     */
    partNumber?: string;
    /**
     * Include all parts found by the query in the drawing.
     */
    partQuery?: string;
    /**
     * Apply this projection to the drawing.
     */
    projection?: string;
    /**
     * Set to `true` if creating the drawing of an empty sketch.
     */
    pureSketch?: boolean;
    /**
     * `BEST_PERFORMANCE` | `BEST_QUALITY` | `BALANCED` | `ADAPTIVE`
     */
    qualityOption?: string;
    /**
     * Specify the type of element to create the drawing from. `0: UNKNOWN` | `1: PARTSTUDIO` | `2: ASSEMBLY` | `3: PART` | `4: FLATTENED_PART` | `5: COMPOSITE_PART` | `6: MESH_PART` | `7: SURFACE` | `8: SKETCH` | `9: CURVE`
     */
    referenceType?: number;
    referenceTypeEnum?: GbtAppElementReferenceType;
    /**
     * Create the drawing from this specific revision.
     */
    revision?: string;
    /**
     * Set to `true` to show only cut geometry in the drawing.
     */
    showCutGeomOnly?: boolean;
    /**
     * `NONE` | `ABSOLUTE` | `RATIO_TO_MODEL` | `RATIO_TO_BODY` | `AUTOMATIC`
     */
    simplificationOption?: string;
    /**
     * `NONE` | `UNKNOWN` | `SMOOTH` | `DRAFTING`
     */
    simplificationThreshold?: number;
    /**
     * Provide a size for the drawing.
     */
    size?: string;
    /**
     * Include these sketches in the drawing.
     */
    sketchIds?: Array<string>;
    /**
     * Provide the Standard to use in the drawing.
     */
    standard?: string;
    /**
     * The zone in which to start the drawing.
     */
    startZones?: string;
    /**
     * Provide any additional arguments for the template being used for this drawing.
     */
    templateArgs?: Array<string>;
    /**
     * Apply the template from this document to the drawing.
     */
    templateDocumentId?: string;
    /**
     * Apply the template from this element to the drawing.
     */
    templateElementId?: string;
    /**
     * Apply this template to the drawing.
     */
    templateName?: string;
    /**
     * Apply the template from this version to the drawing.
     */
    templateVersionId?: string;
    /**
     * Apply the template from this workspace to the drawing.
     */
    templateWorkspaceId?: string;
    /**
     * Set to `true` to include a title block in the drawing.
     */
    titleblock?: boolean;
    /**
     * Units for the element: `METER` | `CENTIMETER` | `MILLIMETER` | `INCH` | `FOOT` | `YARD`
     */
    units?: string;
    /**
     * Add these views to the drawing.
     */
    views?: string;
    /**
     * Create a drawing of a part or assembly from this workspace.
     */
    workspaceId?: string;
};

/**
 * Search result when
 */
export type BtesResultsFilter = 'ALL' | 'LATEST' | 'LATEST_PER_HIT';

/**
 * Search result found in
 */
export type BtesVersionWorkspaceChoice = 'ALL' | 'WORKSPACES' | 'VERSIONS';

export type BtEdgeTopologyFilter122 = BtQueryFilter183 & {
    btType?: 'BTEdgeTopologyFilter-122';
} & {
    btType?: string;
    edgeTopology?: GbtEdgeTopology;
    isInternalEdge?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEditingLogic2350 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    functionName?: string;
    wantsClickedButton?: boolean;
    wantsHiddenBodies?: boolean;
    wantsIsCreating?: boolean;
    wantsSpecifiedParameters?: boolean;
};

export type BtElementDisplayData326 = {
    annotationsForElement?: BtAnnotationElementDisplayData894;
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementId?: string;
    fromFullElementId?: BtFullElementId756;
    fullElementId?: BtFullElementId756;
    incremental?: boolean;
    instanceCount?: number;
    keepFromMicroversion?: boolean;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfigurationInterval?: BtMicroversionIdAndConfigurationInterval2364;
    microversionInterval?: BtMicroversionIdInterval367;
    versionForRasterization?: BtElementDisplayData326;
};

export type BtElementGroup1458 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * The name of the group (folder).
     */
    groupName?: string;
    /**
     * List of folders or elements in this group (folder).
     */
    groups?: Array<BtGroupOrElementReference2205>;
    /**
     * A unique identifier for this folder.
     */
    nodeId?: string;
};

export type BtElementLibraryReferenceData3133 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementLibraryId?: string;
    elementLibraryIdRaw?: BtObjectId;
    elementLibrarySelectionPath?: Array<BtObjectId>;
    elementLibraryVersion?: string;
    elementLibraryVersionRaw?: BtObjectId;
};

/**
 * Element library metadata
 */
export type BtElementLibrarySummaryInfo = {
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * The ID of the definition of the element library.
     */
    libraryDefinitionId?: string;
    /**
     * The Id of the library -- unique across Onshape.
     */
    libraryId?: string;
    /**
     * The current version Id of the library.
     */
    libraryVersion?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * The owner Id of an element library (either Onshape, company, or user).
     */
    ownerId?: string;
    /**
     * The type of library owner, Onshape, user, or company
     */
    ownerType?: number;
    /**
     * The id of the root folder of the library
     */
    sourceFolderId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

/**
 * The location at which the new element should be inserted.
 */
export type BtElementLocationParams = {
    /**
     * The id of an element which provides context for the position value specified.
     */
    elementId?: string;
    /**
     * An indicator for the relative placement of the new element. If elementId is specified, a negative number indicates insertion prior to the element and a non-negative number indicates insertion following the element. If no elementId is specified, a negative value indicates insertion at the end of the element list and a non-negative number indicates insertion at the start of the element list.
     */
    position?: number;
};

export type BtElementMergeInfo = {
    branchPointElementName?: string;
    branchPointElementPath?: Array<string>;
    dependentElementMergeInfo?: BtElementMergeInfo;
    elementDataType?: string;
    elementId?: string;
    elementType?: GbtElementType;
    mergeable?: boolean;
    sourceElementName?: string;
    sourceElementPath?: Array<string>;
    sourceElementStatus?: GbtElementBranchStatus;
    sourceLibraryVersion?: number;
    sourceModifiedAt?: string;
    sourceModifiedBy?: BtUserBasicSummaryInfo;
    sourceOutOfDate?: boolean;
    targetElementName?: string;
    targetElementPath?: Array<string>;
    targetElementStatus?: GbtElementBranchStatus;
    targetLibraryVersion?: number;
    targetModifiedAt?: string;
    targetModifiedBy?: BtUserBasicSummaryInfo;
    targetOutOfDate?: boolean;
    versionCompatible?: boolean;
};

export type BtElementReference725 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configured?: boolean;
    documentVersionId?: string;
    elementId?: string;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    externalReference?: boolean;
    fullElementId?: BtFullElementId756;
    microversionIdAndConfiguration?: BtMicroversionIdAndConfiguration2338;
    nodeId?: string;
};

export type BtElementTransaction = {
    description?: string;
    documentId?: string;
    elementId?: string;
    id?: string;
    microbranchId?: string;
    workspaceId?: string;
};

export type BtEllipseDescription866 = BtCurveDescription1583 & {
    btType?: 'BTEllipseDescription-866';
} & {
    btType?: string;
    majorAxis?: BtVector3d389;
    majorRadius?: number;
    minorRadius?: number;
    normal?: BtVector3d389;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEllipseDiameterDimensionDisplayData1301 = BtLinearDimensionDisplayData330 & {
    btType?: 'BTEllipseDiameterDimensionDisplayData-1301';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEncodedConfigurationInfo = {
    encodedId?: string;
    queryParam?: string;
};

export type BtEntityDegenerateEdge1129 = BtTessellatedGeometry2576 & {
    btType?: 'BTEntityDegenerateEdge-1129';
} & {
    btType?: string;
    point?: Array<number>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEntityDeletion24 = BtBaseEntityData33 & {
    btType?: 'BTEntityDeletion-24';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEntityEdge30 = BtTessellatedGeometry2576 & {
    btType?: 'BTEntityEdge-30';
} & {
    btType?: string;
    compressedPoints?: BtImmutableByteArray;
    edgeSmoothnessStatus?: GbtEntityEdgeSmoothnessStatus;
    edgeType?: GbtEdgeType;
    isClosed?: boolean;
    isInternalEdge?: boolean;
    meshState?: GbtMeshState;
    points?: BtImmutableFloatArray;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEntityFace31 = BtTessellatedGeometry2576 & {
    btType?: 'BTEntityFace-31';
} & {
    btType?: string;
    compressedUvs?: BtImmutableByteArray;
    flipComputedNormals?: boolean;
    indices?: BtImmutableIntArray;
    indicesStoredAsDifferences?: boolean;
    isPlanar?: boolean;
    maxPrincipleCurvatureMagnitudes?: BtImmutableFloatArray;
    minPrincipleCurvatureMagnitudes?: BtImmutableFloatArray;
    normals?: BtImmutableFloatArray;
    points?: BtImmutableFloatArray;
    surfaceParameters?: BtImmutableDoubleArray;
    surfaceType?: GbtSurfaceType;
    textureCoordinates?: BtImmutableFloatArray;
    triangleCount?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEntityGeometry35 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    compressed?: boolean;
    decompressed?: BtEntityGeometry35;
    errorCode?: number;
    estimatedMemoryUsageInBytes?: number;
    hasTessellationError?: boolean;
    settingIndex?: number;
};

export type BtEntityPoint29 = BtTessellatedGeometry2576 & {
    btType?: 'BTEntityPoint-29';
} & {
    btType?: string;
    point?: Array<number>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEntityTypeFilter124 = BtQueryFilter183 & {
    btType?: 'BTEntityTypeFilter-124';
} & {
    btType?: string;
    entityType?: GbtEntityType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEnumOptionRange3741 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    end?: string;
    start?: string;
};

export type BtEnumOptionVisibilityCondition3455 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    condition?: BtParameterVisibilityCondition177;
};

export type BtEnumOptionVisibilityConditionList2936 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    visibilityConditions?: Array<BtEnumOptionVisibilityCondition3455>;
};

export type BtEnumOptionVisibilityForList1613 = BtEnumOptionVisibilityCondition3455 & {
    btType?: 'BTEnumOptionVisibilityForList-1613';
} & {
    btType?: string;
    controlledOptions?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtEnumOptionVisibilityForRange4297 = BtEnumOptionVisibilityCondition3455 & {
    btType?: 'BTEnumOptionVisibilityForRange-4297';
} & {
    btType?: string;
    controlledRange?: BtEnumOptionRange3741;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExplosion2754 = BtmAssemblyFeature887 & {
    btType?: 'BTExplosion-2754';
} & {
    btType?: string;
    explodeSteps?: Array<BtExplosionStepFeature3008>;
    startingPositionId?: BtMicroversionIdAndConfiguration2338;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExplosionStepFeature3008 = BtmAssemblyFeature887 & {
    btType?: 'BTExplosionStepFeature-3008';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExportBodyProperties3559 = BtExportModelProperties3216 & {
    btType?: 'BTExportBodyProperties-3559';
} & {
    btType?: string;
    material?: BtPartMaterial1445;
    visibility?: GbtPartVisibility;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExportModelArcEdgeGeometry1257 = BtExportModelEdgeGeometry1125 & {
    btType?: 'BTExportModelArcEdgeGeometry-1257';
} & {
    arcIsClockwise?: boolean;
    arcSweep?: number;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExportModelBodiesResponse734 = {
    bodies?: Array<BtExportModelBody1272>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    errorEnum?: GbtErrorStringEnum;
    microversionId?: BtMicroversionId366;
    nodeIdToReferencedProperty?: {
        [key: string]: BtExportModelProperties3216;
    };
};

export type BtExportModelBody1272 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * If type == COMPOSITE, indicates whether it is open or closed.
     */
    closed?: boolean;
    constituentBodyIds?: Array<string>;
    /**
     * Indicates if there is a closed composite that consumes this body.
     */
    consumedByComposite?: boolean;
    edges?: Array<BtExportModelEdge1782>;
    faces?: Array<BtExportModelFace1363>;
    id?: string;
    properties?: BtExportBodyProperties3559;
    type?: GbtBodyType;
    vertices?: Array<BtExportModelVertex858>;
};

export type BtExportModelCoedge1342 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    edgeId?: string;
    orientation?: boolean;
};

export type BtExportModelEdge1782 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    curve?: BtCurveDescription1583;
    geometry?: BtExportModelEdgeGeometry1125;
    id?: string;
    vertices?: Array<string>;
};

export type BtExportModelEdgeGeometry1125 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    endPoint?: BtVector3d389;
    endVector?: BtVector3d389;
    length?: number;
    midPoint?: BtVector3d389;
    quarterPoint?: BtVector3d389;
    startPoint?: BtVector3d389;
    startVector?: BtVector3d389;
};

export type BtExportModelFace1363 = {
    /**
     * Identifies the application of the appearance. Faces that share a value were assigned an appearance together.
     */
    appearancePropertyNodeId?: string;
    area?: number;
    box?: BtBoundingBox1052;
    /**
     * Type of JSON object.
     */
    btType?: string;
    cosmeticThreadMetadata?: BtCosmeticThreadMetadata3248;
    decalIdToDecal?: {
        [key: string]: BtDecal2404;
    };
    faceProperties?: BtExportModelProperties3216;
    id?: string;
    loops?: Array<BtExportModelLoop1182>;
    orientation?: boolean;
    surface?: BtSurfaceDescription1564;
};

export type BtExportModelLoop1182 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    coedges?: Array<BtExportModelCoedge1342>;
    isInner?: boolean;
    isOuter?: boolean;
};

export type BtExportModelProperties3216 = {
    appearance?: BtGraphicsAppearance1152;
    /**
     * Type of JSON object.
     */
    btType?: string;
    name?: string;
};

export type BtExportModelVertex858 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    id?: string;
    point?: BtVector3d389;
};

export type BtExportRuleHardcodedPropertyInfo = {
    context?: number;
    id?: string;
    name?: string;
    objectTypes?: Array<number>;
};

export type BtExportRuleValidOptionsInfo = {
    conventionPlaceholder?: string;
    hardcodedProperties?: Array<BtExportRuleHardcodedPropertyInfo>;
    propertyContextDisplayMap?: {
        [key: string]: string;
    };
    validObjectTypes?: Array<number>;
};

export type BtExportTessellatedBody3398 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    constituents?: Array<string>;
    id?: string;
    name?: string;
};

export type BtExportTessellatedEdgesBody890 = BtExportTessellatedBody3398 & {
    btType?: 'BTExportTessellatedEdgesBody-890';
} & {
    btType?: string;
    edges?: Array<BtExportTessellatedEdgesEdge1364>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExportTessellatedEdgesEdge1364 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    id?: string;
    vertices?: Array<BtVector3d389>;
};

export type BtExportTessellatedEdgesResponse327 = {
    bodies?: Array<BtExportTessellatedBody3398>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    errorEnum?: GbtErrorStringEnum;
};

export type BtExportTessellatedFacesBody1321 = BtExportTessellatedBody3398 & {
    btType?: 'BTExportTessellatedFacesBody-1321';
} & {
    appearance?: BtGraphicsAppearance1152;
    bodyType?: GbtBodyType;
    btType?: string;
    faces?: Array<BtExportTessellatedFacesFace1192>;
    facetPoints?: Array<BtVector3d389>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExportTessellatedFacesFace1192 = {
    appearance?: BtGraphicsAppearance1152;
    appearanceSourceId?: string;
    appearanceSourceName?: string;
    /**
     * Type of JSON object.
     */
    btType?: string;
    errorMessage?: string;
    facets?: Array<BtExportTessellatedFacesFacet1417>;
    id?: string;
};

export type BtExportTessellatedFacesFacet1417 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    indices?: Array<number>;
    normal?: BtVector3d389;
    normals?: Array<BtVector3d389>;
    textureCoordinates?: Array<BtVector2d1812>;
    vertices?: Array<BtVector3d389>;
};

export type BtExportTessellatedFacesResponse898 = {
    bodies?: Array<BtExportTessellatedBody3398>;
    bodiesInfo?: BtExportModelBodiesResponse734;
    /**
     * Type of JSON object.
     */
    btType?: string;
    combineCompositePartConstituents?: boolean;
    displayData?: BtPartStudioDisplayData346;
    documentId?: string;
    elementId?: string;
    errorEnum?: GbtErrorStringEnum;
    facetPoints?: Array<BtVector3d389>;
    fullElementId?: BtFullElementId756;
    outputFaceAppearances?: boolean;
    outputSeparateFaceNodes?: boolean;
};

export type BtExternalConnectionInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'external-connection';
} & {
    approvedBy?: BtUserSummaryInfo;
    icon?: string;
    invitedCompany?: BtCompanySummaryInfo;
    isOwnerEnterpriseEdu?: boolean;
    member?: boolean;
    numberOfMembers?: number;
    rejectedBy?: string;
    state?: number;
};

export type BtExternalElementReferenceInfo = {
    documentId?: string;
    elementId?: string;
    elementMicroversionId?: string;
    versionId?: string;
};

export type BtExternalReference1936 = BtElementReference725 & {
    btType?: 'BTExternalReference-1936';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtfsTable953 = BtTable1825 & {
    btType?: 'BTFSTable-953';
} & {
    btType?: string;
    crossHighlightData?: BtTableBaseCrossHighlightData2609;
    hiddenColumnIdsToNames?: {
        [key: string]: string;
    };
    individualTableProperties?: BtIndividualTableProperties3760;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtfsTableColumnInfo623 = BtTableColumnInfo1222 & {
    btType?: 'BTFSTableColumnInfo-623';
} & {
    btType?: string;
    crossHighlightData?: BtTableBaseCrossHighlightData2609;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtfsTableRowMetadata2262 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTFSTableRowMetadata-2262';
} & {
    btType?: string;
    callout?: string;
    crossHighlightData?: BtTableBaseCrossHighlightData2609;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtfsValue1888 = {
    /**
     * Type of JSON object.
     */
    btType: string;
    typeTag?: string;
};

export type BtfsValueArray1499 = BtfsValue1888 & {
    btType: 'BTFSValueArray-1499';
} & {
    btType: string;
    value?: Array<BtfsValue1888>;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueBoolean1195 = BtfsValue1888 & {
    btType: 'BTFSValueBoolean-1195';
} & {
    btType: string;
    value?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueMap2062 = {
    /**
     * Type of JSON object.
     */
    btType: string;
    typeTag?: string;
    value?: Array<BtfsValueMapEntry2077>;
};

export type BtfsValueMapEntry2077 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    key?: BtfsValue1888;
    value?: BtfsValue1888;
};

export type BtfsValueNumber772 = BtfsValue1888 & {
    btType: 'BTFSValueNumber-772';
} & {
    btType: string;
    value?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueOther1124 = BtfsValue1888 & {
    btType: 'BTFSValueOther-1124';
} & {
    btType: string;
    type?: GbtpType;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueString1422 = BtfsValue1888 & {
    btType: 'BTFSValueString-1422';
} & {
    btType: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueTooBig1247 = BtfsValue1888 & {
    btType: 'BTFSValueTooBig-1247';
} & {
    btType: string;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueUndefined2003 = BtfsValue1888 & {
    btType: 'BTFSValueUndefined-2003';
} & {
    btType: string;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtfsValueWithUnits1817 = BtfsValue1888 & {
    btType: 'BTFSValueWithUnits-1817';
} & {
    btType: string;
    unitToPower?: {
        [key: string]: number;
    };
    value?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtFeatureApiBase1430 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureDefinitionCall1406 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmFeature134;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureDefinitionResponse1617 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmFeature134;
    featureState?: BtFeatureState1688;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureEntity34 = BtBaseEntityData33 & {
    btType?: 'BTFeatureEntity-34';
} & {
    btType?: string;
    domainSpecificMetadata?: Array<BtDomainSpecificMetadata961>;
    firstGeometry?: BtEntityGeometry35;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtFeatureFilter127 = BtQueryFilter183 & {
    btType?: 'BTFeatureFilter-127';
} & {
    btType?: string;
    exclusion?: GbtFeatureFilterExclusion;
    featureId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * List of features instantiated within the Part Studio.
 */
export type BtFeatureListResponse2457 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * List of Onshape-defined features instantiated within the Part Studio.
     */
    defaultFeatures?: Array<BtmFeature134>;
    /**
     * State of each feature, indicating if the feature is valid. Incorrectly defined features will still appear in the Feature list.
     */
    featureStates?: {
        [key: string]: BtFeatureState1688;
    };
    /**
     * List of user-defined features instantiated within the Part Studio.
     */
    features?: Array<BtmFeature134>;
    /**
     * Internal only. Do not modify.
     */
    imports?: Array<BtmImport136>;
    /**
     * `true` if the features represent the entire part studio or `false` for a filtered subset.
     */
    isComplete?: boolean;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Index of the rollback bar location. `-1` indicates the bar is at the end of the Feature List.
     */
    rollbackIndex?: number;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The document microversion from which the result was extracted. Part, face, edge, and vertex IDs are only valid for the same microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureOccurrenceData775 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    visibility?: GbtbsFeatureVisibility;
};

export type BtFeatureScriptEvalCall2377 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    queries?: {
        [key: string]: Array<string>;
    };
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    script?: string;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureScriptEvalResponse1859 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    console?: string;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    notices?: Array<BtNotice227>;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    result?: BtfsValue1888;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureSpec129 = {
    allParameters?: Array<BtParameterSpec6>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    computedPartPropertySpec?: boolean;
    descriptionImageUri?: string;
    editingLogic?: BtEditingLogic2350;
    featureNameTemplate?: string;
    featureType?: string;
    featureTypeDescription?: string;
    featureTypeName?: string;
    filterSelectors?: Array<string>;
    fullFeatureType?: string;
    groups?: Array<BtParameterGroupSpec3469>;
    iconUri?: string;
    languageVersion?: number;
    linkedLocationName?: string;
    localizableName?: string;
    locationInfos?: Array<BtLocationInfo226>;
    manipulatorChangeFunction?: string;
    namespace?: string;
    namespaceTheSource?: boolean;
    parameterIdToSpec?: {
        [key: string]: BtParameterSpec6;
    };
    parameterLibraryDefinitionIds?: Array<string>;
    parameters?: Array<BtParameterSpec6>;
    signature?: string;
    sourceLocation?: BtLocationInfo226;
    sourceMicroversionId?: string;
    stringsToLocalize?: Array<string>;
    tableSpec?: boolean;
    toleranceSpec?: boolean;
    tooltipTemplate?: string;
    uiHints?: Array<GbtuiHint>;
    variableStudioReferenceSpec?: boolean;
};

export type BtFeatureSpecsResponse664 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureSpecs?: Array<BtFeatureSpec129>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureState1688 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureStatus?: GbtNodeStatusType;
    inactive?: boolean;
};

export type BtFeatureStudioContents2239 = BtFeatureApiBase1430 & {
    btType?: 'BTFeatureStudioContents-2239';
} & {
    btType?: string;
    contents?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtFeatureTypeFilter962 = BtQueryFilter183 & {
    btType?: 'BTFeatureTypeFilter-962';
} & {
    btType?: string;
    featureType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtFlatSheetMetalFilter3018 = BtQueryFilter183 & {
    btType?: 'BTFlatSheetMetalFilter-3018';
} & {
    allows?: GbtFilterFlattenedGeometryOptions;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtFolderInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'folder';
} & {
    active?: boolean;
    canUnshare?: boolean;
    elementLibrarySummaryInfo?: Array<BtElementLibrarySummaryInfo>;
    isOrphaned?: boolean;
    permissionSet?: Array<string>;
    trash?: boolean;
    trashedAt?: string;
};

export type BtFolderStateInfo = {
    name?: string;
    treeHref?: string;
};

export type BtForeignDataResponse1070 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    bucketName?: string;
    bucketPath?: string;
    cacheChunkList?: Array<string>;
    dataId?: string;
    format?: GbtDataItemFormat;
    name?: string;
    region?: string;
    size?: number;
    storageType?: string;
    useLocalStorage?: boolean;
};

export type BtFullElementId756 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configured?: boolean;
    elementId?: string;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfiguration?: BtMicroversionIdAndConfiguration2338;
    target?: BtMicroversionIdAndConfiguration2338;
};

export type BtFullElementIdAndPartId643 = BtFullElementIdWithDocument1729 & {
    btType?: 'BTFullElementIdAndPartId-643';
} & {
    btType?: string;
    partId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtFullElementIdWithDocument1729 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configured?: boolean;
    documentId?: string;
    elementId?: string;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfiguration?: BtMicroversionIdAndConfiguration2338;
    target?: BtMicroversionIdAndConfiguration2338;
};

export type BtGeneratedGraphicsAppearance4159 = BtGraphicsAppearance1152 & {
    btType?: 'BTGeneratedGraphicsAppearance-4159';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtGeometryFilter130 = BtQueryFilter183 & {
    btType?: 'BTGeometryFilter-130';
} & {
    btType?: string;
    geometryType?: GbtGeometryType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtGeometryMateDisplayData1050 = BtAssemblyFeatureDisplayData1783 & {
    btType?: 'BTGeometryMateDisplayData-1050';
} & {
    btType?: string;
    firstDeterministicId?: string;
    firstOccurrence?: BtOccurrence74;
    location?: BtCoordinateSystem387;
    secondDeterministicId?: string;
    secondOccurrence?: BtOccurrence74;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtGetJsonPaths1697 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    paths?: Array<string>;
};

export type BtGetJsonPathsResponse1544 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    changeId?: string;
    results?: Array<Array<BtJsonMatch2290>>;
};

export type BtGetJsonResponse2137 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    changeId?: string;
    tree?: {
        btType?: string;
        [key: string]: {
            btType?: string;
        } | string | undefined;
    };
};

export type BtGlobalPermissionInfo = {
    items?: Array<BtGlobalPermissionInfoItem>;
};

export type BtGlobalPermissionInfoItem = {
    code?: number;
    identities?: Array<BtIdentityInfo>;
};

export type BtGlobalTreeMagicNodeInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'magic';
} & {
    subType?: number;
};

export type BtGlobalTreeNodeInfo = {
    canMove?: boolean;
    connectionName?: string;
    connectionNames?: Array<string>;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isContainer?: boolean;
    isEnterpriseOwned?: boolean;
    isExternalConnectionResource?: boolean;
    isMutable?: boolean;
    jsonType: string;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    owner?: BtOwnerInfo;
    parentId?: string;
    projectId?: string;
    resourceType?: string;
    treeHref?: string;
    unparentHref?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtGlobalTreeNodeListResponse = {
    /**
     * Requested Document URL
     */
    href?: string;
    /**
     * Document Items array. Array entries are the same as that returned from "/api/documents/{did}".
     */
    items?: Array<BtGlobalTreeNodeInfo>;
    /**
     * The URL for the next page of items. Responses are limited to 20 items per page.
     */
    next?: string;
    /**
     * The URL for the previous page of items. Responses are limited to 20 items per page.
     */
    previous?: string;
};

export type BtGlobalTreeNodeListResponseBtTeamInfo = {
    /**
     * Requested Document URL
     */
    href?: string;
    /**
     * Document Items array. Array entries are the same as that returned from "/api/documents/{did}".
     */
    items?: Array<BtTeamInfo>;
    /**
     * The URL for the next page of items. Responses are limited to 20 items per page.
     */
    next?: string;
    /**
     * The URL for the previous page of items. Responses are limited to 20 items per page.
     */
    previous?: string;
};

export type BtGlobalTreeNodeSummaryInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'document-summary';
} & {
    anonymousAccessAllowed?: boolean;
    anonymousAllowsExport?: boolean;
    canUnshare?: boolean;
    createdWithEducationPlan?: boolean;
    defaultElementId?: string;
    defaultVersionGraphMode?: BtVersionGraphMode;
    defaultVersionGraphShowAutoVersions?: boolean;
    defaultVersionGraphShowMerges?: boolean;
    defaultWorkspace?: BtWorkspaceInfo;
    documentLabels?: Array<BtDocumentLabelInfo>;
    documentType?: number;
    elementLibrarySummaryInfo?: Array<BtElementLibrarySummaryInfo>;
    forceExportRules?: boolean;
    hasReleaseRevisionableObjects?: boolean;
    hasRelevantInsertables?: boolean;
    isOrphaned?: boolean;
    isUsingManagedWorkflow?: boolean;
    likedByCurrentUser?: boolean;
    likes?: number;
    notRevisionManaged?: boolean;
    notes?: string;
    numberOfTimesCopied?: number;
    numberOfTimesReferenced?: number;
    permission?: BtOldPermission;
    permissionSet?: Array<string>;
    public?: boolean;
    publishedVersionId?: string;
    recentVersion?: BtBaseInfo;
    sequence?: string;
    supportTeamUserAndShared?: boolean;
    tags?: Array<string>;
    thumbnail?: BtThumbnailInfo;
    totalWorkspacesScheduledForUpdate?: number;
    totalWorkspacesUpdating?: number;
    trash?: boolean;
    trashedAt?: string;
    userAccountLimitsBreached?: boolean;
};

export type BtGraphicsAppearance1152 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    color?: Array<string>;
    nonTrivial?: boolean;
    opacity?: number;
    reset?: boolean;
    rgbaColor?: Array<string>;
    type?: GbtAppearanceType;
    usableAppearance?: boolean;
};

export type BtGraphicsBuffer2668 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    bufferData?: BtImmutableByteArray;
    mapGraphicsAttributeToComponentCount?: {
        [key: string]: number;
    };
    target?: GbtGraphicsBufferTarget;
};

export type BtGraphicsSectionPlaneData1429 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    center?: BtVector3d389;
    normal?: BtVector3d389;
    tangent?: BtVector3d389;
};

export type BtGraphicsSectionViewStateData4379 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementId?: string;
    isExcluding?: boolean;
    sectionPlanes?: Array<BtGraphicsSectionPlaneData1429>;
    selectionsToExclude?: Array<BtUiSelection1185>;
    selectionsToInclude?: Array<BtUiSelection1185>;
};

/**
 * List of folders or elements in this group (folder).
 */
export type BtGroupOrElementReference2205 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
};

export type BtHoleCalloutDisplayData3452 = BtAnnotationDisplayData3225 & {
    btType?: 'BTHoleCalloutDisplayData-3452';
} & {
    allHoleFaces?: Array<string>;
    btType?: string;
    counterboreDepth?: BtTolerantValueDisplayData3483;
    counterboreDiameter?: BtTolerantValueDisplayData3483;
    countersinkAngle?: BtTolerantValueDisplayData3483;
    countersinkDiameter?: BtTolerantValueDisplayData3483;
    depth?: BtTolerantValueDisplayData3483;
    diameter?: BtTolerantValueDisplayData3483;
    featureId?: string;
    holeType?: GbtHoleType;
    isPipeTap?: boolean;
    isTaperedPipeTap?: boolean;
    isTapped?: boolean;
    labelLocation?: BtVector2d1812;
    partId?: string;
    referenceRadius?: number;
    tapSize?: string;
    tappedDepth?: BtTolerantValueDisplayData3483;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtIdTranslationInfo = {
    documentId?: string;
    elementId?: string;
    ids?: Array<BtIdTranslationResultInfo>;
    sourceDocumentMicroversion?: string;
    targetDocumentMicroversion?: string;
};

export type BtIdTranslationParams = {
    ids?: Array<string>;
    linkDocumentId?: string;
    sourceConfiguration?: string;
    sourceDocumentMicroversion?: string;
    targetConfiguration?: string;
};

export type BtIdTranslationResultInfo = {
    source?: string;
    status?: string;
    target?: Array<string>;
};

export type BtIdentityInfo = {
    company?: BtCompanySummaryInfo;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    identityType?: number;
    team?: BtTeamSummaryInfo;
    user?: BtUserSummaryInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtImageFilter853 = BtQueryFilter183 & {
    btType?: 'BTImageFilter-853';
} & {
    btType?: string;
    isImage?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtImageMapping3821 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    deterministicIds?: Array<string>;
    uvTransform?: BtMatrix3X3340;
};

export type BtImmutableByteArray = {
    empty?: boolean;
};

export type BtImmutableDoubleArray = {
    empty?: boolean;
};

export type BtImmutableFloatArray = {
    empty?: boolean;
};

export type BtImmutableIntArray = {
    empty?: boolean;
};

export type BtImport = {
    forExport?: boolean;
};

export type BtInContextObjectFilter3810 = BtQueryFilter183 & {
    btType?: 'BTInContextObjectFilter-3810';
} & {
    btType?: string;
    isInContext?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtIndividualTableProperties3760 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    hiddenColumns?: Array<BtStringNodeWrapper4224>;
    nodeId?: string;
    order?: Array<BtStringNodeWrapper4224>;
    tableNodeId?: string;
};

export type BtInheritedAclInfo = {
    entries?: Array<BtAclEntryInfo>;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    objectId?: string;
    objectName?: string;
    objectType?: number;
    owner?: BtOwnerInfo;
    public?: boolean;
    sharedWithSupport?: boolean;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    visibility?: string;
};

export type BtInnerArrayParameterLocation2368 = BtInnerParameterLocation1715 & {
    btType?: 'BTInnerArrayParameterLocation-2368';
} & {
    btType?: string;
    index?: number;
    outerParameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInnerDerivedParameterLocation591 = BtInnerParameterLocation1715 & {
    btType?: 'BTInnerDerivedParameterLocation-591';
} & {
    btType?: string;
    outerParameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInnerParameterLocation1715 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInsertableDisplayData2405 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    fullElementId?: BtFullElementId756;
    graphicsBuffers?: {
        [key: string]: {
            [key: string]: BtGraphicsBuffer2668;
        };
    };
    id?: string;
    part?: boolean;
    sketchFeature?: boolean;
    tessellationSettingIndex?: number;
};

/**
 * Array of items in the current page.
 */
export type BtInsertableInfo = {
    bodyType?: GbtBodyType;
    classType?: number;
    configuration?: string;
    configurationParameterValues?: Array<string>;
    configurationParameters?: Array<string>;
    dataType?: string;
    deterministicId?: string;
    documentId?: string;
    elementId?: string;
    elementName?: string;
    elementType?: GbtElementType;
    featureId?: string;
    featureName?: string;
    featureSpec?: Array<string>;
    featureType?: string;
    fsComputedPartPropertySpec?: Array<string>;
    fsTableSpec?: Array<string>;
    hasFaults?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    insertableQuery?: string;
    isFlattenedBody?: boolean;
    isMesh?: boolean;
    meshState?: GbtMeshState;
    microversionId?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    parentId?: string;
    partIdentity?: string;
    partName?: string;
    predictableThumbnailId?: string;
    sourceFileExtension?: string;
    thumbnailUri?: string;
    unflattenedPartDeterministicId?: string;
    variableName?: string;
    versionId?: string;
    versionName?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
    workspaceName?: string;
};

export type BtInsertablePartDisplayData3103 = BtInsertableDisplayData2405 & {
    btType?: 'BTInsertablePartDisplayData-3103';
} & {
    btType?: string;
    partData?: BtPartData16;
    partDisplayData?: BtPartDisplayData17;
    partId?: string;
    tessellationSetting?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInsertableSketchDisplayData3775 = BtInsertableDisplayData2405 & {
    btType?: 'BTInsertableSketchDisplayData-3775';
} & {
    bodyIdToPartData?: {
        [key: string]: BtPartData16;
    };
    btType?: string;
    sketchFeatureId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInsertablesListResponse = {
    canSaveVersion?: boolean;
    changesSinceVersionSave?: number;
    configuration?: {
        [key: string]: BtfsValue1888;
    };
    configurationKey?: string;
    hasMultipleVersions?: boolean;
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtInsertableInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
    updatedThumbnailUri?: string;
};

export type BtInspectionTableRowMetadata2485 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTInspectionTableRowMetadata-2485';
} & {
    annotationId?: string;
    annotationType?: GbtAnnotationType;
    btType?: string;
    constraintId?: string;
    crossHighlightData?: BtTableCrossHighlightData1753;
    crossHighlightDataIfAny?: BtTableCrossHighlightData1753;
    featureId?: string;
    holeCalloutId?: string;
    parameterId?: string;
    partId?: string;
    precision?: GbtTolerancePrecision;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstance642 = BtInstanceBase2263 & {
    btType?: 'BTInstance-642';
} & {
    btType?: string;
    configuration?: Array<BtmParameter1>;
    configured?: boolean;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    lockedState?: BtmParameter1;
    microversionId?: BtMicroversionId366;
    name?: string;
    nodeWithReferenceList?: Array<BtNodeWithReference>;
    parameterLibraries?: Array<BtmParameter1>;
    parameters?: Array<BtmParameter1>;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028;
    versionId?: string;
    versionIdIfExternal?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceBase2263 = BtmNode19 & {
    btType?: 'BTInstanceBase-2263';
} & {
    assemblyInstance?: boolean;
    assemblyMirror?: boolean;
    assemblyPattern?: boolean;
    assemblyReplicate?: boolean;
    btType?: string;
    clonedInstance?: boolean;
    customData?: {
        [key: string]: BtReferenceCustomData1551;
    };
    derivedAssemblyMirror?: boolean;
    instanceFolder?: boolean;
    instanceName?: string;
    isFlattenedPart?: boolean;
    locked?: boolean;
    parametricInstance?: boolean;
    parametricOutputInstance?: boolean;
    parametricPartStudioChildInstance?: boolean;
    parametricPartStudioInstance?: boolean;
    partInstance?: boolean;
    releasable?: boolean;
    revisionCustomData?: BtRevisionCustomData2090;
    standardContent?: boolean;
    standardContentParametersId?: string;
    suppressed?: boolean;
    suppressedFieldIndex?: number;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    suppressionStateFieldIndex?: number;
    validRevisionReference?: boolean;
    version?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceControlNode750 = BtmNode19 & {
    btType?: 'BTInstanceControlNode-750';
} & {
    btType?: string;
    suppressed?: boolean;
    suppressedFieldIndex?: number;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    suppressionStateFieldIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceFolder3627 = BtInstanceBase2263 & {
    btType?: 'BTInstanceFolder-3627';
} & {
    btType?: string;
    featureFolder?: boolean;
    folderEnd?: boolean;
    folderStart?: boolean;
    name?: string;
    parameterLibraries?: Array<BtmParameter1>;
    parameters?: Array<BtmParameter1>;
    startNodeId?: string;
    startNodeIdRaw?: BtObjectId;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceStandardContentData2081 = BtReferenceCustomData1551 & {
    btType?: 'BTInstanceStandardContentData-2081';
} & {
    btType?: string;
    parametersId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceWithReference = {
    configuration?: Array<BtmParameter1>;
    customData?: {
        [key: string]: BtReferenceCustomData1551;
    };
    derivedAssemblyMirror?: boolean;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    locked?: boolean;
    lockedState?: BtInstanceWithReference;
    microversionId?: BtMicroversionId366;
    nodeId?: string;
    nodeWithReferenceList?: Array<BtNodeWithReference>;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028;
    standardContent?: boolean;
    standardContentParametersId?: string;
    validRevisionReference?: boolean;
    versionId?: string;
    versionIdIfExternal?: string;
};

/**
 * Information for non-geometric items.
 */
export type BtItemInfo = {
    /**
     * ID of the company, classroom, or enterprise that owns this item.
     */
    companyId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * Map of the item's properties and their values.
     */
    properties?: {
        [key: string]: string;
    };
    /**
     * `0: PENDING | 1: ACTIVE | 2: INACTIVE`
     */
    publishState?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtItemParams = {
    /**
     * ID of the company, classroom, or enterprise that owns this item.
     */
    companyId?: string;
    /**
     * Item name.
     */
    name?: string;
    /**
     * `0: PENDING | 1: ACTIVE | 2: INACTIVE`
     */
    publishState?: number;
};

/**
 * An edit that will be applied to the application element's json data.
 */
export type BtjEdit3734 = {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * Change the value of a node.
 */
export type BtjEditChange2636 = BtjEdit3734 & {
    btType: 'BTJEditChange-2636';
} & {
    btType: string;
    path?: BtjPath3073;
    value: {
        btType?: string;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
    value: {
        btType?: string;
    };
};

/**
 * Deletes the specified node.
 */
export type BtjEditDelete1992 = BtjEdit3734 & {
    btType: 'BTJEditDelete-1992';
} & {
    btType: string;
    path?: BtjPath3073;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * Inserts a value using the specified path.
 */
export type BtjEditInsert2523 = BtjEdit3734 & {
    btType: 'BTJEditInsert-2523';
} & {
    btType: string;
    path?: BtjPath3073;
    value?: {
        btType?: string;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * A list of edits that will be applied in order.
 */
export type BtjEditList2707 = BtjEdit3734 & {
    btType: 'BTJEditList-2707';
} & {
    btType: string;
    edits?: Array<BtjEdit3734>;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * Move an existing node from one path to another.
 */
export type BtjEditMove3245 = BtjEdit3734 & {
    btType: 'BTJEditMove-3245';
} & {
    btType: string;
    destinationPath?: BtjPath3073;
    sourcePath?: BtjPath3073;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * Identifies a value in the json data to be operated upon.
 */
export type BtjPath3073 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    path?: Array<BtjPathElement2297>;
    /**
     * Either empty (root) or the nodeId of a node in the tree.
     */
    startNode: string;
};

/**
 * Identifies a node in the json structure, beginning at the specified startNode.
 */
export type BtjPathElement2297 = {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * Identifies a value in a json array. For insert and move edit destinations, -1 can be used to indicate 'end'.
 */
export type BtjPathIndex1871 = BtjPathElement2297 & {
    btType: 'BTJPathIndex-1871';
} & {
    btType: string;
    index?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

/**
 * Identifies a subtree of the json structure by field name.
 */
export type BtjPathKey3221 = BtjPathElement2297 & {
    btType: 'BTJPathKey-3221';
} & {
    btType: string;
    key?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType: string;
};

export type BtJsonMatch2290 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    definiteJsonPath?: string;
    node?: {
        btType?: string;
    };
};

export type BtKeyMouseValuesInfo = {
    keys?: Array<string>;
    mouseButtons?: Array<string>;
};

export type BtLazilyParsedFeatureScript = {
    checksum?: BtUiFeatureStudioChecksum2438;
    languageVersion?: number;
    lines?: Lines;
    model?: BtmModel141;
    module?: BtpModule234;
    moduleId?: BtpModuleId235;
    noticeModuleIds?: BtpModuleId235;
    references?: {
        [key: string]: BtMicroversionId366;
    };
    source?: string;
};

export type BtLegacySearchHit = {
    documentId?: string;
    folderId?: string;
    highlightedFields?: {
        [key: string]: Array<string>;
    };
    hitId?: string;
    name?: string;
    projectId?: string;
    sourceMap?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    type?: BtSearchEntityType;
};

export type BtLineDescription1559 = BtCurveDescription1583 & {
    btType?: 'BTLineDescription-1559';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLinearDimensionDisplayData330 = BtDimensionDisplayData323 & {
    btType?: 'BTLinearDimensionDisplayData-330';
} & {
    btType?: string;
    hasExtension?: boolean;
    positionX?: number;
    positionY?: number;
    witnessEndPoint0X?: number;
    witnessEndPoint0Y?: number;
    witnessEndPoint1X?: number;
    witnessEndPoint1Y?: number;
    witnessExtension0Z?: number;
    witnessExtension1Z?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLinkToLatestDocumentInfo = {
    changedElements?: Array<string>;
};

export type BtLinkToLatestDocumentParams = {
    elements?: Array<string>;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtAliasEntryInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtAliasEntryInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtAliasInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtAliasInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtCategoryPropertyInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtCategoryPropertyInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtCommentInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtCommentInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtCompanyInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtCompanyInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtInsertableInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtInsertableInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtItemInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtItemInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtObjectWorkflowInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtObjectWorkflowInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtPurchaseInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtPurchaseInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtRevisionInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtRevisionInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtTeamMemberInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtTeamMemberInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtTranslationRequestInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtTranslationRequestInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtWebhookInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtWebhookInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

/**
 * A list of resources that typically supports paging.
 */
export type BtListResponseBtWorkflowObserverOptionInfo = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtWorkflowObserverOptionInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

export type BtLoadDisplayData837 = BtAssemblyFeatureDisplayData1783 & {
    btType?: 'BTLoadDisplayData-837';
} & {
    btType?: string;
    componentValues?: BtVector3d389;
    directionMateConnectorId?: string;
    faceLoadDeterministicIds?: Array<string>;
    isDirectionFlipped?: boolean;
    loadType?: GbtLoadType;
    occurrence?: BtOccurrence74;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLocationInfo226 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    character?: number;
    column?: number;
    document?: string;
    elementMicroversion?: string;
    endCharacter?: number;
    endColumn?: number;
    endLine?: number;
    fromNode?: BtpNode7;
    fromTemplate?: BtLocationInfo226;
    languageVersion?: number;
    line?: number;
    moduleIds?: BtDocumentVersionElementIds1897;
    nodeId?: string;
    parseNodeId?: string;
    parseNodeIdRaw?: BtObjectId;
    topLevel?: string;
    version?: string;
};

export type BtLockedAtCurrentPosition4006 = BtLockedSubAssembly4590 & {
    btType?: 'BTLockedAtCurrentPosition-4006';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLockedAtNamedPosition3201 = BtLockedSubAssembly4590 & {
    btType?: 'BTLockedAtNamedPosition-3201';
} & {
    btType?: string;
    namedPositionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLockedAtSubAssemblyPosition3885 = BtLockedSubAssembly4590 & {
    btType?: 'BTLockedAtSubAssemblyPosition-3885';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLockedSubAssembly4590 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    lockType?: GbtSubAssemblyLockType;
    lockedSubAssemblyOutputInfo?: BtRigidOrLockedSubAssemblyOutputInfo3860;
};

export type BtLockedSubAssemblyOutputInfo3511 = BtRigidOrLockedSubAssemblyOutputInfo3860 & {
    btType?: 'BTLockedSubAssemblyOutputInfo-3511';
} & {
    btType?: string;
    lockInfo?: BtLockedSubAssembly4590;
    syncError?: GbtErrorStringEnum;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtLoginParams = {
    deviceId?: string;
    email?: string;
    enableTotp?: boolean;
    isRecaptchaV3?: boolean;
    password?: string;
    randomToken?: string;
    recaptchaToken?: string;
    rememberTotp?: boolean;
    rendererPerformanceMeasurement?: BtWebRendererPerformanceMeasurementParams;
    totp?: string;
    webClientCapabilities?: BtWebClientCapabilitiesParams;
};

export type BtmAnnotation4664 = BtmNode19 & {
    btType?: 'BTMAnnotation-4664';
} & {
    annotationType?: GbtAnnotationType;
    parameters?: Array<BtmParameter1>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmArrayParameterItem1843 = BtmNode19 & {
    btType?: 'BTMArrayParameterItem-1843';
} & {
    parameters?: Array<BtmParameter1>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeature887 = BtmFeature134 & {
    btType?: 'BTMAssemblyFeature-887';
} & {
    auxiliaryTreeFeature?: boolean;
    btType?: string;
    featureFolder?: boolean;
    featureListFieldIndex?: number;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectors?: Array<BtmMateConnector66>;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parametricInstanceFeature?: boolean;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    version?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeature12218 = BtmAssemblyFeature887 & {
    btType?: 'BTMAssemblyFeature1-2218';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeature21022 = BtmAssemblyFeature887 & {
    btType?: 'BTMAssemblyFeature2-1022';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeatureFolder2543 = BtmAssemblyFeature887 & {
    btType?: 'BTMAssemblyFeatureFolder-2543';
} & {
    btType?: string;
    folderEnd?: boolean;
    folderStart?: boolean;
    startNodeId?: string;
    startNodeIdRaw?: BtObjectId;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyMirrorFeature3037 = {
    arrayParameterFromFeature?: BtmParameterArray2025;
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmAssemblyFeature887;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmAssemblyPatternFeature2241 = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    patternType?: GbtPatternType;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmAssemblyReplicateFeature1351 = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmConfigurationData1560 = BtmNode19 & {
    btType?: 'BTMConfigurationData-1560';
} & {
    btType?: string;
    configurationParameters?: Array<BtmConfigurationParameter819>;
    cosmeticParameterIds?: Array<string>;
    currentConfiguration?: Array<BtmParameter1>;
    currentFSValues?: {
        [key: string]: BtfsValue1888;
    };
    defaultConfigurationValues?: {
        [key: string]: BtfsValue1888;
    };
    syncAndPassthroughReferenceNodeId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameter819 = BtmNode19 & {
    btType?: 'BTMConfigurationParameter-819';
} & {
    btType?: string;
    enumOptionIds?: Array<string>;
    generatedParameterId?: BtTreeNode20;
    isCosmetic?: boolean;
    parameterId?: string;
    parameterName?: string;
    parameterType?: GbtConfigurationParameterType;
    valid?: boolean;
    visibilityCondition?: BtParameterVisibilityCondition177;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterBoolean2550 = BtmConfigurationParameter819 & {
    btType?: 'BTMConfigurationParameterBoolean-2550';
} & {
    btType?: string;
    defaultValue?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterEnum105 = BtmConfigurationParameter819 & {
    btType?: 'BTMConfigurationParameterEnum-105';
} & {
    btType?: string;
    defaultValue?: string;
    enumName?: string;
    enumOptionVisibilityConditions?: BtEnumOptionVisibilityConditionList2936;
    namespace?: string;
    optionIds?: Array<string>;
    optionNames?: Array<string>;
    options?: Array<BtmEnumOption592>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterList5548 = BtmNode19 & {
    btType?: 'BTMConfigurationParameterList-5548';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterQuantity1826 = BtmConfigurationParameter819 & {
    btType?: 'BTMConfigurationParameterQuantity-1826';
} & {
    btType?: string;
    quantityType?: GbtQuantityType;
    rangeAndDefault?: BtQuantityRange181;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterString872 = BtmConfigurationParameter819 & {
    btType?: 'BTMConfigurationParameterString-872';
} & {
    btType?: string;
    defaultValue?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfiguredValue1341 = BtmNode19 & {
    btType?: 'BTMConfiguredValue-1341';
} & {
    btType?: string;
    configurationValueString?: string;
    value?: BtmParameter1;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfiguredValueByBoolean1501 = BtmConfiguredValue1341 & {
    btType?: 'BTMConfiguredValueByBoolean-1501';
} & {
    booleanValue?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfiguredValueByEnum1923 = BtmConfiguredValue1341 & {
    btType?: 'BTMConfiguredValueByEnum-1923';
} & {
    btType?: string;
    enumName?: string;
    enumValue?: string;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmDatabaseParameter2229 = BtmParameter1 & {
    btType?: 'BTMDatabaseParameter-2229';
} & {
    btType?: string;
    databaseId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmDerivedAssemblyMirrorFeature5094 = {
    arrayParameterFromFeature?: BtmParameterArray2025;
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmAssemblyFeature887;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmEnumOption592 = BtmNode19 & {
    btType?: 'BTMEnumOption-592';
} & {
    btType?: string;
    option?: string;
    optionName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmFeature134 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    mateConnectorFeature?: boolean;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    parameterLibraries?: Array<BtmParameter1>;
    /**
     * A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
     */
    parameters?: Array<BtmParameter1>;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
};

export type BtmFeatureInvalid1031 = BtmFeature134 & {
    btType?: 'BTMFeatureInvalid-1031';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmFeatureQueryWithOccurrence157 = BtmIndividualQueryWithOccurrenceBase904 & {
    btType?: 'BTMFeatureQueryWithOccurrence-157';
} & {
    btType?: string;
    featureId?: string;
    featureIdWithOccurrence?: string;
    partStudioMateConnectorQuery?: boolean;
    queryData?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmFolder3208 = BtmNode19 & {
    btType?: 'BTMFolder-3208';
} & {
    btType?: string;
    folderId?: string;
    isStartFolder?: boolean;
    name?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmGenerativeDesignFeature3195 = BtmAssemblyFeature887 & {
    btType?: 'BTMGenerativeDesignFeature-3195';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmGeometryMate1260 = BtmAssemblyFeature887 & {
    btType?: 'BTMGeometryMate-1260';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmImport136 = BtmNode19 & {
    btType?: 'BTMImport-136';
} & {
    btType?: string;
    elementImport?: boolean;
    importedExternalDocumentId?: string;
    namespace?: string;
    path?: string;
    version?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmInContextQuery2254 = BtmIndividualQueryBase139 & {
    btType?: 'BTMInContextQuery-2254';
} & {
    btType?: string;
    path?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualCoEdgeQuery1332 = BtmIndividualQuery138 & {
    btType?: 'BTMIndividualCoEdgeQuery-1332';
} & {
    btType?: string;
    edgeQuery?: BtmIndividualQuery138;
    faceQuery?: BtmIndividualQuery138;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualCreatedByQuery137 = BtmIndividualQuery138 & {
    btType?: 'BTMIndividualCreatedByQuery-137';
} & {
    bodyType?: GbtBodyType;
    btType?: string;
    entityType?: GbtEntityType;
    featureId?: string;
    filterConstruction?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualOccurrenceQuery626 = BtmIndividualQueryWithOccurrenceBase904 & {
    btType?: 'BTMIndividualOccurrenceQuery-626';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualParametricQuery3477 = BtmIndividualQuery138 & {
    btType?: 'BTMIndividualParametricQuery-3477';
} & {
    btType?: string;
    escapedQueryVariableName?: string;
    queryVariableName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualQuery138 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    deterministicIdList?: BtmIndividualQueryBase139;
    deterministicIds?: Array<string>;
    generateSectionEntityQuery?: boolean;
    generatedSectionQueryId?: string;
    nodeId?: string;
    persistentQuery?: BtpStatement269;
    query?: BtmIndividualQueryBase139;
    queryStatement?: BtpStatement269;
    queryString?: string;
    variableName?: BtmIndividualQuery138;
};

export type BtmIndividualQueryBase139 = BtmNode19 & {
    btType?: 'BTMIndividualQueryBase-139';
} & {
    btType?: string;
    deterministicIdList?: BtmIndividualQueryBase139;
    deterministicIds?: Array<string>;
    generateSectionEntityQuery?: boolean;
    generatedSectionQueryId?: string;
    query?: BtmIndividualQueryBase139;
    queryString?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualQueryWithOccurrence811 = BtmIndividualQueryWithOccurrenceBase904 & {
    btType?: 'BTMIndividualQueryWithOccurrence-811';
} & {
    btType?: string;
    entityQuery?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualQueryWithOccurrenceBase904 = BtmIndividualQueryBase139 & {
    btType?: 'BTMIndividualQueryWithOccurrenceBase-904';
} & {
    btType?: string;
    fullPathAsString?: string;
    nodeIdFromCurrentQuery?: string;
    occurrence?: BtOccurrence74;
    path?: Array<string>;
    queryPath?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualSketchRegionQuery140 = BtmIndividualQuery138 & {
    btType?: 'BTMIndividualSketchRegionQuery-140';
} & {
    btType?: string;
    featureId?: string;
    filterInnerLoops?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualSketchUniqueVerticesQuery1472 = BtmIndividualQuery138 & {
    btType?: 'BTMIndividualSketchUniqueVerticesQuery-1472';
} & {
    btType?: string;
    featureId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmInferenceQueryWithOccurrence1083 = BtmIndividualQueryWithOccurrence811 & {
    btType?: 'BTMInferenceQueryWithOccurrence-1083';
} & {
    btType?: string;
    inferenceType?: GbtEntityInferenceType;
    secondDeterministicId?: string;
    secondEntityQuery?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmLoad3538 = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    definedByComponents?: boolean;
    directionFlipped?: boolean;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fgsBaseUnits?: string;
    fieldIndexForOwnedMateConnectors?: number;
    loadComponentParameterIds?: {
        [key: string]: string;
    };
    loadRegionParameterId?: string;
    loadType?: GbtLoadType;
    magnitudeParameterId?: string;
    magnitudeQuantityType?: GbtQuantityType;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    structuralLoad?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    suppressedInSimulations?: {
        [key: string]: number;
    };
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmMate64 = BtmAssemblyFeature887 & {
    btType?: 'BTMMate-64';
} & {
    btType?: string;
    mateConnectorQueryList?: BtmParameterQueryWithOccurrenceList67;
    mateType?: GbtMateType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMateConnector66 = BtmAssemblyFeature887 & {
    btType?: 'BTMMateConnector-66';
} & {
    btType?: string;
    implicit?: boolean;
    isAuxiliaryTreeMateConnector?: boolean;
    isHidden?: boolean;
    savedFeatureType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMateGroup65 = BtmAssemblyFeature887 & {
    btType?: 'BTMMateGroup-65';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMateRelation1412 = BtmAssemblyFeature887 & {
    btType?: 'BTMMateRelation-1412';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMeshPointQuery1183 = BtmIndividualQueryWithOccurrenceBase904 & {
    btType?: 'BTMMeshPointQuery-1183';
} & {
    btType?: string;
    origin?: BtVector3d389;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmModel141 = BtmNode19 & {
    btType?: 'BTMModel-141';
} & {
    allFeatures?: Array<BtmFeature134>;
    allFeaturesAndOtherReferences?: Array<BtmFeature134>;
    allFeaturesAndSubFeatures?: Array<BtmFeature134>;
    allFeaturesAndSubFeaturesAndOtherReferences?: Array<BtmFeature134>;
    btType?: string;
    childNodeIdToIndex?: {
        [key: string]: number;
    };
    configurableTreeNodes?: Array<BtConfigurableTreeNode>;
    configurationData?: BtmConfigurationData1560;
    configured?: boolean;
    deepImports?: {
        [key: string]: Array<BtImport>;
    };
    defaultFeatures?: BtDefaultFeatures119;
    defaultUnits?: BtmUnitsDefault160;
    featureImports?: {
        [key: string]: Array<BtImport>;
    };
    firstRollbackIndex?: number;
    importSet?: Array<BtpModuleId235>;
    imports?: Array<BtmImport136>;
    isVariableStudio?: boolean;
    lastFeatureBeforeRollBack?: BtmFeature134;
    modelAnnotations?: BtModelAnnotations3945;
    name?: string;
    partProperties?: BtPartProperties293;
    pathToCache?: BtCacheDataPath191;
    properties?: BtModelProperties1258;
    rollbackBar?: BtmRollback150;
    rolledBackToEnd?: boolean;
    variableStudios?: Array<BtmVariableStudioReference2764>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmNode19 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
};

export type BtmNodeInvalid1772 = BtmNode19 & {
    btType?: 'BTMNodeInvalid-1772';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmNonGeometricItem1864 = BtmAssemblyFeature887 & {
    btType?: 'BTMNonGeometricItem-1864';
} & {
    btType?: string;
    itemDefinitionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
 */
export type BtmParameter1 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    libraryRelationType?: GbtParameterLibraryRelationType;
    /**
     * ID of the parameter's node.
     */
    nodeId?: string;
    /**
     * Unique ID of the parameter.
     */
    parameterId?: string;
    parameterName?: string;
    valueString?: string;
};

export type BtmParameterAppearance627 = BtmParameter1 & {
    btType?: 'BTMParameterAppearance-627';
} & {
    appearance?: BtGraphicsAppearance1152;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterArray2025 = BtmParameter1 & {
    btType?: 'BTMParameterArray-2025';
} & {
    btType?: string;
    items?: Array<BtmArrayParameterItem1843>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterBlobReference1679 = BtmParameter1 & {
    btType?: 'BTMParameterBlobReference-1679';
} & {
    blobImport?: BtmImport136;
    btType?: string;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterBoolean144 = BtmParameter1 & {
    btType?: 'BTMParameterBoolean-144';
} & {
    btType?: string;
    value?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterButton5169 = BtmParameter1 & {
    btType?: 'BTMParameterButton-5169';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterConfigured2222 = BtmParameter1 & {
    btType?: 'BTMParameterConfigured-2222';
} & {
    btType?: string;
    configurationParameterId?: string;
    configurationParameterIdFieldIndex?: number;
    values?: Array<BtmConfiguredValue1341>;
    valuesFieldIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterDerived864 = BtmParameter1 & {
    btType?: 'BTMParameterDerived-864';
} & {
    btType?: string;
    imports?: Array<BtmImport136>;
    moduleId?: BtpModuleId235;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterEnum145 = BtmParameter1 & {
    btType?: 'BTMParameterEnum-145';
} & {
    btType?: string;
    enumName?: string;
    namespace?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterFeatureList1749 = BtmParameter1 & {
    btType?: 'BTMParameterFeatureList-1749';
} & {
    btType?: string;
    featureIds?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterForeignId146 = BtmParameter1 & {
    btType?: 'BTMParameterForeignId-146';
} & {
    btType?: string;
    foreignId?: string;
    foreignName?: string;
    locationInfo?: BtForeignDataResponse1070;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterIcon460 = BtmReadOnlyParameter3800 & {
    btType?: 'BTMParameterIcon-460';
} & {
    btType?: string;
    hasError?: boolean;
    hasWarning?: boolean;
    icon?: string;
    label?: string;
    link?: string;
    tooltip?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterInvalid1664 = BtmParameter1 & {
    btType?: 'BTMParameterInvalid-1664';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterLookupTablePath1419 = BtmParameter1 & {
    btType?: 'BTMParameterLookupTablePath-1419';
} & {
    btType?: string;
    value?: {
        [key: string]: string;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterMaterial1388 = BtmParameter1 & {
    btType?: 'BTMParameterMaterial-1388';
} & {
    btType?: string;
    material?: BtPartMaterial1445;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterMultiEnum3411 = BtmParameter1 & {
    btType?: 'BTMParameterMultiEnum-3411';
} & {
    btType?: string;
    enumName?: string;
    namespace?: string;
    values?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterNotice4455 = BtmReadOnlyParameter3800 & {
    btType?: 'BTMParameterNotice-4455';
} & {
    btType?: string;
    level?: GbtNoticeLevel;
    message?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterNullableQuantity807 = BtmParameterQuantity147 & {
    btType?: 'BTMParameterNullableQuantity-807';
} & {
    btType?: string;
    isNull?: boolean;
    nullValue?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterProgress3232 = BtmReadOnlyParameter3800 & {
    btType?: 'BTMParameterProgress-3232';
} & {
    btType?: string;
    percentDone?: number;
    status?: GbtComputeStatus;
    statusMessage?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterQuantity147 = BtmParameter1 & {
    btType?: 'BTMParameterQuantity-147';
} & {
    btType?: string;
    expression?: string;
    isInteger?: boolean;
    units?: string;
    value?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterQueryList148 = BtmParameter1 & {
    btType?: 'BTMParameterQueryList-148';
} & {
    btType?: string;
    filter?: BtQueryFilter183;
    queries?: Array<BtmIndividualQueryBase139>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterQueryWithOccurrenceList67 = BtmParameter1 & {
    btType?: 'BTMParameterQueryWithOccurrenceList-67';
} & {
    btType?: string;
    occurrences?: Array<BtOccurrence74>;
    queries?: Array<BtmIndividualQueryWithOccurrenceBase904>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReference2434 = BtmParameter1 & {
    btType?: 'BTMParameterReference-2434';
} & {
    btType?: string;
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryData?: BtElementLibraryReferenceData3133;
    featureScriptType?: string;
    ids?: Array<string>;
    microversionId?: string;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceAssembly938 = BtmParameterReferenceWithConfiguration3028 & {
    btType?: 'BTMParameterReferenceAssembly-938';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceBlob3281 = BtmParameterReference2434 & {
    btType?: 'BTMParameterReferenceBlob-3281';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceCadImport2016 = BtmParameterReferenceBlob3281 & {
    btType?: 'BTMParameterReferenceCADImport-2016';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceImage2014 = BtmParameterReferenceBlob3281 & {
    btType?: 'BTMParameterReferenceImage-2014';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceJson790 = BtmParameterReferenceBlob3281 & {
    btType?: 'BTMParameterReferenceJSON-790';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferencePartStudio3302 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuration?: Array<BtmParameter1>;
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryData?: BtElementLibraryReferenceData3133;
    featureScriptType?: string;
    ids?: Array<string>;
    libraryRelationType?: GbtParameterLibraryRelationType;
    microversionId?: string;
    namespace?: string;
    /**
     * ID of the parameter's node.
     */
    nodeId?: string;
    /**
     * Unique ID of the parameter.
     */
    parameterId?: string;
    parameterName?: string;
    partIdentity?: BtpsoIdentity2741;
    partQuery?: BtmParameterQueryList148;
    queryDataKey?: string;
    standardContentParametersId?: string;
    valueString?: string;
};

export type BtmParameterReferenceTable917 = BtmParameterReferenceBlob3281 & {
    btType?: 'BTMParameterReferenceTable-917';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceText2115 = BtmParameterReferenceBlob3281 & {
    btType?: 'BTMParameterReferenceText-2115';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceVariableStudio3550 = BtmParameterReferenceWithConfiguration3028 & {
    btType?: 'BTMParameterReferenceVariableStudio-3550';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceWithConfiguration3028 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuration?: Array<BtmParameter1>;
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryData?: BtElementLibraryReferenceData3133;
    featureScriptType?: string;
    ids?: Array<string>;
    libraryRelationType?: GbtParameterLibraryRelationType;
    microversionId?: string;
    namespace?: string;
    /**
     * ID of the parameter's node.
     */
    nodeId?: string;
    /**
     * Unique ID of the parameter.
     */
    parameterId?: string;
    parameterName?: string;
    valueString?: string;
};

export type BtmParameterString149 = BtmParameter1 & {
    btType?: 'BTMParameterString-149';
} & {
    btType?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterStringWithTolerances4286 = BtmReadOnlyParameter3800 & {
    btType?: 'BTMParameterStringWithTolerances-4286';
} & {
    btType?: string;
    components?: Array<BtToleranceString3274>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterTolerantQuantity2579 = BtmParameterQuantity147 & {
    btType?: 'BTMParameterTolerantQuantity-2579';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParametricPartStudioFeature3883 = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904>;
    parameterLibraries?: Array<BtmParameter1>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmPartStudioMateConnectorQuery1324 = BtmFeatureQueryWithOccurrence157 & {
    btType?: 'BTMPartStudioMateConnectorQuery-1324';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmReadOnlyParameter3800 = BtmParameter1 & {
    btType?: 'BTMReadOnlyParameter-3800';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmRecordMetrics1169 = BtmNode19 & {
    btType?: 'BTMRecordMetrics-1169';
} & {
    btType?: string;
    doBodyValidation?: boolean;
    previousFeatureId?: string;
    references?: Array<BtmIndividualQuery138>;
    useLatestBehavior?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmRollback150 = BtmNode19 & {
    btType?: 'BTMRollback-150';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketch151 = BtmFeature134 & {
    btType?: 'BTMSketch-151';
} & {
    btType?: string;
    constraints?: Array<BtmSketchConstraint2>;
    entities?: Array<BtmSketchGeomEntity5>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchCompositeEntity893 = BtmSketchEntity3 & {
    btType?: 'BTMSketchCompositeEntity-893';
} & {
    btType?: string;
    subEntities?: Array<BtmSketchEntity3>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchConstraint2 = BtmSketchEntity3 & {
    btType?: 'BTMSketchConstraint-2';
} & {
    btType?: string;
    constraintType?: GbtConstraintType;
    drivenDimension?: boolean;
    hasOffsetData1?: boolean;
    hasOffsetData2?: boolean;
    hasPierceParameter?: boolean;
    helpParameters?: Array<number>;
    offsetDistance1?: number;
    offsetDistance2?: number;
    offsetOrientation1?: boolean;
    offsetOrientation2?: boolean;
    pierceParameter?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchCurve4 = BtmSketchGeomEntity5 & {
    btType?: 'BTMSketchCurve-4';
} & {
    btType?: string;
    centerId?: string;
    internalIds?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchCurveSegment155 = BtmSketchCurve4 & {
    btType?: 'BTMSketchCurveSegment-155';
} & {
    btType?: string;
    endParam?: number;
    endPointId?: string;
    offsetCurveExtensions?: Array<number>;
    startParam?: number;
    startPointId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchEntity3 = BtmNode19 & {
    btType?: 'BTMSketchEntity-3';
} & {
    btType?: string;
    combinedSketchEntityType?: CombinedSketchEntityType;
    entityId?: string;
    index?: number;
    name?: string;
    namespace?: string;
    parameters?: Array<BtmParameter1>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchGeomEntity5 = BtmSketchEntity3 & {
    btType?: 'BTMSketchGeomEntity-5';
} & {
    btType?: string;
    controlBoxIds?: Array<string>;
    entityType?: GbtSketchEntityType;
    functionName?: string;
    isConstruction?: boolean;
    isFromEndpointSplineHandle?: boolean;
    isFromSplineControlPolygon?: boolean;
    isFromSplineHandle?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchImageEntity763 = BtmSketchGeomEntity5 & {
    btType?: 'BTMSketchImageEntity-763';
} & {
    aspectRatio?: number;
    btType?: string;
    originX?: number;
    originY?: number;
    xaxisX?: number;
    xaxisY?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchInvalid1601 = BtmSketchEntity3 & {
    btType?: 'BTMSketchInvalid-1601';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchPoint158 = BtmSketchGeomEntity5 & {
    btType?: 'BTMSketchPoint-158';
} & {
    btType?: string;
    isUserPoint?: boolean;
    x?: number;
    y?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchTextEntity1761 = BtmSketchGeomEntity5 & {
    btType?: 'BTMSketchTextEntity-1761';
} & {
    ascent?: number;
    baselineDirectionX?: number;
    baselineDirectionY?: number;
    baselineStartX?: number;
    baselineStartY?: number;
    btType?: string;
    fontName?: string;
    text?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSuppressionState1924 = BtmNode19 & {
    btType?: 'BTMSuppressionState-1924';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSuppressionStateConfigured2598 = BtmSuppressionState1924 & {
    btType?: 'BTMSuppressionStateConfigured-2598';
} & {
    btType?: string;
    configurationParameterId?: string;
    configurationParameterIdFieldIndex?: number;
    values?: Array<BtmConfiguredValue1341>;
    valuesFieldIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSuppressionStateExpression1811 = BtmSuppressionState1924 & {
    btType?: 'BTMSuppressionStateExpression-1811';
} & {
    btType?: string;
    value?: BtmParameterQuantity147;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmUnitsDefault160 = BtmNode19 & {
    btType?: 'BTMUnitsDefault-160';
} & {
    btType?: string;
    units?: {
        [key: string]: string;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmUserCode161 = BtmNode19 & {
    btType?: 'BTMUserCode-161';
} & {
    btType?: string;
    parsed?: BtpStatement269;
    statement?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmVariableStudioReference2764 = BtmFeature134 & {
    btType?: 'BTMVariableStudioReference-2764';
} & {
    apiConfiguration?: BtApiConfiguration;
    btType?: string;
    configuration?: Array<BtmParameter1>;
    documentId?: string;
    elementId?: string;
    entireVariableStudio?: boolean;
    isAutomatic?: boolean;
    microversionId?: BtMicroversionId366;
    partialReference?: boolean;
    referenceId?: string;
    referenceNamespace?: string;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028;
    referencingAnything?: boolean;
    unsetAutomaticEdit?: BtTreeEdit13;
    validRevisionReference?: boolean;
    variableNames?: Array<string>;
    versionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmWidthMate1011 = BtmAssemblyFeature887 & {
    btType?: 'BTMWidthMate-1011';
} & {
    btType?: string;
    mateConnectorsNotUsedInQuery?: Array<BtmMateConnector66>;
    tabMateConnectorQueryList?: BtmParameterQueryWithOccurrenceList67;
    widthMateConnectorQueryList?: BtmParameterQueryWithOccurrenceList67;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMassPropertiesBulkInfo = {
    bodies?: {
        [key: string]: BtMassPropertiesInfo;
    };
    microversionId?: string;
};

/**
 * Mass properties information.
 */
export type BtMassPropertiesInfo = {
    /**
     * Centroid, center of gravity, center of mass
     */
    centroid?: Array<number>;
    /**
     * `true` if the part has mass.
     */
    hasMass?: boolean;
    /**
     * Mass moments of inertia
     */
    inertia?: Array<number>;
    /**
     * Mass
     */
    mass?: Array<number>;
    /**
     * Number of parts without mass.
     */
    massMissingCount?: number;
    /**
     * Surface area
     */
    periphery?: Array<number>;
    /**
     * Vector coordinates of the principal axes. Use `BTVector3d-389` as the `btType`.
     */
    principalAxes?: Array<BtVector3d389>;
    /**
     * Principal moments of inertia
     */
    principalInertia?: Array<number>;
    /**
     * Volume
     */
    volume?: Array<number>;
};

export type BtMateConnectorCsInfo = {
    getxAxis?: Array<number>;
    getyAxis?: Array<number>;
    getzAxis?: Array<number>;
    origin?: Array<number>;
};

export type BtMateConnectorDisplayData94 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementId?: string;
    entityIds?: Array<string>;
    hidden?: boolean;
    implicit?: boolean;
    isDerivedFeature?: boolean;
    location?: BtCoordinateSystem387;
    nodeId?: string;
    occurrence?: BtOccurrence74;
    ownerOccurrence?: BtOccurrence74;
    partId?: string;
};

export type BtMateConnectorEntity28 = BtFeatureEntity34 & {
    btType?: 'BTMateConnectorEntity-28';
} & {
    btType?: string;
    coordinateSystem?: BtCoordinateSystem387;
    partId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMateConnectorFilter163 = BtQueryFilter183 & {
    btType?: 'BTMateConnectorFilter-163';
} & {
    allowImplicitMateConnector?: boolean;
    btType?: string;
    isMateConnectorInferenceEnabledByDefault?: boolean;
    requiresOccurrence?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMateDisplayData1358 = BtAssemblyFeatureDisplayData1783 & {
    btType?: 'BTMateDisplayData-1358';
} & {
    btType?: string;
    mateConnectorIds?: Array<string>;
    mateType?: GbtMateType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMateFilter162 = BtQueryFilter183 & {
    btType?: 'BTMateFilter-162';
} & {
    btType?: string;
    requireMateQueryData?: boolean;
    topLevelMateOnly?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMateGroupDisplayData1990 = BtAssemblyFeatureDisplayData1783 & {
    btType?: 'BTMateGroupDisplayData-1990';
} & {
    btType?: string;
    occurrenceIds?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMateOccurrenceData1671 = BtFeatureOccurrenceData775 & {
    btType?: 'BTMateOccurrenceData-1671';
} & {
    btType?: string;
    valueMap?: {
        [key: string]: number;
    };
    values?: Array<number>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMaterialLibraryMetadataInfo = {
    documentId?: string;
    documentName?: string;
    elementId?: string;
    isPublic?: boolean;
    libraryName?: string;
    ownerName?: string;
    versionId?: string;
    workspaceId?: string;
};

export type BtMaterialLibrarySettingsInfo = {
    companyLibraries?: Array<BtMaterialLibraryMetadataInfo>;
    libraries?: Array<BtMaterialLibraryMetadataInfo>;
};

export type BtMatrix3X3340 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    m00?: number;
    m01?: number;
    m02?: number;
    m10?: number;
    m11?: number;
    m12?: number;
    m20?: number;
    m21?: number;
    m22?: number;
};

export type BtMergePreviewInfo = {
    branchPointMicroversionId?: string;
    branchPointVersionId?: string;
    branchPointWorkspaceId?: string;
    changes?: Array<BtElementMergeInfo>;
    isBranchPointAtStart?: boolean;
    sourceMicroversionId?: string;
    targetMicroversionId?: string;
    upgradeInfo?: BtMergeUpgradeInfo;
};

export type BtMergeStrategy = 'MERGE' | 'KEEP' | 'REPLACE';

export type BtMergeUpgradeInfo = {
    pendingSourceUpgrade?: BtPendingUpgradeInfo;
    pendingTargetUpgrade?: BtPendingUpgradeInfo;
    recommendedVersion?: number;
    type?: BtMergeUpgradeType;
};

export type BtMergeUpgradeType = 'SOURCE' | 'TARGET' | 'SOURCE_AND_TARGET';

export type BtMetadataCategorySummaryInfo = {
    defaultObjectType?: number;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    objectTypes?: Array<number>;
    ownerId?: string;
    ownerType?: number;
    publishState?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtMetadataElementInfo = BtMetadataObjectInfo & {
    jsonType: 'BTMetadataElementInfo';
} & {
    elementId?: string;
    elementType?: number;
    mimeType?: string;
    parts?: BtMetadataObjectListInfoBtMetadataPartInfo;
};

export type BtMetadataEnumValue = {
    label?: string;
    state?: number;
    value?: string;
};

export type BtMetadataEnumValueInfo = {
    label?: string;
    state?: number;
    value?: string;
};

export type BtMetadataObjectInfo = {
    href?: string;
    jsonType: string;
    /**
     * Properties associated with this metadata object
     */
    properties?: Array<BtMetadataPropertyInfo>;
    thumbnail?: BtThumbnailInfo;
};

export type BtMetadataObjectListInfoBtMetadataElementInfo = {
    href?: string;
    items?: Array<BtMetadataElementInfo>;
    next?: string;
    prev?: string;
};

export type BtMetadataObjectListInfoBtMetadataPartInfo = {
    href?: string;
    items?: Array<BtMetadataPartInfo>;
    next?: string;
    prev?: string;
};

export type BtMetadataObjectType = 'GLOBAL' | 'DOCUMENT' | 'PART' | 'ASSEMBLY' | 'DRAWING' | 'PART_STUDIO' | 'BLOB_ELEMENT' | 'APP_ELEMENT' | 'VERSION' | 'WORKSPACE' | 'PROJECT' | 'ITEM' | 'FEATURE_STUDIO' | 'CHANGE_REQUEST' | 'TASK' | 'CHANGE_ORDER' | 'CHANGE_TASK' | 'VARIABLE_STUDIO' | 'DRAWING_ANNOTATIONS' | 'FOLDER';

export type BtMetadataPartInfo = BtMetadataObjectInfo & {
    jsonType: 'BTMetadataPartInfo';
} & {
    isFlattenedBody?: boolean;
    meshState?: number;
    partId?: string;
    partIdentity?: string;
    partType?: string;
};

export type BtMetadataPropertyInfo = {
    aggregationSkippedFilteredOutValues?: boolean;
    computedAssemblyProperty?: boolean;
    computedProperty?: boolean;
    computedPropertyError?: string;
    computedPropertyEvalInfo?: string;
    dateFormat?: string;
    defaultValue?: {
        [key: string]: unknown;
    };
    dirty?: boolean;
    editable?: boolean;
    editableInUi?: boolean;
    enumValues?: Array<BtMetadataEnumValueInfo>;
    initialValue?: {
        [key: string]: unknown;
    };
    multivalued?: boolean;
    name?: string;
    propertyId?: string;
    /**
     * 0: Unknown | 1: Not computed | 2: Computed without override | 3: Computed with override | 4: Computed with subassembly overrides | 5: Overridden
     */
    propertyOverrideStatus?: number;
    propertySource?: number;
    required?: boolean;
    schemaId?: string;
    uiHints?: BtMetadataPropertyUiHintsInfo;
    validator?: BtMetadataPropertyValidatorInfo;
    value?: {
        [key: string]: unknown;
    };
    valueType?: string;
};

export type BtMetadataPropertyUiHintsInfo = {
    multiline?: boolean;
};

export type BtMetadataPropertyUpdateParams = {
    /**
     * The id of the property that should be edited. This can be retrieved from MetadataCategory:getCategoryProperties.
     */
    propertyId?: string;
    /**
     * The new value for the property.
     */
    value?: {
        [key: string]: unknown;
    };
};

export type BtMetadataPropertyValidatorInfo = {
    max?: number;
    maxCount?: number;
    maxDate?: string;
    maxLength?: number;
    min?: number;
    minCount?: number;
    minDate?: string;
    minLength?: number;
    pattern?: string;
    quantityType?: number;
};

/**
 * The current state metadata values if applicable.
 */
export type BtMetadataStateType = 'IN_PROGRESS' | 'PENDING' | 'RELEASED' | 'OBSOLETE' | 'REJECTED' | 'DISCARDED';

export type BtMetadataValueType = 'STRING' | 'BOOL' | 'INT' | 'DOUBLE' | 'DATE' | 'ENUM' | 'OBJECT' | 'BLOB' | 'USER' | 'LIST' | 'FOREIGN' | 'CATEGORY' | 'COMPUTED' | 'VALUE_WITH_UNITS';

export type BtMicroversionId366 = {
    ambiguous?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    deleted?: boolean;
    theId?: string;
};

export type BtMicroversionIdAndConfiguration2338 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    cacheKey?: string;
    configurationParameterIdToValue?: {
        [key: string]: BtfsValue1888;
    };
    deleted?: boolean;
    description?: string;
    microversion?: BtMicroversionId366;
};

export type BtMicroversionIdAndConfigurationInterval2364 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    from?: BtMicroversionIdAndConfiguration2338;
    microversionIdInterval?: BtMicroversionIdInterval367;
    to?: BtMicroversionIdAndConfiguration2338;
};

export type BtMicroversionIdInterval367 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    from?: BtMicroversionId366;
    to?: BtMicroversionId366;
    trivial?: boolean;
};

export type BtMicroversionInfo = {
    microversion?: string;
};

export type BtMirrorTableRowMetaData5463 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTMirrorTableRowMetaData-5463';
} & {
    btType?: string;
    crossHighlightData?: BtTableAssemblyCrossHighlightData2675;
    occurrences?: Array<BtOccurrence74>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtModelAnnotations3945 = BtmNode19 & {
    btType?: 'BTModelAnnotations-3945';
} & {
    annotations?: Array<BtmAnnotation4664>;
    btType?: string;
    toleranceSchemaForParts?: BtmParameterArray2025;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtModelElementParams = {
    name?: string;
};

export type BtModelFormatFullInfo = {
    /**
     * Content-Type for this file format.
     */
    contentType?: string;
    /**
     * Indicates if this format could be an assembly.
     */
    couldBeAssembly?: boolean;
    /**
     * Supported file extensions for this format.
     */
    fileExtensions?: Array<string>;
    /**
     * Name of the format.
     */
    name?: string;
    /**
     * The name of the translator for the format.
     */
    translatorName?: string;
    /**
     * Indicates if this format is a valid destination format for translation.
     */
    validDestinationFormat?: boolean;
    /**
     * Indicates if this format is a valid source format for translation.
     */
    validSourceFormat?: boolean;
};

export type BtModelFormatInfo = {
    /**
     * Indicates if this format could be an assembly.
     */
    couldBeAssembly?: boolean;
    /**
     * Name of the format.
     */
    name?: string;
    /**
     * The name of the translator for the format.
     */
    translatorName?: string;
};

export type BtModelProperties1258 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
    subPartProperties?: Array<BtOnePartProperties230>;
};

export type BtModifiableEntityOnlyFilter1593 = BtQueryFilter183 & {
    btType?: 'BTModifiableEntityOnlyFilter-1593';
} & {
    btType?: string;
    modifiableOnly?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtMoveElementInfo = {
    elementOriginalToNewMap?: {
        [key: string]: string;
    };
    errorMessage?: string;
    isNewDocument?: boolean;
    newDocumentId?: string;
    newDocumentName?: string;
    newDocumentVersionId?: string;
    newWorkspaceId?: string;
};

export type BtMoveElementParams = {
    anchorElementId?: string;
    description?: string;
    elementOriginalToNewMap?: {
        [key: string]: string;
    };
    elements?: Array<string>;
    generateUnknownMessages?: boolean;
    importData?: Array<string>;
    isCopy?: boolean;
    isDeepCopy?: boolean;
    isGroupAnchor?: boolean;
    isNewDocument?: boolean;
    isPublic?: boolean;
    isSelectivePartOut?: boolean;
    name?: string;
    needNewVersion?: boolean;
    ownerEmail?: string;
    ownerId?: string;
    ownerType?: number;
    parentId?: string;
    projectId?: string;
    selectedGroupIds?: Array<string>;
    sourceDocumentId?: string;
    sourceVersionId?: string;
    sourceWorkspaceId?: string;
    tags?: Array<string>;
    targetDocumentId?: string;
    targetWorkspaceId?: string;
    versionName?: string;
};

export type BtNameValuePair = {
    name?: string;
    value?: string;
};

export type BtNamedPositionValuesColumnInfo816 = BtTableColumnInfo1222 & {
    btType?: 'BTNamedPositionValuesColumnInfo-816';
} & {
    btType?: string;
    columnHasError?: boolean;
    parameterId?: string;
    parentId?: string;
    parentName?: string;
    tooltip?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtNamedViewInfo = {
    angle?: number;
    cameraViewport?: Array<number>;
    perspective?: boolean;
    sectionPlanes?: Array<BtSectionPlaneInfo>;
    sectionViewData?: BtGraphicsSectionViewStateData4379;
    viewMatrix?: Array<number>;
};

export type BtNamedViewsInfo = {
    namedViews?: {
        [key: string]: BtNamedViewInfo;
    };
};

export type BtNextPartNumber = {
    categories?: Array<Category>;
    configuration?: string;
    documentId?: string;
    elementId?: string;
    elementType?: number;
    errorMessage?: string;
    id?: string;
    mimeType?: string;
    partId?: string;
    partNumber?: string;
    prefix?: string;
    resourceType?: number;
    versionId?: string;
    workspaceId?: string;
};

/**
 * Parameters for creating a part number.
 */
export type BtNextPartNumberParam = {
    categories?: Array<BtCategoryParam>;
    /**
     * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
     */
    configuration?: string;
    /**
     * Document ID
     */
    documentId?: string;
    /**
     * Element (tab) ID
     */
    elementId?: string;
    /**
     * Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
     */
    elementType?: number;
    id?: string;
    mimeType?: string;
    /**
     * Must be one of: `8c96700620f77935a0b2cddc`: Part Studio, assembly, or drawing, `29cd738cc6a8819fe84864e0`: Non-geometric items, `10f29fc285510ebc648108e6`: Standard content
     */
    numberSchemeResourceTypeId?: string;
    /**
     * Part ID
     */
    partId?: string;
    /**
     * Current part number
     */
    partNumber?: string;
    /**
     * Version ID
     */
    versionId?: string;
    /**
     * Workspace ID
     */
    workspaceId?: string;
};

export type BtNextPartNumbersParam = {
    itemPartNumbers?: Array<BtNextPartNumberParam>;
    /**
     * Comma-separated list of part numbers to skip creating new part numbers for.
     */
    skipPartNumbers?: Array<string>;
};

export type BtNodeReference21 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
    nodeIdRaw?: BtObjectId;
};

export type BtNodeWithReference = {
    configuration?: Array<BtmParameter1>;
    documentId?: string;
    elementId?: string;
    microversionId?: BtMicroversionId366;
    nodeId?: string;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028;
    validRevisionReference?: boolean;
    versionId?: string;
};

export type BtNonAlignedBoundingBox4180 = BtBoundingBox1052 & {
    btType?: 'BTNonAlignedBoundingBox-4180';
} & {
    btType?: string;
    coordinateSystem?: BtCoordinateSystem387;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtNotFilter165 = BtQueryFilter183 & {
    btType?: 'BTNotFilter-165';
} & {
    btType?: string;
    operand?: BtQueryFilter183;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtNotice227 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    expressionErrorInfo?: BtParameterExpressionErrorInfo2037;
    level?: GbtNoticeLevel;
    locationInfos?: Array<BtLocationInfo226>;
    message?: string;
    nodeId?: string;
    parameterId?: string;
    stackTrace?: Array<BtLocationInfo226>;
    tryNode?: BtNodeReference21;
    type?: GbtNoticeType;
};

export type BtNullableQuantityRange1340 = BtQuantityRange181 & {
    btType?: 'BTNullableQuantityRange-1340';
} & {
    btType?: string;
    hasDefaultValue?: boolean;
    hasMaxValue?: boolean;
    hasMinValue?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtObjectId = {
    empty?: boolean;
};

export type BtObjectState = 'DELETED' | 'TRASH' | 'ACTIVE' | 'INACTIVE';

/**
 * An workflowable object like Release or Task that supports states and transitions.
 */
export type BtObjectWorkflowInfo = {
    /**
     * Whether workflowable object can be discarded.
     */
    canBeDiscarded?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Whether workflowable object has been discarded.
     */
    isDiscarded?: boolean;
    /**
     * Whether workflowable object has reached terminal state and is frozen.
     */
    isFrozen?: boolean;
    metadataState?: BtMetadataStateType;
    /**
     * Name of the resource.
     */
    name?: string;
    objectType?: BtapiWorkflowableType;
    /**
     * The current state of object like SETUP, REJECTED etc. Custom workflows can have any declared state.
     */
    stateId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    /**
     * The workflow definition id that governs this object's states and transitions.
     */
    workflowId?: string;
};

export type BtOccurrence74 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    fullPathAsString?: string;
    headInstanceId?: string;
    internalOccurrence?: boolean;
    occurrenceWithoutHead?: BtOccurrence74;
    occurrenceWithoutTail?: BtOccurrence74;
    parent?: BtOccurrence74;
    path?: Array<string>;
    rootOccurrence?: boolean;
    tailInstanceId?: string;
};

export type BtOccurrenceData75 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureData?: {
        [key: string]: BtFeatureOccurrenceData775;
    };
    forceHighestQualityTessellation?: boolean;
    hidden?: boolean;
    isFixed?: boolean;
    isHidden?: boolean;
    lockInfo?: BtLockedSubAssembly4590;
    nodeId?: string;
    occurrence?: BtOccurrence74;
    transform?: BtbsMatrix386;
};

export type BtOccurrenceDisplayData95 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementId?: string;
    forceHighestQualityTessellation?: boolean;
    fullElementId?: BtFullElementId756;
    isHidden?: boolean;
    isPatternDescendant?: boolean;
    occurrenceData?: BtOccurrenceData75;
    partIds?: Array<string>;
    sketchFeatureId?: string;
};

export type BtOccurrenceFilter166 = BtQueryFilter183 & {
    btType?: 'BTOccurrenceFilter-166';
} & {
    btType?: string;
    excludeFlattenedParts?: boolean;
    excludeMirroredOrDeriveMirroredInstance?: boolean;
    excludeParametricPartStudioChildInstance?: boolean;
    excludeParametricPartStudioInstance?: boolean;
    excludePatternInstances?: boolean;
    excludeReplicatedInstances?: boolean;
    excludeSketch?: boolean;
    excludeStandardContent?: boolean;
    excludeStudioInserts?: boolean;
    excludeSubAssemblies?: boolean;
    excludeSuppressed?: boolean;
    includeAssemblyRoot?: boolean;
    includeParametricInstance?: boolean;
    includePatternOccurrence?: boolean;
    solidOrCompositeBodyOnly?: boolean;
    topLevelOnly?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtOccurrenceWithFullPartIds1464 = BtOccurrence74 & {
    btType?: 'BTOccurrenceWithFullPartIds-1464';
} & {
    btType?: string;
    fullElementId?: BtFullElementIdWithDocument1729;
    partIds?: Array<string>;
    transform?: BtbsMatrix386;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtOldPermission = 'NOACCESS' | 'ANONYMOUS_ACCESS' | 'READ' | 'READ_COPY_EXPORT' | 'COMMENT' | 'WRITE' | 'RESHARE' | 'FULL' | 'OWNER';

export type BtOneConfigurationPartProperties1661 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuration?: {
        [key: string]: BtfsValue1888;
    };
    merged?: BtOnePartProperties230;
    nodeId?: string;
    properties?: Array<BtOnePartProperties230>;
    propertyIds?: Array<string>;
};

export type BtOnePartProperties230 = {
    appearance?: BtGraphicsAppearance1152;
    appearanceForNewCell?: BtGraphicsAppearance1152;
    /**
     * Type of JSON object.
     */
    btType?: string;
    changedPropertiesSet?: Array<string>;
    customProperties?: BtPartCustomProperties1338;
    material?: BtPartMaterial1445;
    materialForNewCell?: BtPartMaterial1445;
    name?: string;
    nameForNewCell?: string;
    nameIfNotNull?: BtOnePartProperties230;
    nodeId?: string;
    parsedQuery?: BtpFunctionDeclaration246;
    query?: string;
    queryListParameter?: BtmParameterQueryList148;
    sheetMetalBendOrder?: Array<string>;
    sheetMetalBendOrderIfNotNull?: BtOnePartProperties230;
    visibility?: GbtPartVisibility;
};

/**
 * Optional map of configuration parameter id to value
 */
export type BtOptionallyConfiguredValue = {
    configuredValue?: BtConfiguredValue;
    /**
     * The string value, if not configured
     */
    value?: string;
};

export type BtOrFilter167 = BtQueryFilter183 & {
    btType?: 'BTOrFilter-167';
} & {
    btType?: string;
    operand1?: BtQueryFilter183;
    operand2?: BtQueryFilter183;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtOriginDisplayData934 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    hidden?: boolean;
};

export type BtOriginEntity935 = BtFeatureEntity34 & {
    btType?: 'BTOriginEntity-935';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtOtherDocumentSelectorParametersInfo = BtDocumentSelectorParametersInfo & {
    jsonType: 'other-documents';
} & {
    folderStatePath?: Array<BtFolderStateInfo>;
    selectedDocumentId?: string;
    selectedVersionId?: string;
};

export type BtOwnerInfo = {
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    image?: string;
    isEnterpriseOwnedResource?: boolean;
    /**
     * Name of the resource.
     */
    name?: string;
    type?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtpAnnotation231 = {
    atomic?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    documentationType?: GbtpDefinitionType;
    endSourceLocation?: number;
    nodeId?: string;
    shortDescriptor?: string;
    spaceAfter?: BtpSpace10;
    spaceBefore?: BtpSpace10;
    spaceDefault?: boolean;
    startSourceLocation?: number;
    value?: BtpLiteralMap256;
};

export type BtpArgumentDeclaration232 = BtpNode7 & {
    btType?: 'BTPArgumentDeclaration-232';
} & {
    btType?: string;
    identifier?: BtpIdentifier8;
    name?: BtpIdentifier8;
    standardType?: GbtpType;
    type?: BtpTypeName290;
    typeName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpBuiltinIdentifier233 = BtpNode7 & {
    btType?: 'BTPBuiltinIdentifier-233';
} & {
    btType?: string;
    identifier?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpConversionFunction1362 = BtpProcedureDeclarationBase266 & {
    btType?: 'BTPConversionFunction-1362';
} & {
    btType?: string;
    from?: BtpLiteralNumber258;
    spaceAfterType?: BtpSpace10;
    to?: BtpLiteralNumber258;
    typeName?: BtpIdentifier8;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpression9 = BtpPropertyAccessor23 & {
    btType?: 'BTPExpression-9';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionAccess237 = BtpExpression9 & {
    btType?: 'BTPExpressionAccess-237';
} & {
    accessor?: BtpPropertyAccessor23;
    base?: BtpExpression9;
    btType?: string;
    isSafeNavigation?: boolean;
    spaceInAccessor?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionAs238 = BtpExpression9 & {
    btType?: 'BTPExpressionAs-238';
} & {
    btType?: string;
    operand?: BtpExpression9;
    typeName?: BtpTypeName290;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionBuiltinCall239 = BtpExpression9 & {
    btType?: 'BTPExpressionBuiltinCall-239';
} & {
    arguments?: Array<BtpExpression9>;
    btType?: string;
    name?: BtpBuiltinIdentifier233;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionCall240 = BtpExpression9 & {
    btType?: 'BTPExpressionCall-240';
} & {
    btType?: string;
    functionExpression?: BtpExpression9;
    functionName?: BtpName261;
    functionNameString?: string;
    isArrowCall?: boolean;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionFunction1325 = BtpExpression9 & {
    btType?: 'BTPExpressionFunction-1325';
} & {
    arguments?: Array<BtpArgumentDeclaration232>;
    body?: BtpStatementBlock271;
    btType?: string;
    expression?: BtpExpression9;
    isLambda?: boolean;
    isLambdaWithNoParens?: boolean;
    precondition?: BtpStatement269;
    returnType?: BtpTypeName290;
    spaceAfterArglist?: BtpSpace10;
    spaceAfterFunction?: BtpSpace10;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionGroup241 = BtpExpression9 & {
    btType?: 'BTPExpressionGroup-241';
} & {
    btType?: string;
    content?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionIs242 = BtpExpression9 & {
    btType?: 'BTPExpressionIs-242';
} & {
    btType?: string;
    operand?: BtpExpression9;
    typeName?: BtpTypeName290;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionNew243 = BtpExpression9 & {
    btType?: 'BTPExpressionNew-243';
} & {
    btType?: string;
    spaceAfterBox?: BtpSpace10;
    spaceBetweenNewBox?: BtpSpace10;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionOperator244 = BtpExpression9 & {
    btType?: 'BTPExpressionOperator-244';
} & {
    btType?: string;
    forExport?: boolean;
    globalNamespace?: boolean;
    namespace?: Array<BtpIdentifier8>;
    operand1?: BtpExpression9;
    operand2?: BtpExpression9;
    operand3?: BtpExpression9;
    operator?: GbtpOperator;
    spaceAfterNamespace?: BtpSpace10;
    spaceAfterOperator?: BtpSpace10;
    spaceBeforeOperator?: BtpSpace10;
    writtenAsFunctionCall?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionSwitch2632 = BtpExpression9 & {
    btType?: 'BTPExpressionSwitch-2632';
} & {
    btType?: string;
    choices?: BtpLiteralMap256;
    selector?: BtpExpression9;
    spaceAfterSwitch?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionTry1271 = BtpExpression9 & {
    btType?: 'BTPExpressionTry-1271';
} & {
    btType?: string;
    expression?: BtpExpression9;
    silent?: boolean;
    spaceAfterSilent?: BtpSpace10;
    spaceAfterTry?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionVarReference245 = BtpExpression9 & {
    btType?: 'BTPExpressionVarReference-245';
} & {
    btType?: string;
    name?: BtpName261;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpFunctionDeclaration246 = {
    annotation?: BtpAnnotation231;
    arguments?: Array<BtpArgumentDeclaration232>;
    argumentsToDocument?: Array<BtpArgumentDeclaration232>;
    atomic?: boolean;
    body?: BtpStatementBlock271;
    /**
     * Type of JSON object.
     */
    btType?: string;
    deprecated?: boolean;
    deprecatedExplanation?: string;
    documentationType?: GbtpDefinitionType;
    endSourceLocation?: number;
    forExport?: boolean;
    name?: BtpIdentifier8;
    nodeId?: string;
    precondition?: BtpStatement269;
    returnType?: BtpTypeName290;
    shortDescriptor?: string;
    spaceAfter?: BtpSpace10;
    spaceAfterArglist?: BtpSpace10;
    spaceAfterExport?: BtpSpace10;
    spaceBefore?: BtpSpace10;
    spaceDefault?: boolean;
    spaceInEmptyList?: BtpSpace10;
    startSourceLocation?: number;
    symbolName?: BtpIdentifier8;
};

export type BtpFunctionOrPredicateDeclaration247 = BtpProcedureDeclarationBase266 & {
    btType?: 'BTPFunctionOrPredicateDeclaration-247';
} & {
    btType?: string;
    name?: BtpIdentifier8;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpIdentifier8 = BtpPropertyAccessor23 & {
    btType?: 'BTPIdentifier-8';
} & {
    btType?: string;
    identifier?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * Webhook notification payload for all PLM related notifications.
 */
export type BtplmMessageBody = {
    appElementSessionId?: string;
    data?: string;
    /**
     * Background PLM job's document ID.
     */
    documentId?: string;
    event?: string;
    /**
     * ID of the background PLM job that was created.
     */
    jobId?: string;
    jobType?: JobType;
    messageId?: string;
    /**
     * Whether PLM integration was disabled.
     */
    settingsDisabled?: boolean;
    /**
     * Whether PLM integration settings parameters were modified.
     */
    settingsModified?: boolean;
    timestamp?: string;
    webhookId?: string;
};

export type BtplValue249 = BtpNode7 & {
    btType?: 'BTPLValue-249';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtplValueAccess250 = BtplValue249 & {
    btType?: 'BTPLValueAccess-250';
} & {
    accessor?: BtpPropertyAccessor23;
    base?: BtplValue249;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtplValueBoxDereference251 = BtplValue249 & {
    btType?: 'BTPLValueBoxDereference-251';
} & {
    box?: BtpExpression9;
    btType?: string;
    spaceInside?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtplValueVarReference252 = BtplValue249 & {
    btType?: 'BTPLValueVarReference-252';
} & {
    btType?: string;
    name?: BtpIdentifier8;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpLiteral253 = BtpExpression9 & {
    btType?: 'BTPLiteral-253';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpLiteralArray254 = BtpLiteral253 & {
    btType?: 'BTPLiteralArray-254';
} & {
    btType?: string;
    spaceInEmptyList?: BtpSpace10;
    trailingComma?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpLiteralBoolean255 = BtpLiteral253 & {
    btType?: 'BTPLiteralBoolean-255';
} & {
    btType?: string;
    value?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpLiteralMap256 = {
    atomic?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    documentationType?: GbtpDefinitionType;
    endSourceLocation?: number;
    entries?: Array<BtpLiteralMapEntry257>;
    nodeId?: string;
    shortDescriptor?: string;
    spaceAfter?: BtpSpace10;
    spaceBefore?: BtpSpace10;
    spaceDefault?: boolean;
    spaceInEmptyList?: BtpSpace10;
    startSourceLocation?: number;
    trailingComma?: boolean;
};

export type BtpLiteralMapEntry257 = BtpNode7 & {
    btType?: 'BTPLiteralMapEntry-257';
} & {
    btType?: string;
    key?: BtpPropertyAccessor23;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpLiteralNumber258 = {
    atomic?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    documentationType?: GbtpDefinitionType;
    endSourceLocation?: number;
    integer?: boolean;
    nodeId?: string;
    shortDescriptor?: string;
    spaceAfter?: BtpSpace10;
    spaceBefore?: BtpSpace10;
    spaceDefault?: boolean;
    startSourceLocation?: number;
    text?: string;
    value?: number;
};

export type BtpLiteralString259 = BtpLiteral253 & {
    btType?: 'BTPLiteralString-259';
} & {
    btType?: string;
    text?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpLiteralUndefined260 = BtpLiteral253 & {
    btType?: 'BTPLiteralUndefined-260';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpModule234 = BtpNode7 & {
    btType?: 'BTPModule-234';
} & {
    btType?: string;
    deepImports?: {
        [key: string]: Array<BtImport>;
    };
    fullyParsed?: boolean;
    imports?: Array<BtpTopLevelImport285>;
    isBlob?: boolean;
    isInternalModule?: boolean;
    mayHaveImplicitImports?: boolean;
    pathMap?: {
        [key: string]: BtMicroversionId366;
    };
    toBeParsed?: BtLazilyParsedFeatureScript;
    topLevel?: Array<BtpTopLevelNode286>;
    version?: BtpLiteralNumber258;
    versionNumber?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpModuleId235 = BtpNode7 & {
    btType?: 'BTPModuleId-235';
} & {
    btType?: string;
    dbimportString?: string;
    elementImport?: boolean;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    externalImport?: boolean;
    importedDocumentId?: string;
    importedElementId?: string;
    importedVersionId?: string;
    legacy?: boolean;
    legacyElementName?: string;
    legacyVersionNumber?: number;
    microversion?: string;
    path?: BtpLiteralString259;
    pathPotentiallyValid?: boolean;
    pathVersion?: string;
    potentiallyValid?: boolean;
    spaceAfterPath?: BtpSpace10;
    spaceAfterVersion?: BtpSpace10;
    spaceBeforePath?: BtpSpace10;
    spaceBeforeVersion?: BtpSpace10;
    standardLibrary?: boolean;
    standardLibraryCommon?: boolean;
    validLegacyVersion?: boolean;
    version?: BtpLiteralString259;
    versionAndMicroversion?: string;
    versionPotentiallyValid?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpName261 = BtpNode7 & {
    btType?: 'BTPName-261';
} & {
    btType?: string;
    forExport?: boolean;
    globalNamespace?: boolean;
    identifier?: BtpIdentifier8;
    namespace?: Array<BtpIdentifier8>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpNode7 = {
    atomic?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    documentationType?: GbtpDefinitionType;
    endSourceLocation?: number;
    nodeId?: string;
    shortDescriptor?: string;
    spaceAfter?: BtpSpace10;
    spaceBefore?: BtpSpace10;
    spaceDefault?: boolean;
    startSourceLocation?: number;
};

export type BtpOperatorDeclaration264 = BtpProcedureDeclarationBase266 & {
    btType?: 'BTPOperatorDeclaration-264';
} & {
    btType?: string;
    operator?: GbtpOperator;
    spaceAfterOperator?: BtpSpace10;
    spaceBeforeOperator?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpPredicateDeclaration265 = BtpFunctionOrPredicateDeclaration247 & {
    btType?: 'BTPPredicateDeclaration-265';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpProcedureDeclarationBase266 = BtpTopLevelNode286 & {
    btType?: 'BTPProcedureDeclarationBase-266';
} & {
    arguments?: Array<BtpArgumentDeclaration232>;
    body?: BtpStatementBlock271;
    btType?: string;
    precondition?: BtpStatement269;
    returnType?: BtpTypeName290;
    spaceAfterArglist?: BtpSpace10;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpPropertyAccessor23 = BtpNode7 & {
    btType?: 'BTPPropertyAccessor-23';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpsoIdentity2741 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    theId?: string;
};

export type BtpSpace10 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    lines?: Array<string>;
    nodeId?: string;
    text?: string;
};

export type BtpStatement269 = BtpNode7 & {
    btType?: 'BTPStatement-269';
} & {
    annotation?: BtpAnnotation231;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementAssignment270 = BtpStatement269 & {
    btType?: 'BTPStatementAssignment-270';
} & {
    btType?: string;
    lvalue?: BtplValue249;
    operator?: GbtpOperator;
    rvalue?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementBlock271 = BtpStatement269 & {
    btType?: 'BTPStatementBlock-271';
} & {
    btType?: string;
    spaceAfterOpen?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementBreak272 = BtpStatement269 & {
    btType?: 'BTPStatementBreak-272';
} & {
    btType?: string;
    spaceAfterBreak?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementCompressedQuery1237 = BtpStatement269 & {
    btType?: 'BTPStatementCompressedQuery-1237';
} & {
    btType?: string;
    query?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementConstantDeclaration273 = BtpStatement269 & {
    btType?: 'BTPStatementConstantDeclaration-273';
} & {
    btType?: string;
    identifier?: BtpIdentifier8;
    name?: BtpIdentifier8;
    standardType?: GbtpType;
    type?: BtpTypeName290;
    typeName?: string;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementContinue274 = BtpStatement269 & {
    btType?: 'BTPStatementContinue-274';
} & {
    btType?: string;
    spaceAfterContinue?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementExpression275 = BtpStatement269 & {
    btType?: 'BTPStatementExpression-275';
} & {
    btType?: string;
    expression?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementIf276 = BtpStatement269 & {
    btType?: 'BTPStatementIf-276';
} & {
    btType?: string;
    condition?: BtpExpression9;
    elseBody?: BtpStatement269;
    spaceAfterIf?: BtpSpace10;
    thenBody?: BtpStatement269;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementLoop277 = BtpStatement269 & {
    btType?: 'BTPStatementLoop-277';
} & {
    body?: BtpStatement269;
    btType?: string;
    spaceAfterLoopType?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementLoopFor3278 = BtpStatementLoop277 & {
    btType?: 'BTPStatementLoopFor3-278';
} & {
    btType?: string;
    condition?: BtpExpression9;
    increment?: BtpStatement269;
    initialization?: BtpStatement269;
    spaceAfterInitialization?: BtpSpace10;
    spaceBeforeCondition?: BtpSpace10;
    spaceBeforeIncrement?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementLoopForIn279 = BtpStatementLoop277 & {
    btType?: 'BTPStatementLoopForIn-279';
} & {
    btType?: string;
    container?: BtpExpression9;
    identifiers?: Array<BtpIdentifier8>;
    isVarDeclaredHere?: boolean;
    keyVar?: BtpIdentifier8;
    spaceBeforeVar?: BtpSpace10;
    standardTypes?: Array<GbtpType>;
    typeNames?: Array<string>;
    var?: BtpIdentifier8;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementLoopWhile280 = BtpStatementLoop277 & {
    btType?: 'BTPStatementLoopWhile-280';
} & {
    btType?: string;
    condition?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementReturn281 = BtpStatement269 & {
    btType?: 'BTPStatementReturn-281';
} & {
    btType?: string;
    spaceAfterReturn?: BtpSpace10;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementThrow1080 = BtpStatement269 & {
    btType?: 'BTPStatementThrow-1080';
} & {
    btType?: string;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementTry1523 = BtpStatement269 & {
    btType?: 'BTPStatementTry-1523';
} & {
    body?: BtpStatementBlock271;
    btType?: string;
    catchBlock?: BtpStatementBlock271;
    catchVariable?: BtpIdentifier8;
    identifier?: BtpIdentifier8;
    silent?: boolean;
    spaceAfterCatch?: BtpSpace10;
    spaceBeforeSilent?: BtpSpace10;
    standardType?: GbtpType;
    typeName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementVarDeclaration282 = BtpStatement269 & {
    btType?: 'BTPStatementVarDeclaration-282';
} & {
    btType?: string;
    identifier?: BtpIdentifier8;
    name?: BtpIdentifier8;
    standardType?: GbtpType;
    type?: BtpTypeName290;
    typeName?: string;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelConstantDeclaration283 = BtpTopLevelNode286 & {
    btType?: 'BTPTopLevelConstantDeclaration-283';
} & {
    btType?: string;
    declaration?: BtpStatementConstantDeclaration273;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelEnumDeclaration284 = BtpTopLevelTypeDeclaration287 & {
    btType?: 'BTPTopLevelEnumDeclaration-284';
} & {
    annotations?: Array<BtpAnnotation231>;
    btType?: string;
    spaceInEmptyList?: BtpSpace10;
    trailingComma?: boolean;
    values?: Array<BtpIdentifier8>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelImport285 = BtpTopLevelNode286 & {
    btType?: 'BTPTopLevelImport-285';
} & {
    btType?: string;
    combinedNamespacePathAndVersion?: string;
    moduleId?: BtpModuleId235;
    namespace?: Array<BtpIdentifier8>;
    namespaceString?: string;
    spaceBeforeImport?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelNode286 = BtpNode7 & {
    btType?: 'BTPTopLevelNode-286';
} & {
    annotation?: BtpAnnotation231;
    argumentsToDocument?: Array<BtpArgumentDeclaration232>;
    btType?: string;
    deprecated?: boolean;
    deprecatedExplanation?: string;
    forExport?: boolean;
    spaceAfterExport?: BtpSpace10;
    symbolName?: BtpIdentifier8;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelTypeDeclaration287 = BtpTopLevelNode286 & {
    btType?: 'BTPTopLevelTypeDeclaration-287';
} & {
    btType?: string;
    name?: BtpIdentifier8;
    spaceAfterVersion?: BtpSpace10;
    version?: BtpLiteralNumber258;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelUserTypeDeclaration288 = BtpTopLevelTypeDeclaration287 & {
    btType?: 'BTPTopLevelUserTypeDeclaration-288';
} & {
    btType?: string;
    typecheck?: BtpName261;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTypeName290 = BtpNode7 & {
    btType?: 'BTPTypeName-290';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTypeNameStandard291 = BtpTypeName290 & {
    btType?: 'BTPTypeNameStandard-291';
} & {
    btType?: string;
    type?: GbtpType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTypeNameUser292 = BtpTypeName290 & {
    btType?: 'BTPTypeNameUser-292';
} & {
    btType?: string;
    type?: BtpName261;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterExpressionErrorInfo2037 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    errorMessageIdentifier?: GbtErrorStringEnum;
    messageArguments?: Array<BtValueAndUse4696>;
};

export type BtParameterGroupSpec3469 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    collapsedByDefault?: boolean;
    drivingParameterId?: string;
    groupId?: string;
    groupName?: string;
    groupOrParameterIds?: Array<string>;
    localizableName?: string;
    stringsToLocalize?: Array<string>;
};

export type BtParameterLookupTableEntry1667 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    label?: string;
    localizableName?: string;
    localizedLabel?: string;
    stringsToLocalize?: Array<string>;
};

export type BtParameterLookupTableListEntry1916 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    defaultIndex?: number;
    displayName?: string;
    entries?: Array<BtParameterLookupTableEntry1667>;
    label?: string;
    localizableName?: string;
    localizedLabel?: string;
    name?: string;
    stringsToLocalize?: Array<string>;
};

export type BtParameterSpec6 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    columnName?: string;
    defaultValue?: BtmParameter1;
    enumOptions?: Array<string>;
    iconUri?: string;
    localizableName?: string;
    parameterDescription?: string;
    parameterId?: string;
    parameterName?: string;
    quantityType?: GbtQuantityType;
    stringsToLocalize?: Array<string>;
    uiHint?: string;
    uiHints?: Array<GbtuiHint>;
    visibilityCondition?: BtParameterVisibilityCondition177;
};

export type BtParameterSpecAppearance1740 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecAppearance-1740';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecArray2600 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecArray-2600';
} & {
    btType?: string;
    dialogId?: string;
    drivenQuery?: string;
    icon?: string;
    itemLabelTemplate?: string;
    itemName?: string;
    maxNumberOfPicks?: number;
    showLabelsOnly?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecBoolean170 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecBoolean-170';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecButton4111 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecButton-4111';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecCategories4083 = BtParameterSpecMultiEnum3118 & {
    btType?: 'BTParameterSpecCategories-4083';
} & {
    btType?: string;
    categoryIdToMetadataTypes?: {
        [key: string]: Array<number>;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecDatabase1071 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecDatabase-1071';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecDerived736 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecDerived-736';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecEnum171 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecEnum-171';
} & {
    btType?: string;
    enumName?: string;
    enumOptionVisibilityConditions?: BtEnumOptionVisibilityConditionList2936;
    enumValueToVisibilityCondition?: {
        [key: string]: BtParameterVisibilityCondition177;
    };
    namespace?: string;
    optionIconUris?: Array<string>;
    optionNames?: Array<string>;
    options?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecFeatureList703 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecFeatureList-703';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecForeignId172 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecForeignId-172';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecIcon4779 = BtReadOnlyParameterSpec1889 & {
    btType?: 'BTParameterSpecIcon-4779';
} & {
    allowLink?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecLookupTablePath761 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecLookupTablePath-761';
} & {
    btType?: string;
    lookupTable?: BtParameterLookupTableListEntry1916;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecMaterial2700 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecMaterial-2700';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecMultiEnum3118 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecMultiEnum-3118';
} & {
    btType?: string;
    enumName?: string;
    enumValueToVisibilityCondition?: {
        [key: string]: BtParameterVisibilityCondition177;
    };
    multivalued?: boolean;
    namespace?: string;
    optionNames?: Array<string>;
    options?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecNotice3132 = BtReadOnlyParameterSpec1889 & {
    btType?: 'BTParameterSpecNotice-3132';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecNullableQuantity715 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecNullableQuantity-715';
} & {
    btType?: string;
    ranges?: Array<BtNullableQuantityRange1340>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecProgress3078 = BtReadOnlyParameterSpec1889 & {
    btType?: 'BTParameterSpecProgress-3078';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecQuantity173 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecQuantity-173';
} & {
    btType?: string;
    ranges?: Array<BtQuantityRange181>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecQuery174 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecQuery-174';
} & {
    additionalBoxSelectFilter?: BtQueryFilter183;
    btType?: string;
    filter?: BtQueryFilter183;
    maxNumberOfPicks?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReference2789 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecReference-2789';
} & {
    btType?: string;
    libraryDefinitionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceAssembly2821 = BtParameterSpecReference2789 & {
    btType?: 'BTParameterSpecReferenceAssembly-2821';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceBlob1367 = BtParameterSpecReference2789 & {
    btType?: 'BTParameterSpecReferenceBlob-1367';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceCadImport1792 = BtParameterSpecReferenceBlob1367 & {
    btType?: 'BTParameterSpecReferenceCADImport-1792';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceImage1722 = BtParameterSpecReferenceBlob1367 & {
    btType?: 'BTParameterSpecReferenceImage-1722';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceJson1816 = BtParameterSpecReferenceBlob1367 & {
    btType?: 'BTParameterSpecReferenceJSON-1816';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferencePartStudio1256 = BtParameterSpecReference2789 & {
    btType?: 'BTParameterSpecReferencePartStudio-1256';
} & {
    allowedInsertableTypes?: Array<GbtPartStudioItemType>;
    btType?: string;
    computedConfigurationInputs?: Array<BtComputedConfigurationInputSpec2525>;
    maxNumberOfPicks?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceTable1520 = BtParameterSpecReferenceBlob1367 & {
    btType?: 'BTParameterSpecReferenceTable-1520';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceText4945 = BtParameterSpecReferenceBlob1367 & {
    btType?: 'BTParameterSpecReferenceText-4945';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceVariableStudio1060 = BtParameterSpecReference2789 & {
    btType?: 'BTParameterSpecReferenceVariableStudio-1060';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceWithConfiguration2950 = BtParameterSpecReference2789 & {
    btType?: 'BTParameterSpecReferenceWithConfiguration-2950';
} & {
    allowAssemblies?: boolean;
    allowedInsertableTypes?: Array<GbtPartStudioItemType>;
    btType?: string;
    maxNumberOfPicks?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecString175 = BtParameterSpec6 & {
    btType?: 'BTParameterSpecString-175';
} & {
    btType?: string;
    formatConditions?: Array<BtStringFormatCondition683>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecStringWithTolerances2535 = BtReadOnlyParameterSpec1889 & {
    btType?: 'BTParameterSpecStringWithTolerances-2535';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterVisibilityAlwaysHidden176 = BtParameterVisibilityCondition177 & {
    btType?: 'BTParameterVisibilityAlwaysHidden-176';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterVisibilityCondition177 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterVisibilityInRange2980 = BtParameterVisibilityCondition177 & {
    btType?: 'BTParameterVisibilityInRange-2980';
} & {
    btType?: string;
    optionRange?: BtEnumOptionRange3741;
    parameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterVisibilityLogical178 = BtParameterVisibilityCondition177 & {
    btType?: 'BTParameterVisibilityLogical-178';
} & {
    btType?: string;
    children?: Array<BtParameterVisibilityCondition177>;
    operation?: GbtParameterVisibilityLogicalOp;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterVisibilityOnEqual180 = BtParameterVisibilityCondition177 & {
    btType?: 'BTParameterVisibilityOnEqual-180';
} & {
    btType?: string;
    inArray?: boolean;
    parameterId?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterVisibilityOnMateDofType2114 = BtParameterVisibilityOnEqual180 & {
    btType?: 'BTParameterVisibilityOnMateDOFType-2114';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricInstance2641 = BtInstanceBase2263 & {
    btType?: 'BTParametricInstance-2641';
} & {
    btType?: string;
    feature?: BtmAssemblyFeature887;
    featureId?: string;
    instanceControlNodes?: Array<BtInstanceControlNode750>;
    seedBasedParametricInstance?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricOutputInstance2288 = BtInstanceBase2263 & {
    btType?: 'BTParametricOutputInstance-2288';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricPartStudioChildInstance3696 = BtParametricOutputInstance2288 & {
    btType?: 'BTParametricPartStudioChildInstance-3696';
} & {
    btType?: string;
    partIdentity?: BtpsoIdentity2741;
    sketchFeatureId?: string;
    type?: GbtPartStudioInstanceType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricPartStudioInstance4374 = BtParametricInstance2641 & {
    btType?: 'BTParametricPartStudioInstance-4374';
} & {
    btType?: string;
    configuration?: Array<BtmParameter1>;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    lockedState?: boolean;
    microversionId?: BtMicroversionId366;
    nodeWithReferenceList?: Array<BtNodeWithReference>;
    parametricPartStudioFeature?: BtmParametricPartStudioFeature3883;
    referenceParameter?: BtmParameterReferencePartStudio3302;
    versionId?: string;
    versionIdIfExternal?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPartAppearanceInfo = {
    color?: BtColorInfo;
    isGenerated?: boolean;
    opacity?: number;
};

export type BtPartCustomProperties1338 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    description?: string;
    partNumber?: string;
    productLine?: string;
    project?: string;
    properties?: {
        [key: string]: string;
    };
    revision?: string;
    tessellationSetting?: string;
    title1?: string;
    title2?: string;
    title3?: string;
    vendor?: string;
};

export type BtPartData16 = {
    bestAvailableTessellationSetting?: GbtTessellationSettingEnum;
    boundsDiameter?: number;
    /**
     * Type of JSON object.
     */
    btType?: string;
    closedConstituentPartData?: BtClosedConstituentPartData2911;
    coarsePlanarFaceTriangleCount?: number;
    coarseTriangleCount?: number;
    constituentBodyDeterministicIds?: Array<string>;
    copyWithoutEntities?: BtPartData16;
    entityDIds?: Array<string>;
    entityDeterministicIds?: Array<string>;
    flattenedToUnflattenedEntitiesMapping?: {
        [key: string]: Array<string>;
    };
    flattenedToUnflattenedMapping?: {
        [key: string]: string;
    };
    highBoxCorner?: BtVector3d389;
    isACopyForTessellationSettings?: boolean;
    isAssociatedWithFlat?: boolean;
    isBendCenterLineBody?: boolean;
    isClosedComposite?: boolean;
    isComposite?: boolean;
    isDeletion?: boolean;
    isEntitylessPartData?: boolean;
    isFlattenedSheetMetalBody?: boolean;
    isOpenComposite?: boolean;
    lowBoxCorner?: BtVector3d389;
    ownerFlattenedBodyId?: string;
    sheetMetalModelId?: string;
    sheetMetalOrderId?: string;
    shouldAlwaysUseHighestQualityTessellation?: boolean;
    tessellationSettings?: Array<number>;
    totalEntityCount?: number;
    userTessellationSetting?: GbtTessellationSettingEnum;
};

export type BtPartDisplayData17 = {
    appearance?: BtGraphicsAppearance1152;
    appearanceForNewCell?: BtGraphicsAppearance1152;
    /**
     * Type of JSON object.
     */
    btType?: string;
    customProperties?: BtPartCustomProperties1338;
    defaultColorHash?: string;
    hasFaults?: boolean;
    hidden?: boolean;
    highBoxCorner?: BtVector3d389;
    id?: string;
    isActiveSheetMetal?: boolean;
    isMesh?: boolean;
    isModifiable?: boolean;
    isSheet?: boolean;
    isSolid?: boolean;
    isWire?: boolean;
    lowBoxCorner?: BtVector3d389;
    material?: BtPartMaterial1445;
    materialForNewCell?: BtPartMaterial1445;
    meshState?: GbtMeshState;
    name?: string;
    nameForNewCell?: string;
    ordinal?: number;
    partId?: string;
    propertyIdToSource?: {
        [key: string]: BtPartMetadataSource2895;
    };
    referencingConfiguredPartNodeIds?: Array<BtObjectId>;
    visibility?: GbtPartVisibility;
};

export type BtPartInstance81 = BtInstance642 & {
    btType?: 'BTPartInstance-81';
} & {
    btType?: string;
    partIdentity?: BtpsoIdentity2741;
    partQuery?: string;
    partReference?: BtmParameterReferencePartStudio3302;
    type?: GbtPartStudioInstanceType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPartMaterial1445 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    id?: string;
    libraryName?: string;
    libraryReference?: BtElementReference725;
    name?: string;
    properties?: {
        [key: string]: BtPartMaterialProperty1453;
    };
    version?: number;
};

export type BtPartMaterialInfo = {
    displayName?: string;
    id?: string;
    libraryName?: string;
    libraryReference?: BtExternalElementReferenceInfo;
    properties?: Array<BtPartMaterialPropertyInfo>;
};

export type BtPartMaterialProperty1453 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    category?: string;
    description?: string;
    displayName?: string;
    name?: string;
    type?: string;
    units?: string;
    value?: string;
};

export type BtPartMaterialPropertyInfo = {
    category?: string;
    description?: string;
    displayName?: string;
    name?: string;
    type?: string;
    units?: string;
    value?: string;
};

export type BtPartMetadataInfo = {
    appearance?: BtPartAppearanceInfo;
    bodyType?: string;
    configurationId?: string;
    customProperties?: {
        [key: string]: string;
    };
    defaultColorHash?: string;
    description?: string;
    elementId?: string;
    href?: string;
    id?: string;
    isFlattenedBody?: boolean;
    isHidden?: boolean;
    isMesh?: boolean;
    material?: BtPartMaterialInfo;
    meshState?: GbtMeshState;
    metadataMicroversion?: string;
    microversionId?: string;
    name?: string;
    ordinal?: number;
    partId?: string;
    partIdentity?: string;
    partNumber?: string;
    partQuery?: string;
    productLine?: string;
    project?: string;
    /**
     * `0: AUTOMATIC` Set automatically, like a part name |
     * `1: MERGED` Merged from another Part Studio | `2: FEATURE` Custom feature | `3: UNCONFIGURED` | `4: CONFIGURED` |
     * `5: STANDARD_CONTENT` | `6: DEFAULT` Applied from metadata property configuration | `7: COMPUTED` Non-overridden, non-configured, computed property |
     * `8: COMPUTED_CONFIGURED` Property is computed in this configuration; may also be configured in other configurations
     * `9: IMPORT` Imported properties are handled separately
     */
    propertySourceTypes?: {
        [key: string]: number;
    };
    referencingConfiguredPartNodeIds?: Array<string>;
    revision?: string;
    state?: BtMetadataStateType;
    thumbnailConfigurationId?: string;
    thumbnailInfo?: BtThumbnailInfo;
    title1?: string;
    title2?: string;
    title3?: string;
    unflattenedPartId?: string;
    vendor?: string;
};

export type BtPartMetadataSource2895 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    sourceId?: string;
    sourceType?: GbtMetadataSourceType;
};

export type BtPartProperties293 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuredParts?: BtConfiguredPartProperties2645;
    identityIdToQueryIndex?: {
        [key: string]: number;
    };
    nodeId?: string;
    parts?: Array<BtOnePartProperties230>;
    roughBytesEstimate?: number;
    tessellationProperties?: BtTessellationProperties927;
};

export type BtPartStudioDisplayData346 = {
    allInsertableDisplayData?: {
        [key: string]: {
            [key: string]: BtInsertableDisplayData2405;
        };
    };
    annotationsForElement?: BtAnnotationElementDisplayData894;
    appearanceIdToAppearanceOverride?: {
        [key: string]: BtAppearanceOverride2517;
    };
    assemblyReferenceDisplayData?: BtAssemblyReferencesDisplayData1562;
    bodyIdToEntityAppearanceSettings?: {
        [key: string]: BtBaseEntityAppearanceSettings1391;
    };
    bodyIdToEntityAppearanceSettingsChanged?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    cacheablePartStudioDisplayDataVersion?: GbtPartStudioDisplayDataVersion;
    decalIdToDecal?: {
        [key: string]: BtDecal2404;
    };
    deterministicIdToAssociatedFeatureIds?: {
        [key: string]: Array<string>;
    };
    deterministicIdToEntity?: {
        [key: string]: BtBaseEntityData33;
    };
    deterministicIdToPartDisplayData?: {
        [key: string]: BtPartDisplayData17;
    };
    deterministicPartIdToData?: {
        [key: string]: BtPartData16;
    };
    dimensions?: Array<BtDimensionDisplayData323>;
    displayStateId?: string;
    elementId?: string;
    featureIdToOperationIndices?: {
        [key: string]: Array<number>;
    };
    fromCache?: boolean;
    fromFullElementId?: BtFullElementId756;
    fullElementId?: BtFullElementId756;
    incremental?: boolean;
    instanceCount?: number;
    isBase?: boolean;
    isExternal?: boolean;
    isNoop?: boolean;
    keepFromMicroversion?: boolean;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfigurationInterval?: BtMicroversionIdAndConfigurationInterval2364;
    microversionInterval?: BtMicroversionIdInterval367;
    numberOfSketchEntities?: number;
    partColorCycle?: BtBasePartColorCycle2614;
    partDisplayData?: Array<BtPartDisplayData17>;
    partIdAndTessellationSettingToBuffers?: {
        [key: string]: {
            [key: string]: BtInsertableDisplayData2405;
        };
    };
    sketchFeatureIdAndTessellationSettingToBuffers?: {
        [key: string]: {
            [key: string]: BtInsertableDisplayData2405;
        };
    };
    sketchImages?: {
        [key: string]: {
            [key: string]: BtSketchImageDisplayData1379;
        };
    };
    updatedParts?: Array<string>;
    usage?: GbtDisplayDataUsage;
    usesMultipleTessellationSettings?: boolean;
    versionForRasterization?: BtElementDisplayData326;
};

export type BtPartStudioDisplayDataBase2751 = {
    annotationsForElement?: BtAnnotationElementDisplayData894;
    /**
     * Type of JSON object.
     */
    btType?: string;
    elementId?: string;
    fromFullElementId?: BtFullElementId756;
    fullElementId?: BtFullElementId756;
    incremental?: boolean;
    instanceCount?: number;
    isNoop?: boolean;
    keepFromMicroversion?: boolean;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfigurationInterval?: BtMicroversionIdAndConfigurationInterval2364;
    microversionInterval?: BtMicroversionIdInterval367;
    numberOfSketchEntities?: number;
    versionForRasterization?: BtElementDisplayData326;
};

export type BtPartStudioDisplayDataReference4360 = BtPartStudioDisplayDataBase2751 & {
    btType?: 'BTPartStudioDisplayDataReference-4360';
} & {
    btType?: string;
    cacheDataPath?: BtCacheDataPath191;
    tessellationSettings?: {
        [key: string]: Array<number>;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPartWithConfiguredProperties2163 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configurationProperties?: Array<BtOneConfigurationPartProperties1661>;
    forSubPartProperties?: boolean;
    nodeId?: string;
    parsedQuery?: BtpFunctionDeclaration246;
    propertyNodeId?: string;
    query?: string;
};

/**
 * Skip mesh/curve foreign data creation in individual parts export
 */
export type BtPartsExportFilter4308 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    skipAllMesh?: boolean;
    skipCurves?: boolean;
    skipPartialMesh?: boolean;
};

export type BtPendingUpgradeInfo = {
    scheduledTime?: string;
    version?: number;
};

export type BtPlanSubscriberInfo = {
    email?: string;
    firstName?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    image?: string;
    lastName?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    state?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtPlanarImageMapping4398 = BtImageMapping3821 & {
    btType?: 'BTPlanarImageMapping-4398';
} & {
    btType?: string;
    planeSystem?: BtCoordinateSystem387;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPlaneDescription692 = BtSurfaceDescription1564 & {
    btType?: 'BTPlaneDescription-692';
} & {
    btType?: string;
    isOrientedWithFace?: boolean;
    normal?: BtVector3d389;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPlaneOrientationFilter1700 = BtQueryFilter183 & {
    btType?: 'BTPlaneOrientationFilter-1700';
} & {
    btType?: string;
    normal?: BtVector3d389;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPointEntity1439 = BtFeatureEntity34 & {
    btType?: 'BTPointEntity-1439';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPrivacyConsentInfo = {
    communicationsOptInDate?: string;
    communicationsOptOutDate?: string;
    communicationsStatus?: boolean;
    consentVersion?: string;
    dataProcessingOptInDate?: string;
    dataProcessingOptOutDate?: string;
    dataProcessingStatus?: boolean;
    eulaVersion?: number;
    userId?: string;
};

export type BtProjectInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'project';
} & {
    permissionScheme?: BtRbacPermissionSchemeInfo;
    permissionSet?: Array<string>;
    roleMapEntries?: Array<RoleMapEntry>;
    trash?: boolean;
};

export type BtPropertiesTableTemplateInfo = {
    companyId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isActive?: boolean;
    isAllCaps?: boolean;
    isIndented?: boolean;
    /**
     * Name of the resource.
     */
    name?: string;
    propertyColumns?: Array<BtSimplePropertyInfo>;
    tableType?: BtPropertiesTableTemplateType;
    templateGroupId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtPropertiesTableTemplateParams = {
    companyId?: string;
    isAllCaps?: boolean;
    isIndented?: boolean;
    name?: string;
    propertyColumns?: Array<string>;
    tableType?: BtPropertiesTableTemplateType;
};

export type BtPropertiesTableTemplateType = 'BOM' | 'REVISION_TABLE' | 'INSPECTION_TABLE';

export type BtPropertyTableColumnInfo2161 = BtTableColumnInfo1222 & {
    btType?: 'BTPropertyTableColumnInfo-2161';
} & {
    btType?: string;
    isComputedAssemblyProperty?: boolean;
    isComputedProperty?: boolean;
    propertyValueType?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPropertyUpdateInfo = {
    errorMessage?: string;
    itemHref?: string;
    newValue?: {
        [key: string]: unknown;
    };
    oldValue?: {
        [key: string]: unknown;
    };
    propertyId?: string;
};

export type BtPropertyValueParam = {
    /**
     * Id of the property to set.
     */
    propertyId?: string;
    /**
     * Value to set for the property.
     */
    value?: {
        [key: string]: unknown;
    };
};

export type BtPublicationBulkItemParams = {
    items?: Array<BtPublicationItemParams>;
};

export type BtPublicationInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'BTPublicationInfo';
} & {
    defaultWorkspaceId?: string;
    items?: Array<BtPublicationInfoItem>;
    notes?: string;
    sequence?: string;
};

export type BtPublicationInfoItem = {
    applicationTarget?: BtApplicationTargetInfo;
    dataType?: string;
    documentId?: string;
    elementId?: string;
    elementType?: GbtElementType;
    encodedConfiguration?: string;
    id?: string;
    jsonType: string;
    partId?: string;
    partName?: string;
    partNumber?: string;
    revision?: string;
    revisionId?: string;
    state?: number;
    versionId?: string;
    versionName?: string;
};

export type BtPublicationItemParams = {
    dataType?: string;
    documentId?: string;
    elementId?: string;
    encodedConfiguration?: string;
    isApplication?: boolean;
    isAssembly?: boolean;
    isBlob?: boolean;
    isWholePartStudio?: boolean;
    mimeType?: string;
    partId?: string;
    partName?: string;
    partNumber?: string;
    revision?: string;
    revisionId?: string;
    versionId?: string;
};

export type BtPublicationParams = {
    description?: string;
    items?: Array<BtPublicationItemParams>;
    name?: string;
    notes?: string;
    oldClientNotes?: string;
    ownerId?: string;
    ownerType?: number;
    parentId?: string;
    projectId?: string;
};

export type BtPublishedWorkflowId = {
    companyId?: string;
    versionId?: string;
    workflowId?: string;
};

/**
 * Captures information about a published workflow
 */
export type BtPublishedWorkflowInfo = {
    activeState?: number;
    companyId?: string;
    description?: string;
    documentId?: string;
    elementId?: string;
    id?: string;
    imageSrc?: string;
    isPickable?: boolean;
    json?: string;
    name?: string;
    objectType?: number;
    ownerType?: number;
    /**
     * The date of publication of workflow
     */
    publishedDate?: string;
    /**
     * Whether the workflow connects to an external PLM service like Arena
     */
    usesExternalPlm?: boolean;
    versionId?: string;
};

export type BtPurchaseIdentityParams = {
    consumedQuantity?: number;
    identityId?: string;
    identityType?: number;
    purchaseId?: string;
};

export type BtPurchaseInfo = {
    accountId?: string;
    actualAmountPaidCents?: number;
    amountCents?: number;
    apiAllocationByPlan?: number;
    apiAllocationEndDate?: string;
    apiAllocationOverride?: number;
    apiAllocationStartDate?: string;
    application?: BtapiApplicationSummaryInfo;
    canceledAt?: string;
    card?: BtCardInfo;
    clientId?: string;
    couponAmountOff?: number;
    couponPercentOff?: number;
    createdBy?: string;
    currency?: string;
    duration?: number;
    durationMonths?: number;
    group?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    lastModified?: string;
    lastModifiedBy?: string;
    lightSeats?: number;
    /**
     * Name of the resource.
     */
    name?: string;
    nextCharge?: NextCharge;
    paymentType?: number;
    pendingCancelation?: boolean;
    plan?: BtBillingPlanInfo;
    planId?: string;
    planName?: string;
    planType?: number;
    preTrialPlanId?: string;
    proratedCharges?: Array<ProratedCharges>;
    proratedTotal?: number;
    purchaseDate?: string;
    resellerName?: string;
    seats?: number;
    state?: number;
    subscribers?: Array<BtPlanSubscriberInfo>;
    subscriptionBeginAt?: string;
    subscriptionEndAt?: string;
    subscriptionId?: string;
    subscriptionType?: number;
    taxAmountCents?: number;
    trialEnd?: string;
    trialInitiatedBy?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtQuantityRange181 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    defaultValue?: number;
    location?: BtLocationInfo226;
    maxValue?: number;
    minValue?: number;
    units?: string;
};

export type BtQueryFilter183 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtRadialDimensionDisplayData348 = BtDimensionDisplayData323 & {
    btType?: 'BTRadialDimensionDisplayData-348';
} & {
    btType?: string;
    positionR?: number;
    positionT?: number;
    radiusDisplay?: GbtRadiusDisplay;
    realDiameter?: boolean;
    witnessEndPoint0r?: number;
    witnessEndPoint0t?: number;
    witnessEndPoint1r?: number;
    witnessEndPoint1t?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtRadialDistanceDimensionDisplayData2644 = BtDimensionDisplayData323 & {
    btType?: 'BTRadialDistanceDimensionDisplayData-2644';
} & {
    btType?: string;
    innerWitnessEndPoint0Angle?: number;
    innerWitnessEndPoint1Angle?: number;
    innerWitnessRadius?: number;
    outerWitnessEndPoint0Angle?: number;
    outerWitnessEndPoint1Angle?: number;
    outerWitnessRadius?: number;
    positionAngle?: number;
    positionRadius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtRbacPermissionSchemeInfo = {
    active?: boolean;
    description?: string;
    entries?: Array<Entry>;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    predefinedPermissionScheme?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtRbacRoleInfo = {
    active?: boolean;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    predefinedRole?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtReadOnlyParameterSpec1889 = BtParameterSpec6 & {
    btType?: 'BTReadOnlyParameterSpec-1889';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtReferenceCustomData1551 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtReleaseCommentListInfo = {
    comments?: Array<BtCommentInfo>;
    rpId?: string;
    rpName?: string;
};

export type BtReleaseItemErrorInfo = {
    changeTaskId?: string;
    documentId?: string;
    message?: string;
    ordinal?: number;
    pendingTaskId?: string;
    pendingTaskObjectId?: string;
    pendingTaskType?: string;
    rejectAllowed?: boolean;
    releaseId?: string;
    severity?: number;
    versionId?: string;
    workspaceId?: string;
};

export type BtReleaseItemMessageBody = BtDocumentMessageBody & {
    elementType?: number;
    isFromInitialState?: boolean;
    isToTerminalState?: boolean;
    releaseId?: string;
    status?: string;
    transitionName?: string;
};

export type BtReleasePackageInfo = {
    addAllDrawingsActive?: boolean;
    changeOrderId?: string;
    columnNames?: {
        [key: string]: string;
    };
    comments?: Array<BtCommentInfo>;
    companyId?: string;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    detailed?: boolean;
    documentId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isObsoletion?: boolean;
    items?: Array<BtReleasePackageItemInfo>;
    linkedVersionIds?: Array<string>;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    originalWorkspaceId?: string;
    packageThumbnail?: string;
    parentComments?: Array<BtReleaseCommentListInfo>;
    parentPackages?: Array<string>;
    properties?: Array<BtWorkflowPropertyInfo>;
    /**
     * Indicates whether the release is still in setup state and saved as a draft.
     */
    retainedAsDraft?: boolean;
    revisionRuleId?: string;
    rootItemsToRebuild?: Array<string>;
    updatedItemIds?: Array<string>;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workflow?: BtWorkflowSnapshotInfo;
    workflowId?: BtPublishedWorkflowId;
    workspaceId?: string;
};

export type BtReleasePackageItemInfo = {
    addedAutomatically?: boolean;
    canExport?: boolean;
    changeDetectionStatus?: number;
    companyId?: string;
    configuration?: string;
    configurationKey?: string;
    diffThumbnailConfigurationKey?: string;
    documentId?: string;
    elementId?: string;
    elementType?: number;
    errors?: Array<BtReleaseItemErrorInfo>;
    flatPartId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isRevisionManaged?: boolean;
    isRootItem?: boolean;
    isTranslatable?: boolean;
    manuallyRemovedChildrenIds?: Array<string>;
    meshState?: number;
    mimeType?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    obsoletionRevisionId?: string;
    originalWorkspaceId?: string;
    parentId?: string;
    partId?: string;
    partIdentity?: string;
    partType?: string;
    properties?: Array<BtMetadataPropertyInfo>;
    referenceIds?: Array<string>;
    referenceIdsFromOriginalWorkspace?: Array<string>;
    rpid?: string;
    smallThumbnailHref?: string;
    subassemblyBomBehavior?: string;
    syncedWithPLM?: boolean;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
};

export type BtReleasePackageItemParams = {
    addedAutomatically?: boolean;
    configuration?: string;
    documentId?: string;
    elementId?: string;
    elementType?: number;
    flatPartId?: string;
    href?: string;
    id?: string;
    isIncluded?: boolean;
    parentId?: string;
    partId?: string;
    partIdentity?: string;
    partNumber?: string;
    properties?: Array<BtPropertyValueParam>;
    revisionId?: string;
    versionId?: string;
    workspaceId?: string;
};

export type BtReleasePackageParams = {
    changeOrderId?: string;
    items?: Array<BtReleasePackageItemParams>;
};

export type BtResourceOwnerInfo = BtGlobalTreeNodeInfo & {
    jsonType: 'resource-owner';
} & {
    icon?: string;
    isEnterpriseEdu?: boolean;
    state?: number;
};

export type BtRestUserRole = 'PUBLIC' | 'INTERNAL';

export type BtRestoreFromHistoryInfo = {
    newMicroversion?: string;
};

export type BtRestoreInfo = {
    defaultRestoreStrategy?: BtRestoreStrategy;
    elementIdToStrategyOverride?: {
        [key: string]: BtRestoreStrategy;
    };
};

export type BtRestoreStrategy = 'KEEP' | 'REPLACE';

export type BtRevertUnchangedElementParams = {
    configuration?: string;
    elementId?: string;
    referenceIds?: Array<string>;
};

export type BtRevertUnchangedParams = {
    companyId?: string;
    connectionId?: string;
    doUpdate?: boolean;
    elements?: Array<BtRevertUnchangedElementParams>;
};

/**
 * The users who approved the release package that created this revision.
 */
export type BtRevisionApproverInfo = {
    /**
     * Date the revision was created.
     */
    date?: string;
    /**
     * User ID of the user who approved the revision.
     */
    id?: string;
    /**
     * Name of the user who approved the revision.
     */
    name?: string;
};

export type BtRevisionCustomData2090 = BtReferenceCustomData1551 & {
    btType?: 'BTRevisionCustomData-2090';
} & {
    btType?: string;
    partNumber?: string;
    revision?: string;
    validRevisionReference?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * Revision details.
 */
export type BtRevisionInfo = {
    /**
     * The users who approved the release package that created this revision.
     */
    approvers?: Array<BtRevisionApproverInfo>;
    autoObsoletionReleaseId?: string;
    autoObsoletionReleaseName?: string;
    /**
     * Whether the revision can change object type. Used in reuse part number flow.
     */
    canChangeType?: boolean;
    canExport?: boolean;
    /**
     * The company or enterprise ID that owns the resource.
     */
    companyId?: string;
    configuration?: string;
    createdAt?: string;
    /**
     * The Revision Description metadata property if revision is of a drawing.
     */
    description?: string;
    /**
     * The document that contains the revision object.
     */
    documentId?: string;
    /**
     * The name of the document that contains the revision object.
     */
    documentName?: string;
    /**
     * The state of document containing this revision. Used in reuse part number flow
     */
    documentState?: number;
    /**
     * The element that contains the revision object.
     */
    elementId?: string;
    /**
     * The type of item Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
     */
    elementType?: number;
    errorMessage?: string;
    flatPartInsertableId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    insertableId?: string;
    /**
     * Whether the revision has been obsoleted.
     */
    isObsolete?: boolean;
    /**
     * If true, the revision can be created again.
     */
    isRereleasable?: boolean;
    isTranslatable?: boolean;
    mimeType?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    /**
     * The next revision if applicable. null for the latest revision.
     */
    nextRevisionId?: string;
    /**
     * The OBSOLETION release package that obsoleted this revision if applicable.
     */
    obsoletionPackageId?: string;
    partId?: string;
    partIdentity?: string;
    /**
     * The part number with which the object was revised.
     */
    partNumber?: string;
    /**
     * The previous revision if applicable. null for first revision.
     */
    previousRevisionId?: string;
    releaseCreatedDate?: string;
    /**
     * The release package that created this revision.
     */
    releaseId?: string;
    /**
     * The name of the release package that created this item.
     */
    releaseName?: string;
    releasedBy?: BtUserSummaryInfo;
    /**
     * The id of the revision.
     */
    revision?: string;
    revisionRuleId?: string;
    /**
     * The version of the document that contains this revision.
     */
    versionId?: string;
    /**
     * The name of the version of the document that contains this revision.
     */
    versionName?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtRevisionListResponse = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtRevisionInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    partNumber?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
};

export type BtRevisionMessageBody = BtReleaseItemMessageBody & {
    revisionId?: string;
};

export type BtRhoDimensionDisplayData2892 = BtDimensionDisplayData323 & {
    btType?: 'BTRhoDimensionDisplayData-2892';
} & {
    btType?: string;
    positionX?: number;
    positionY?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtRigidOrLockedSubAssemblyOutputInfo3860 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    locked?: boolean;
    rigid?: boolean;
    syncedOutputMVID?: BtMicroversionId366;
};

export type BtRole = 'ANONYMOUS' | 'TOTPPENDINGUSER' | 'USER' | 'DEVELOPER' | 'PARTNER' | 'ONSHAPECOMPANYUSER' | 'ADMIN' | 'SERVICE';

export type BtRootAssemblyDisplayData96 = {
    annotationsForElement?: BtAnnotationElementDisplayData894;
    assemblyFeatures?: Array<BtAssemblyFeatureDisplayData1783>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    buildDurationMillis?: number;
    deletedAssemblyFeatures?: Array<string>;
    deletedGeometryMateIds?: Array<string>;
    deletedLoads?: Array<string>;
    deletedMateConnectorIds?: Array<string>;
    deletedMateGroupIds?: Array<string>;
    deletedMateIds?: Array<string>;
    deletedOccurrences?: Array<BtOccurrence74>;
    elementId?: string;
    fromFullElementId?: BtFullElementId756;
    fullElementId?: BtFullElementId756;
    fullElementIdToReferencedSketchIds?: {
        [key: string]: Array<string>;
    };
    geometryMates?: Array<BtGeometryMateDisplayData1050>;
    incremental?: boolean;
    instanceCount?: number;
    isCollapsible?: boolean;
    isForInContext?: boolean;
    keepFromMicroversion?: boolean;
    loads?: Array<BtLoadDisplayData837>;
    mateConnectors?: Array<BtMateConnectorDisplayData94>;
    mateGroups?: Array<BtMateGroupDisplayData1990>;
    mates?: Array<BtMateDisplayData1358>;
    microversionId?: BtMicroversionId366;
    microversionIdAndConfigurationInterval?: BtMicroversionIdAndConfigurationInterval2364;
    microversionInterval?: BtMicroversionIdInterval367;
    occurrences?: Array<BtOccurrenceDisplayData95>;
    originDisplayData?: BtOriginDisplayData934;
    partStudioDisplayData?: Array<BtPartStudioDisplayDataBase2751>;
    quickSummary?: string;
    sentTimeISO?: string;
    versionForRasterization?: BtElementDisplayData326;
};

export type BtRootAssemblyInfo = {
    configuration?: string;
    documentId?: string;
    documentMicroversion?: string;
    documentVersion?: string;
    elementId?: string;
    /**
     * List of Assembly features including those are created by replicates.
     */
    features?: Array<BtAssemblyFeatureInfo>;
    fullConfiguration?: string;
    /**
     * List of instances including those created by patterns and replicates.
     */
    instances?: Array<BtAssemblyInstanceInfo>;
    occurrences?: Array<BtAssemblyOccurrenceInfo>;
    partNumber?: string;
    /**
     * List of patterns.
     */
    patterns?: Array<BtAssemblyPatternInfo>;
    revision?: string;
};

export type BtRootDiffInfo = {
    changes?: {
        [key: string]: BtDiffInfo;
    };
    collectionChanges?: {
        [key: string]: Array<BtDiffInfo>;
    };
    entityType?: BtDiffInfoCollectionType;
    geometryChangeMessages?: Array<string>;
    sourceConfiguration?: string;
    sourceId?: string;
    sourceMicroversionId?: string;
    sourceValue?: string;
    sourceVersionId?: string;
    sourceWorkspaceId?: string;
    targetConfiguration?: string;
    targetId?: string;
    targetMicroversionId?: string;
    targetValue?: string;
    targetVersionId?: string;
    targetWorkspaceId?: string;
    type?: GbtNodeChange;
};

export type BtsmBendTableRowMetadata1705 = BtBaseSmJointTableRowMetadata2232 & {
    btType?: 'BTSMBendTableRowMetadata-1705';
} & {
    btType?: string;
    isJointTypeEditable?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtsmDefinitionEntityTypeFilter1651 = BtQueryFilter183 & {
    btType?: 'BTSMDefinitionEntityTypeFilter-1651';
} & {
    btType?: string;
    smDefinitionEntityType?: GbtEntityType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtsmOtherJointTableRowMetadata2640 = BtBaseSmJointTableRowMetadata2232 & {
    btType?: 'BTSMOtherJointTableRowMetadata-2640';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtsmSpecificMetadata1315 = BtDomainSpecificMetadata961 & {
    btType?: 'BTSMSpecificMetadata-1315';
} & {
    btType?: string;
    definitionEntityType?: GbtEntityType;
    isSMFormedOutline?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSearchEntityType = 'unknown' | 'capability' | 'company' | 'document' | 'element' | 'friend' | 'item' | 'part' | 'team' | 'user' | 'version' | 'workspace' | 'project' | 'publication' | 'comment_task' | 'generic_task' | 'release_task' | 'app_store_entry' | 'folder' | 'classroom_item' | 'classroom' | 'assignment' | 'submission';

export type BtSectionGeometryFilter4161 = BtQueryFilter183 & {
    btType?: 'BTSectionGeometryFilter-4161';
} & {
    btType?: string;
    isSectionGeometry?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSectionPlaneInfo = {
    center?: Array<number>;
    normal?: Array<number>;
    tangent?: Array<number>;
};

export type BtSelectItemViewStateInfo = {
    activeSelectorId?: string;
    documentSelectors?: Array<BtDocumentSelectorInfo>;
    purpose?: string;
};

export type BtSessionCredentialInfo = {
    provider?: string;
    type?: string;
};

export type BtSetFeatureRollbackCall1899 = BtFeatureApiBase1430 & {
    btType?: 'BTSetFeatureRollbackCall-1899';
} & {
    btType?: string;
    rollbackIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSetFeatureRollbackResponse1042 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    microversionId?: BtMicroversionId366;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    rollbackIndex?: number;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtSettingInfo = {
    key?: string;
    value?: {
        [key: string]: unknown;
    };
};

export type BtSettingParam = {
    field?: string;
    key?: string;
    operation?: BtUserAppSettingOperationType;
    value?: {
        [key: string]: unknown;
    };
};

/**
 * Images are returned as base64-encoded strings.
 */
export type BtShadedViewsInfo = {
    images?: Array<Array<string>>;
};

export type BtShareEntryParams = {
    applicationId?: string;
    companyId?: string;
    connectionId?: string;
    email?: string;
    entryType?: number;
    teamId?: string;
    userId?: string;
};

export type BtShareParams = {
    connectionId?: string;
    documentId?: string;
    elementId?: string;
    encodedConfiguration?: string;
    entries?: Array<BtShareEntryParams>;
    folderId?: string;
    message?: string;
    permission?: number;
    permissionSet?: Array<string>;
    update?: boolean;
    workspaceId?: string;
};

export type BtSimplePropertyInfo = {
    displayName?: string;
    frozen?: boolean;
    propertyId?: string;
    publishState?: number;
    valueType?: BtMetadataValueType;
};

export type BtSimulationFace2147 = BtEntityFace31 & {
    btType?: 'BTSimulationFace-2147';
} & {
    bounds?: BtBoundingBox1052;
    btType?: string;
    sampleTrianglePointIndices?: BtImmutableIntArray;
    triangleNormalIndices?: BtImmutableIntArray;
    trianglePointIndices?: BtImmutableIntArray;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSimulationInstance3093 = BtmNode19 & {
    btType?: 'BTSimulationInstance-3093';
} & {
    btType?: string;
    isModal?: boolean;
    simulationId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSimulationTableColumnInfo1785 = BtTableColumnInfo1222 & {
    btType?: 'BTSimulationTableColumnInfo-1785';
} & {
    btType?: string;
    crossHighlightData?: BtTableAssemblyCrossHighlightData2675;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSingleAssemblyReferenceDisplayData1557 = BtSingleReferenceDisplayData1943 & {
    btType?: 'BTSingleAssemblyReferenceDisplayData-1557';
} & {
    assemblyDisplayData?: BtRootAssemblyDisplayData96;
    btType?: string;
    hasConfiguration?: boolean;
    occurrencesToExclude?: Array<BtOccurrence74>;
    transform?: BtbsMatrix386;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSingleReferenceDisplayData1943 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    contextWorkspaceId?: string;
    documentId?: string;
    error?: GbtErrorStringEnum;
    errorMessage?: string;
    fullElementId?: BtFullElementId756;
    isTransient?: boolean;
    name?: string;
    referenceName?: string;
    referenceNodeId?: string;
    visibility?: GbtbsFeatureVisibility;
};

export type BtSketchArcDisplayData349 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchArcDisplayData-349';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchCircleDisplayData350 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchCircleDisplayData-350';
} & {
    btType?: string;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchCompositeEntityDisplayData1093 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchCompositeEntityDisplayData-1093';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchConicDisplayData1085 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchConicDisplayData-1085';
} & {
    btType?: string;
    offset?: number;
    rho?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchEllipseDisplayData712 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchEllipseDisplayData-712';
} & {
    btType?: string;
    minorRadius?: number;
    offset?: number;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchEllipticalArcDisplayData892 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchEllipticalArcDisplayData-892';
} & {
    btType?: string;
    endParam?: number;
    minorRadius?: number;
    offset?: number;
    radius?: number;
    startParam?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchEntity25 = BtFeatureEntity34 & {
    btType?: 'BTSketchEntity-25';
} & {
    btType?: string;
    isConstruction?: boolean;
    isFromSplineControlPolygon?: boolean;
    isFromSplineHandle?: boolean;
    isTextStroke?: boolean;
    isUserPoint?: boolean;
    sketchCurveType?: GbtSketchCurveType;
    sketchEntityId?: string;
    sketchFeatureId?: string;
    solveStatus?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchEntityDisplayData354 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    points?: Array<number>;
};

export type BtSketchImageDisplayData1379 = {
    bottomLeftCorner?: BtVector3d389;
    bottomRightCorner?: BtVector3d389;
    /**
     * Type of JSON object.
     */
    btType?: string;
    entities?: Array<BtSketchEntityDisplayData354>;
    featureId?: string;
    isOnFlat?: boolean;
    points?: Array<number>;
    sourceId?: string;
    topLeftCorner?: BtVector3d389;
};

export type BtSketchLineDisplayData357 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchLineDisplayData-357';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchObjectFilter184 = BtQueryFilter183 & {
    btType?: 'BTSketchObjectFilter-184';
} & {
    btType?: string;
    isSketchObject?: boolean;
    objectType?: GbtSketchObjectType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchPointDisplayData358 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchPointDisplayData-358';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchSolveStatusFilter3657 = BtQueryFilter183 & {
    btType?: 'BTSketchSolveStatusFilter-3657';
} & {
    btType?: string;
    solveStatus?: GbtmGeomStatus;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchSplineDisplayData359 = BtSketchEntityDisplayData354 & {
    btType?: 'BTSketchSplineDisplayData-359';
} & {
    btType?: string;
    closed?: boolean;
    controlPointCount?: number;
    degree?: number;
    hasHandlesInSketch?: boolean;
    maximumParameter?: number;
    minimumParameter?: number;
    rational?: boolean;
    segment?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSketchTextDisplayData1707 = BtSketchCompositeEntityDisplayData1093 & {
    btType?: 'BTSketchTextDisplayData-1707';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSphereDescription1263 = BtSurfaceDescription1564 & {
    btType?: 'BTSphereDescription-1263';
} & {
    btType?: string;
    radius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSplineControlPolygonFilter1130 = BtQueryFilter183 & {
    btType?: 'BTSplineControlPolygonFilter-1130';
} & {
    allowsSplineControlPolygon?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSplineDescription2118 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    controlPoints?: Array<number>;
    degree?: number;
    direction?: BtVector3d389;
    directionOrientedWithFace?: BtVector3d389;
    isPeriodic?: boolean;
    isRational?: boolean;
    knots?: Array<number>;
    origin?: BtVector3d389;
    type?: GbtCurveTypeEnum;
};

export type BtSplineHandleFilter2971 = BtQueryFilter183 & {
    btType?: 'BTSplineHandleFilter-2971';
} & {
    allowsSplineHandle?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSplineInternalPointFilter4101 = BtQueryFilter183 & {
    btType?: 'BTSplineInternalPointFilter-4101';
} & {
    allowsSplineInternalPoint?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSpunDescription657 = BtSurfaceDescription1564 & {
    btType?: 'BTSpunDescription-657';
} & {
    axis?: BtVector3d389;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * Describes a single instance of standard content.
 */
export type BtStandardContentHierarchyItem = {
    /**
     * Category for the corresponding standard content.
     */
    category?: string;
    /**
     * Class for the corresponding standard content.
     */
    class?: string;
    /**
     * Component for the corresponding standard content.
     */
    component?: string;
    /**
     * Document ID for the corresponding standard content.
     */
    id?: string;
    /**
     * Standard for the corresponding standard content.
     */
    standard?: string;
};

export type BtStandardContentParameterDescriptor = {
    displayName?: string;
    parameterId?: string;
    parameterValues?: Array<string>;
};

/**
 * Parameters that drive configuration. Used to specify the standard content component to which the custom parameter values are associated.
 */
export type BtStandardContentParameterIdAndValue = {
    parameterId?: string;
    value?: string;
};

/**
 * Non-driving custom parameters whose values are to be set.
 */
export type BtStandardContentPropertyIdAndValue = {
    propertyId?: string;
    value?: string;
};

/**
 * Specifies a standard content component along with the custom properties whose values are to be set.
 */
export type BtStandardContentSetCustomParameterSpecifier = {
    /**
     * Non-driving custom parameters whose values are to be set.
     */
    customParameters?: Array<BtStandardContentPropertyIdAndValue>;
    /**
     * Parameters that drive configuration. Used to specify the standard content component to which the custom parameter values are associated.
     */
    parameters?: Array<BtStandardContentParameterIdAndValue>;
};

export type BtStandardContentSetCustomParametersBatchRequest = {
    specifiers?: Array<BtStandardContentSetCustomParameterSpecifier>;
};

export type BtStandardContentSetCustomParametersBatchResponse = {
    responses?: Array<BtStandardContentSetCustomParametersResponse>;
};

/**
 * Indicates whether or not the individual request had an error.
 */
export type BtStandardContentSetCustomParametersError = 'NONE' | 'INVALID_PARAMETER_VALUE' | 'FAILED_TO_SPECIFY_REQUIRED_PARAMETER' | 'INVALID_PARAMETER_ID';

/**
 * Reports the status of an individual request to set custom parameter values.
 */
export type BtStandardContentSetCustomParametersResponse = {
    error?: BtStandardContentSetCustomParametersError;
    /**
     * If there was an error, this provides a more detailed description of the problem.
     */
    errorMessage?: string;
};

export type BtStringFormatBlockPattern1755 = BtStringFormatCondition683 & {
    btType?: 'BTStringFormatBlockPattern-1755';
} & {
    btType?: string;
    regExpToBlock?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtStringFormatCondition683 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    errorMessage?: string;
    shouldResetValueWhenConfirmed?: boolean;
};

export type BtStringFormatMatchPattern2446 = BtStringFormatCondition683 & {
    btType?: 'BTStringFormatMatchPattern-2446';
} & {
    btType?: string;
    regExpToMatch?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtStringMaximumLengthPattern2593 = BtStringFormatCondition683 & {
    btType?: 'BTStringMaximumLengthPattern-2593';
} & {
    btType?: string;
    maximumLength?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtStringMinimumLengthPattern895 = BtStringFormatCondition683 & {
    btType?: 'BTStringMinimumLengthPattern-895';
} & {
    btType?: string;
    minimumLength?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtStringNodeWrapper4224 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
    string?: string;
};

export type BtSubAssemblyInfo = {
    configuration?: string;
    documentId?: string;
    documentMicroversion?: string;
    documentVersion?: string;
    elementId?: string;
    /**
     * List of Assembly features including those are created by replicates.
     */
    features?: Array<BtAssemblyFeatureInfo>;
    fullConfiguration?: string;
    /**
     * List of instances including those created by patterns and replicates.
     */
    instances?: Array<BtAssemblyInstanceInfo>;
    partNumber?: string;
    /**
     * List of patterns.
     */
    patterns?: Array<BtAssemblyPatternInfo>;
    revision?: string;
};

export type BtSubstituteApproverInfo = {
    companyId?: string;
    enabled?: boolean;
    identity?: BtIdentityInfo;
};

export type BtSurfaceDescription1564 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    direction?: BtVector3d389;
    directionOrientedWithFace?: BtVector3d389;
    origin?: BtVector3d389;
    type?: GbtSurfaceTypeEnum;
};

export type BtSweepDescription1473 = BtSurfaceDescription1564 & {
    btType?: 'BTSweepDescription-1473';
} & {
    btType?: string;
    profile?: BtSplineDescription2118;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSyncAppElementParams = {
    description?: string;
    elements?: Array<string>;
};

export type BtSystemPartColorCycle1580 = BtBasePartColorCycle2614 & {
    btType?: 'BTSystemPartColorCycle-1580';
} & {
    btType?: string;
    version?: GbtPartColorCycleVersion;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTable1825 = {
    allRowValues?: Array<Array<string>>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    columnCount?: number;
    frozenColumns?: number;
    isFailed?: boolean;
    nodeId?: string;
    readOnly?: boolean;
    rowCount?: number;
    sortOrder?: BtTableSortOrder4371;
    statusMessage?: string;
    statusType?: GbtNodeStatusType;
    tableColumns?: Array<BtTableColumnInfo1222>;
    tableId?: string;
    tableRows?: Array<BtTableRow1054>;
    title?: string;
};

export type BtTableAssemblyCrossHighlightData2675 = BtTableBaseCrossHighlightData2609 & {
    btType?: 'BTTableAssemblyCrossHighlightData-2675';
} & {
    assemblyCrossHighlightItems?: Array<BtTableAssemblyCrossHighlightDataItem2659>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableAssemblyCrossHighlightDataItem2659 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    occurrencePathId?: string;
};

export type BtTableBaseCrossHighlightData2609 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableBaseRowMetadata3181 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    crossHighlightDataIfAny?: BtTableBaseCrossHighlightData2609;
};

export type BtTableCell1114 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    isEverVisible?: boolean;
    isReadOnly?: boolean;
};

export type BtTableCellParameter2399 = BtTableCell1114 & {
    btType?: 'BTTableCellParameter-2399';
} & {
    btType?: string;
    error?: string;
    info?: string;
    overrideSpec?: BtParameterSpec6;
    parameter?: BtmParameter1;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableCellParameterWithValue2122 = BtTableCellParameter2399 & {
    btType?: 'BTTableCellParameterWithValue-2122';
} & {
    btType?: string;
    value?: BtfsValue1888;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableCellPropertyParameter2983 = BtTableCellParameter2399 & {
    btType?: 'BTTableCellPropertyParameter-2983';
} & {
    aggregationSkippedFilteredOutValues?: boolean;
    btType?: string;
    isUnchanged?: boolean;
    overrideStatusType?: GbtMetadataOverrideStatusType;
    propertySourceType?: GbtMetadataSourceType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableColumnInfo1222 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    id?: string;
    nodeId?: string;
    specification?: BtTableColumnSpec1967;
};

export type BtTableColumnSpec1967 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    defaultCellSpec?: BtParameterSpec6;
    defaultColumnWidthUnits?: GbtTableColumnWidthUnits;
    defaultColumnWidthValue?: number;
    defaultHeaderName?: string;
    defaultTextAlignment?: GbtTableTextAlignment;
    isExpandable?: boolean;
    isRenamable?: boolean;
    readOnly?: boolean;
};

export type BtTableCrossHighlightData1753 = BtTableBaseCrossHighlightData2609 & {
    btType?: 'BTTableCrossHighlightData-1753';
} & {
    deterministicIdList?: Array<string>;
    featureIdList?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableResponse1546 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    sourceMicroversion?: string;
    table?: BtTable1825;
};

export type BtTableRow1054 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    columnIdToCell?: {
        [key: string]: BtTableCell1114;
    };
    id?: string;
    metaData?: BtTreeNode20;
    nodeId?: string;
    rowMetadata?: BtTableBaseRowMetadata3181;
};

export type BtTableSortOrder4371 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    isAscending?: boolean;
    nodeId?: string;
    sortingColumnId?: string;
};

export type BtTableSpec915 = BtFeatureSpec129 & {
    btType?: 'BTTableSpec-915';
} & {
    btType?: string;
    computedPropertyCategoryIds?: Array<string>;
    defaultPartCategoryId?: string;
    isComputedPropertyTable?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableTestCellDouble2509 = BtTableCell1114 & {
    btType?: 'BTTableTestCellDouble-2509';
} & {
    btType?: string;
    cellValue?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableTestCellString2112 = BtTableCell1114 & {
    btType?: 'BTTableTestCellString-2112';
} & {
    btType?: string;
    cellValue?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTaskInfo = {
    action?: string;
    approverRole?: string;
    comments?: Array<BtCommentInfo>;
    companyId?: string;
    createdAt?: string;
    creator?: BtUserSummaryInfo;
    deletable?: boolean;
    description?: string;
    documentId?: string;
    documentName?: string;
    documentType?: number;
    editable?: boolean;
    elementId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    objectId?: string;
    properties?: Array<BtMetadataPropertyInfo>;
    publishedWorkflow?: BtPublishedWorkflowInfo;
    resolvedAt?: string;
    resolvedBy?: BtUserSummaryInfo;
    roles?: Array<BtTaskRbacRoleInfo>;
    simpleName?: string;
    sourceWorkspaceOrVersionName?: string;
    state?: string;
    status?: number;
    taskItems?: Array<BtTaskItemInfo>;
    taskType?: string;
    teams?: Array<BtTaskTeamSummaryInfo>;
    thumbnail?: BtThumbnailInfo;
    transition?: string;
    users?: Array<BtTaskUserSummaryInfo>;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workflowInfo?: BtWorkflowableObjectInfo;
    workflowableObjectType?: number;
    workspaceId?: string;
};

export type BtTaskItemInfo = {
    assemblyFeatures?: Array<string>;
    bodyType?: string;
    configuration?: string;
    dataType?: string;
    documentId?: string;
    elementFeature?: string;
    elementId?: string;
    elementOccurrences?: Array<string>;
    elementQuery?: string;
    elementType?: number;
    fileName?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    mimeType?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    partId?: string;
    releaseState?: number;
    revisionId?: string;
    versionId?: string;
    viewData?: BtViewDataInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
};

/**
 * References to add to the task.
 */
export type BtTaskItemParams = {
    /**
     * Body type to reference from a task.
     */
    bodyType?: string;
    /**
     * Configuration of reference. Used to restrict a reference to a specific configuration of an element.
     */
    configuration?: string;
    /**
     * Description of the reference.
     */
    description?: string;
    /**
     * Id of a document. Required to reference a document or anything contained within it.
     */
    documentId?: string;
    /**
     * Id of an element reference. Used when referencing an element.
     */
    elementId?: string;
    /**
     * Type of element reference. Options are 0 (Part Studio), 1 (Assembly), 2 (Drawing), 3 (Feature Studio), 4 (Blob), 5 (Application), 6 (Table), 7 (Bill of Materials),  8 (Variable Studio), or 9 (Publication Item).
     */
    elementType?: number;
    /**
     * Mimetype of reference. Used when referencing blob elements.
     */
    mimeType?: string;
    /**
     * Name of the reference.
     */
    name?: string;
    /**
     * Deterministic Id of a part. Used when referencing parts.
     */
    partId?: string;
    /**
     * Id of a revision to reference from a task.
     */
    revisionId?: string;
    /**
     * Id of a document version. Used when referencing the version itself or an element or part in it.
     */
    versionId?: string;
    /**
     * Id of a document workspace. Used when referencing the workspace itself or an element or part in it.
     */
    workspaceId?: string;
};

export type BtTaskListResponse = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtTaskInfo>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
    taskTypes?: Array<BtTaskTypeInfo>;
};

export type BtTaskRbacRoleInfo = {
    acted?: boolean;
    active?: boolean;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    predefinedRole?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtTaskTeamSummaryInfo = {
    acted?: boolean;
    active?: boolean;
    canMove?: boolean;
    connectionName?: string;
    connectionNames?: Array<string>;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isContainer?: boolean;
    isEnterpriseOwned?: boolean;
    isExternalConnectionResource?: boolean;
    isMutable?: boolean;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    owner?: BtOwnerInfo;
    parentId?: string;
    predefinedTeam?: number;
    predefinedTeamMutable?: boolean;
    projectId?: string;
    resourceType?: string;
    treeHref?: string;
    unparentHref?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtTaskTypeInfo = {
    displayName?: string;
    id?: string;
    name?: string;
};

export type BtTaskUserSummaryInfo = {
    acted?: boolean;
    company?: BtCompanySummaryInfo;
    documentationName?: string;
    documentationNameOverride?: string;
    email?: string;
    firstName?: string;
    globalPermissions?: GlobalPermissionInfo;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    image?: string;
    invitationState?: number;
    isExternal?: boolean;
    isGuest?: boolean;
    isLight?: boolean;
    isOnshapeSupport?: boolean;
    lastLoginTime?: string;
    lastName?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    personalMessageAllowed?: boolean;
    source?: number;
    state?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtTeamInfo = BtTeamSummaryInfo & {
    jsonType?: 'team';
} & {
    admin?: boolean;
    member?: boolean;
    size?: number;
};

export type BtTeamMemberInfo = {
    admin?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    member?: BtUserSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    team?: BtTeamSummaryInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtTeamSummaryInfo = {
    active?: boolean;
    canMove?: boolean;
    connectionName?: string;
    connectionNames?: Array<string>;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isContainer?: boolean;
    isEnterpriseOwned?: boolean;
    isExternalConnectionResource?: boolean;
    isMutable?: boolean;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    owner?: BtOwnerInfo;
    parentId?: string;
    predefinedTeam?: number;
    predefinedTeamMutable?: boolean;
    projectId?: string;
    resourceType?: string;
    treeHref?: string;
    unparentHref?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtTessellatedGeometry2576 = BtEntityGeometry35 & {
    btType?: 'BTTessellatedGeometry-2576';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTessellationProperties927 = {
    angularTolerance?: number;
    /**
     * Type of JSON object.
     */
    btType?: string;
    chordalTolerance?: number;
    nodeId?: string;
    tessellationBudget?: number;
};

export type BtTextObjectFilter1515 = BtQueryFilter183 & {
    btType?: 'BTTextObjectFilter-1515';
} & {
    btType?: string;
    isText?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTextStrokeFilter461 = BtQueryFilter183 & {
    btType?: 'BTTextStrokeFilter-461';
} & {
    btType?: string;
    isStroke?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtThumbnailInfo = {
    href?: string;
    id?: string;
    secondarySizes?: Array<Array<BtThumbnailSizeInfo>>;
    sizes?: Array<BtThumbnailSizeInfo>;
};

export type BtThumbnailSizeInfo = {
    href?: string;
    mediaType?: string;
    renderMode?: string;
    sheetName?: string;
    size?: string;
    uniqueId?: string;
    viewOrientation?: string;
};

export type BtToleranceSpec3441 = BtFeatureSpec129 & {
    btType?: 'BTToleranceSpec-3441';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtToleranceString3274 = BtmNode19 & {
    btType?: 'BTToleranceString-3274';
} & {
    btType?: string;
    classification?: string;
    lower?: string;
    upper?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTolerantValueDisplayData3483 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    fitClass?: string;
    isAngle?: boolean;
    isDefined?: boolean;
    lowerTolerance?: number;
    nominalValue?: number;
    precision?: GbtTolerancePrecision;
    toleranceType?: GbtToleranceType;
    upperTolerance?: number;
};

export type BtTorusDescription1834 = BtSurfaceDescription1564 & {
    btType?: 'BTTorusDescription-1834';
} & {
    axis?: BtVector3d389;
    btType?: string;
    majorRadius?: number;
    minorRadius?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * Transition types(SUBMIT, APPROVE, REJECT)
 */
export type BtTransitionType = 'DEFAULT' | 'SUBMIT' | 'APPROVE' | 'APPROVE_DIRECT' | 'REJECT' | 'DELETE' | 'COMMENT' | 'REASSIGN_TASK';

export type BtTranslateFormatParams = {
    /**
     * If true, parts with faults are imported. If false, faulty parts are omitted.
     */
    allowFaultyParts?: boolean;
    /**
     * Determines the maximum angular deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
     */
    angularTolerance?: number;
    blobElementId?: string;
    blobMicroversionId?: string;
    /**
     * Folder id where to store the exported model.
     */
    cloudObjectId?: string;
    /**
     * Account id to access the cloud storage.
     */
    cloudStorageAccountId?: string;
    colorMethod?: string;
    /**
     * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
     */
    configuration?: string;
    connectionId?: string;
    createComposite?: boolean;
    currentSheetOnly?: boolean;
    /**
     * The name of the exported file.
     */
    destinationName?: string;
    /**
     * Determines the maximum distance deviation, between the analytical surface and its triangulation. Lower values result in a finer geometry and higher values result in coarser geometry.
     */
    distanceTolerance?: number;
    /**
     * The id of the element in which to perform the operation.
     */
    elementId?: string;
    /**
     * An array of element ids for multi-element export.
     */
    elementIds?: Array<string>;
    /**
     * Use `true` if a link in an email should be sent.
     */
    emailLink?: boolean;
    /**
     * Message to send in the email body along with the download link.
     */
    emailMessage?: string;
    /**
     * Subject to send the email with.
     */
    emailSubject?: string;
    /**
     * List of email addresses to send the email to.
     */
    emailTo?: Array<string>;
    /**
     * Set to `true` to evaluate the export rule for the given `formatName` and to include an `exportRuleFileName` value in the response.
     */
    evaluateExportRule?: boolean;
    /**
     * Whether or not to exclude hidden parts from export.
     */
    excludeHiddenEntities?: boolean;
    excludeOffSheetContent?: boolean;
    extractAssemblyHierarchy?: boolean;
    flatten?: boolean;
    flattenAssemblies?: boolean;
    foreignId?: string;
    /**
     * The name of the file format.
     */
    formatName: string;
    /**
     * Id of the user who does the export.
     */
    fromUserId?: string;
    getyAxisIsUp?: boolean;
    /**
     * Whether parts should be exported as a group or individually in a .zip file.
     */
    grouping?: boolean;
    hideInspectionItems?: boolean;
    /**
     * For multiple elements export, use `true` if export rule shouldn't be applied for all elements.
     */
    ignoreExportRulesForContents?: boolean;
    imageHeight?: number;
    imageWidth?: number;
    importAppearances?: boolean;
    importInBackground?: boolean;
    importMaterialDensity?: boolean;
    importWithinDocument?: boolean;
    /**
     * Whether topology ids should be exported as parasolid attributes.
     */
    includeExportIds?: boolean;
    joinAdjacentSurfaces?: boolean;
    level?: string;
    /**
     * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
     */
    linkDocumentId?: string;
    /**
     * The id of the workspace through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
     */
    linkDocumentWorkspaceId?: string;
    /**
     * Determines the maximum of a triangle edge length. Lower values result in a finer geometry and higher values result in coarser geometry.
     */
    maximumChordLength?: number;
    /**
     * Send notification to the user client.
     */
    notifyUser?: boolean;
    /**
     * IDs of the occurrences to retrieve. Use comma-separated IDs for multiple instances (example: occurrencesToExport=JHK,JHD).
     */
    occurrencesToExport?: string;
    onePartPerDoc?: boolean;
    originalForeignId?: string;
    parasolidMode?: GbtParasolidEncodingType;
    parentId?: string;
    /**
     * IDs of the parts to retrieve. Use comma-separated IDs for multiple parts (example: partIds=JHK,JHD).
     */
    partIds?: string;
    partsExportFilter?: BtPartsExportFilter4308;
    /**
     * A password to protect the email with.
     */
    password?: string;
    /**
     * Use `true` if the email should be protected with a password.
     */
    passwordRequired?: boolean;
    pdfVersion?: string;
    processedForeignId?: string;
    projectId?: string;
    proxyDocumentId?: string;
    proxyElementId?: string;
    proxyWorkspaceVersion?: string;
    proxyWorkspaceVersionId?: string;
    /**
     * Determines export resolution of fine, medium, or coarse
     */
    resolution?: 'fine' | 'medium' | 'coarse';
    rhinoVersion?: GbtRhinoVersions;
    selectablePdfText?: boolean;
    /**
     * Use `true` if email copy should be sent to the user who does the export.
     */
    sendCopyToMe?: boolean;
    sheetIndices?: Array<number>;
    showOverriddenDimensions?: boolean;
    skipBodyshop?: boolean;
    sourceName?: string;
    specifyMaterialData?: boolean;
    specifyUnits?: boolean;
    splinesAsPolylines?: boolean;
    splitAssembliesIntoMultipleDocuments?: boolean;
    stepParasolidPreprocessingOption?: GbtPreProcessParasolidOption;
    /**
     * Export STEP in version: `AP242` | `AP203` | `AP214`
     */
    stepVersionString?: string;
    stlMode?: GbtStlEncodingType;
    /**
     * Create a blob with exported file in the source document.
     */
    storeInDocument?: boolean;
    textAsGeometry?: boolean;
    textOption?: string;
    /**
     * Automatically download a translated file.
     */
    triggerAutoDownload?: boolean;
    unit?: string;
    uploadId?: string;
    useFileNameToSetSinglePartName?: boolean;
    useGltfCompression?: boolean;
    useIGESImportPostProcessing?: boolean;
    useIgesCompatibilityMode?: boolean;
    /**
     * Number of days to keep the link valid for.
     */
    validForDays?: number;
    /**
     * Parasolid version number as string. Use '0' for the latest.
     */
    versionString?: string;
};

export type BtTranslationRequestImportInfo = {
    documentId?: string;
    failureReason?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    requestElementId?: string;
    requestState?: BtTranslationRequestState;
    resultDocumentId?: string;
    resultElementIds?: Array<string>;
    resultExternalDataIds?: Array<string>;
    resultWorkspaceId?: string;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
};

export type BtTranslationRequestInfo = {
    documentId?: string;
    /**
     * The file name after evaluating a rule for the given `formatName`. `NULL` if `evaluateExportRule=false` or if the export rule is not found.
     */
    exportRuleFileName?: string;
    failureReason?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    requestElementId?: string;
    requestState?: BtTranslationRequestState;
    resultDocumentId?: string;
    resultElementIds?: Array<string>;
    resultExternalDataIds?: Array<string>;
    resultWorkspaceId?: string;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workspaceId?: string;
};

export type BtTranslationRequestState = 'ACTIVE' | 'DONE' | 'FAILED';

export type BtTreeEdit13 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    editType?: EditType;
    newNodes?: Array<BtTreeNode20>;
    nothing?: boolean;
};

export type BtTreeNode20 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
};

export type BtTrialInfo = {
    paidCustomerInPast?: boolean;
    planId?: string;
    planInterval?: string;
    seats?: number;
    trialDaysRemaining?: number;
    trialEndDate?: string;
    trialStartDate?: string;
};

export type BtUiFeatureStudioChecksum2438 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    crc32?: number;
    microversion?: BtMicroversionId366;
};

export type BtUiSelection1185 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    deterministicIdList?: Array<string>;
    id?: string;
    occurrence?: BtOccurrence74;
    tableRowId?: string;
    type?: GbtUiSelectionType;
};

export type BtUnchangedElementInfo = {
    connectionId?: string;
    elementId?: string;
    unchangedReferences?: Array<BtUnchangedReferenceInfo>;
};

export type BtUnchangedReferenceInfo = {
    metadataUnchanged?: boolean;
    nodeIds?: Array<string>;
    toRevision?: BtRevisionInfo;
};

export type BtUniqueDocumentItemParams = {
    apiConfiguration?: string;
    documentId?: string;
    elementId?: string;
    elementType?: string;
    partId?: string;
    partNumber?: string;
    revision?: string;
    versionId?: string;
    workspaceId?: string;
};

export type BtUnitInfo = {
    defaultUnits?: BtDefaultUnitsInfo;
    /**
     * Specifies the display precision for every supported unit.
     */
    unitsDisplayPrecision?: {
        [key: string]: number;
    };
};

export type BtUnitsMaximumDisplayPrecisionInfo = {
    unitsDisplayPrecision?: {
        [key: string]: number;
    };
};

export type BtUpdateFeaturesCall1748 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    features?: Array<BtmFeature134>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
    updateSuppressionAttributes?: boolean;
};

export type BtUpdateFeaturesResponse1333 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureStates?: {
        [key: string]: BtFeatureState1688;
    };
    features?: Array<BtmFeature134>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtUpdateMeshUnitsParams = {
    units?: string;
};

export type BtUpdateReferenceParams = {
    connectionId?: string;
    editDescription?: string;
    referenceUpdates?: Array<UpdateParams>;
};

export type BtUpdateReleasePackageParams = {
    empty?: boolean;
    itemIds?: Array<string>;
    items?: Array<BtReleasePackageItemParams>;
    manuallyRemovedItemIds?: Array<string>;
    properties?: Array<BtPropertyValueParam>;
};

export type BtUpdateTaskParams = {
    /**
     * Use to transfer task ownership to the company.
     */
    companyId?: string;
    /**
     * References to remove from the task.
     */
    deleteItemIds?: Array<string>;
    descriptionParamValue?: string;
    /**
     * References to add to the task.
     */
    itemParams?: Array<BtTaskItemParams>;
    nameParamValue?: string;
    /**
     * Task metadata properties.
     */
    propertyValues?: Array<BtPropertyValueParam>;
    workflowId?: string;
};

export type BtUserAdminInfo = BtUserInfo & {
    jsonType?: 'BTUserAdminInfo';
} & {
    discount?: BtDiscount;
    invitationId?: string;
    invitedByEmail?: string;
    invitedDocumentId?: string;
    isTrialRequest?: boolean;
    privacyConsents?: Array<BtPrivacyConsentInfo>;
    userMetrics?: BtUserMetricsInfo;
};

export type BtUserAdminSummaryInfo = BtUserSummaryInfo & {
    jsonType?: 'BTUserAdminSummaryInfo';
} & {
    activePlanId?: string;
    billingUpdateRequired?: boolean;
    companyRoles?: Array<CompanyRole>;
    createdAt?: string;
    forumId?: string;
    systemUser?: boolean;
    totpEnabled?: boolean;
};

export type BtUserAppMessageBody = {
    appElementSessionId?: string;
    clientId?: string;
    data?: string;
    event?: string;
    identityId?: string;
    messageId?: string;
    settingType?: BtApplicationSettingsType;
    timestamp?: string;
    webhookId?: string;
};

export type BtUserAppSettingOperationType = 'ADD' | 'REMOVE' | 'UPDATE';

export type BtUserAppSettingsInfo = {
    settings?: Array<BtSettingInfo>;
};

export type BtUserAppSettingsParams = {
    settings?: Array<BtSettingParam>;
};

export type BtUserBasicSummaryInfo = BtBaseInfo & {
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    image?: string;
    isOnshapeSupport?: boolean;
    /**
     * Name of the resource.
     */
    name?: string;
    state?: number;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
} & {
    jsonType: string;
};

export type BtUserDetailSummaryInfo = BtUserBasicSummaryInfo & {
    jsonType: 'user-detail-summary';
} & {
    documentationName?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
};

export type BtUserInfo = BtUserSummaryInfo & {
    jsonType?: 'userinfo';
} & {
    activePlan?: BtBillingPlanInfo;
    activePlanId?: string;
    activePurchases?: Array<BtPurchaseInfo>;
    activeTrialInfo?: BtTrialInfo;
    b2cId?: string;
    billingUpdateRequired?: boolean;
    cadSystemAtSignup?: string;
    countryCode?: string;
    createdAt?: string;
    credential?: BtSessionCredentialInfo;
    defaultCompanyName?: string;
    description?: string;
    deviceInfo?: BtDeviceLoginSecretInfo;
    discounts?: Array<BtDiscountInfo>;
    enterprise?: boolean;
    eulaId?: string;
    eulaRequired?: boolean;
    evalCenter?: boolean;
    forumId?: string;
    intendedUse?: number;
    lastTrialInfo?: BtTrialInfo;
    needToResetClientCacheTime?: string;
    needToShowNewWalkthrough?: boolean;
    ownPurchase?: BtPurchaseInfo;
    phoneNumber?: string;
    proDiscoveryTrialRejected?: boolean;
    productType?: Array<string>;
    redirectUrl?: string;
    role?: number;
    roles?: Array<BtRole>;
    rumEnabled?: boolean;
    showRenewStudentPages?: boolean;
    startupPage?: number;
    systemUser?: boolean;
    totpEnabled?: boolean;
    tracingEnabled?: boolean;
    trialInfos?: Array<BtTrialInfo>;
};

export type BtUserMetricsInfo = {
    createdDocuments?: number;
    hasRecentlyOpenedDocuments?: boolean;
    hasSharedDocuments?: boolean;
    hasTrashedDocuments?: boolean;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    privateDocuments?: number;
    publicDocuments?: number;
    sharedDocuments?: number;
    userAccountLimitsCrossed?: boolean;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtUserOAuth2SummaryInfo = BtUserSummaryInfo & {
    jsonType?: 'BTUserOAuth2SummaryInfo';
} & {
    clientId?: string;
    companyPlan?: boolean;
    oauth2Scopes?: number;
    planGroup?: string;
    role?: number;
    roles?: Array<BtRole>;
};

export type BtUserSettingsInfo = {
    axisRotationLock?: boolean;
    commonUnits?: BtCommonUnitsInfo;
    customColors?: Array<string>;
    defaultUnits?: BtDefaultUnitsInfo;
    displayAssemblyProperties?: boolean;
    drawingBackgroundId?: number;
    enforceApplicationAcl?: boolean;
    exportDrawingOptions?: string;
    exportSolidOptions?: string;
    graphicsRenderMode?: string;
    graphicsSmoothEdge?: string;
    highlightLaminarEdges?: string;
    id?: string;
    importOptions?: string;
    isolateEnableSelectionDesire?: boolean;
    isolateHideTransparent?: string;
    isolateOpacitySliderValue?: number;
    locale?: string;
    makeTransparentEnableSelectionDesire?: boolean;
    makeTransparentOpacitySliderValue?: number;
    materialLibrarySettings?: BtMaterialLibrarySettingsInfo;
    miniToolbarSettings?: string;
    mouseActions?: string;
    perspectiveModeOn?: string;
    previousSketchFont?: string;
    reverseScrollWheelZoomDirection?: boolean;
    selectItemViewStateInfos?: Array<BtSelectItemViewStateInfo>;
    sketchShowConstraints?: boolean;
    sketchShowErrors?: boolean;
    sketchShowExpressions?: boolean;
    startupPage?: number;
    substituteApprovers?: Array<BtSubstituteApproverInfo>;
    theme?: number;
    unitsDisplayPrecision?: {
        [key: string]: number;
    };
    unitsMaximumDisplayPrecision?: BtUnitsMaximumDisplayPrecisionInfo;
    use24HourTime?: boolean;
    useDecimalComma?: boolean;
    viewManipulationMouseKeyMapping?: BtViewManipulationMouseKeyMappingInfo;
    viewMappingId?: number;
};

export type BtUserState = 'DELETED' | 'ACTIVE' | 'INACTIVE' | 'REQUESTED' | 'APPROVED' | 'REQUEST_EXPIRED' | 'ALL' | 'MARKED_FOR_DELETION';

export type BtUserSummaryInfo = BtUserDetailSummaryInfo & {
    jsonType?: 'user-summary';
} & {
    company?: BtCompanySummaryInfo;
    documentationNameOverride?: string;
    globalPermissions?: GlobalPermissionInfo;
    invitationState?: number;
    isExternal?: boolean;
    isGuest?: boolean;
    isLight?: boolean;
    lastLoginTime?: string;
    personalMessageAllowed?: boolean;
    source?: number;
};

export type BtValueAndUse4696 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    use?: GbtValueUse;
    value?: BtfsValue1888;
};

/**
 * Variables in the VariableTable
 */
export type BtVariableInfo = {
    /**
     * Variable description
     */
    description?: string;
    /**
     * Variable expression
     */
    expression: string;
    /**
     * Variable name
     */
    name: string;
    type: GbtVariableType;
    /**
     * Variable formatted value
     */
    value: string;
};

export type BtVariableParams = {
    configuredDescription?: BtConfiguredValue;
    configuredExpression?: BtConfiguredValue;
    /**
     * Variable description, if not configured
     */
    description?: string;
    /**
     * Variable definition expression, if not configured
     */
    expression?: string;
    /**
     * Variable name
     */
    name: string;
    /**
     * VariableType name, from FeatureScript VariableType
     */
    type: string;
};

/**
 * List of variable studio references
 */
export type BtVariableStudioReferenceInfo = {
    /**
     * Optional map of configuration parameter id to value
     */
    configurationIdToValue?: {
        [key: string]: BtOptionallyConfiguredValue;
    };
    /**
     * Whether all variables in the referenced variable studio are included
     */
    entireVariableStudio?: boolean;
    /**
     * DocumentId of referenced variable studio, blank for intra-workspace references
     */
    referenceDocumentId?: string;
    /**
     * ElementId of referenced variable studio
     */
    referenceElementId: string;
    /**
     * VersionId of referenced variable studio, blank for intra-workspace references
     */
    referenceVersionId?: string;
    /**
     * Optional list of selected variables
     */
    variableNames?: Array<string>;
};

export type BtVariableStudioReferenceListInfo = {
    /**
     * List of variable studio references
     */
    references?: Array<BtVariableStudioReferenceInfo>;
};

export type BtVariableStudioReferenceSpec5278 = BtFeatureSpec129 & {
    btType?: 'BTVariableStudioReferenceSpec-5278';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtVariableStudioScopeInfo = {
    /**
     * Whether variable studio is automatically inserted into part studios and assemblies in the workspace
     */
    isAutomaticallyInserted: boolean;
};

export type BtVariableTableInfo = {
    variableStudioReference?: BtVariableStudioReferenceInfo;
    /**
     * Variables in the VariableTable
     */
    variables: Array<BtVariableInfo>;
};

export type BtVariableTableRowMetadata3912 = BtTableBaseRowMetadata3181 & {
    btType?: 'BTVariableTableRowMetadata-3912';
} & {
    btType?: string;
    crossHighlightData?: BtTableBaseCrossHighlightData2609;
    info?: string;
    isFullyEditable?: boolean;
    isRecursiveImport?: boolean;
    lastWritingFeatureNodeId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtVector2d1812 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    x?: number;
    y?: number;
};

export type BtVector3d389 = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    x?: number;
    y?: number;
    z?: number;
};

export type BtVersionGraphMode = 'ALL_BRANCHES' | 'ACTIVE_BRANCH' | 'ALL_BRANCHES_WITH_WORKSPACES' | 'ACTIVE_BRANCH_WITH_PARENTS';

export type BtVersionInfo = {
    createdAt?: string;
    creator?: BtUserBasicSummaryInfo;
    description?: string;
    documentId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    lastModifier?: BtUserBasicSummaryInfo;
    metadataWorkspaceId?: string;
    microversion?: string;
    modifiedAt?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    overrideDate?: string;
    parent?: string;
    purpose?: number;
    thumbnail?: BtThumbnailInfo;
    type?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtVersionOrWorkspaceMergeInfo = {
    defaultMergeStrategy?: BtMergeStrategy;
    id?: string;
    mergeStrategyElementOverrides?: {
        [key: string]: BtMergeStrategy;
    };
    type?: string;
};

export type BtVersionOrWorkspaceParams = {
    clientInteractionMode?: string;
    description?: string;
    documentId?: string;
    fromHistory?: boolean;
    isRelease?: boolean;
    microversionId?: string;
    missingBomTableTemplateId?: string;
    name?: string;
    publishVersion?: boolean;
    purpose?: number;
    readOnly?: boolean;
    versionId?: string;
    workspaceId?: string;
};

export type BtViewDataInfo = {
    angle?: number;
    cameraViewport?: Array<number>;
    isPerspective?: boolean;
    viewMatrix?: Array<number>;
};

export type BtViewDataParams = {
    angle?: number;
    cameraViewport?: Array<number>;
    isPerspective?: boolean;
    viewMatrix?: Array<number>;
};

/**
 * Describes a view feature.
 */
export type BtViewFeatureBaseInfo = {
    /**
     * The ID of the view feature.
     */
    id?: string;
    /**
     * The name of the view feature.
     */
    name?: string;
};

export type BtViewManipulationMouseKeyMappingInfo = {
    axisRotate3DMapping?: Array<BtKeyMouseValuesInfo>;
    pan2DMapping?: Array<BtKeyMouseValuesInfo>;
    pan3DMapping?: Array<BtKeyMouseValuesInfo>;
    rotate3DMapping?: Array<BtKeyMouseValuesInfo>;
    zoom2DMapping?: Array<BtKeyMouseValuesInfo>;
    zoom3DMapping?: Array<BtKeyMouseValuesInfo>;
};

export type BtWebClientCapabilitiesParams = {
    angleInstancedArrays?: boolean;
    clientBrowserStorageQuota?: number;
    clientBrowserStorageUsed?: number;
    compressedTextureS3tc?: boolean;
    depthTexture?: boolean;
    devicePixelRatio?: number;
    drawBuffers?: boolean;
    extTextureFilterAnisotropic?: boolean;
    has3dMouse?: boolean;
    oesElementIndexUint?: boolean;
    oesStandardDerivatives?: boolean;
    oesTextureFloat?: boolean;
    oesTextureFloatLinear?: boolean;
    oesTextureHalfFloat?: boolean;
    oesTextureHalfFloatLinear?: boolean;
    oesVertexArrayObject?: boolean;
    renderer?: string;
    screenHeight?: number;
    screenWidth?: number;
    supportsWebGL2?: boolean;
    supportsWebGPU?: boolean;
    vendor?: string;
};

export type BtWebRendererPerformanceMeasurementParams = {
    linesPerSecond?: number;
    renderer?: string;
    trianglesPerSecond?: number;
    vendor?: string;
};

export type BtWebhookInfo = {
    /**
     * Company admins can register webhooks to listen to all company events.
     */
    companyId?: string;
    createdBy?: BtUserSummaryInfo;
    data?: string;
    description?: string;
    droppedEventCount?: number;
    /**
     * List of events for which webhook callback is invoked.
     */
    events?: Array<string>;
    /**
     * Applications can pass this parameter as X-Session-ID with every REST call to distinguish webhooks triggered by self.
     */
    externalSessionId?: string;
    filter?: string;
    folderId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Transient webhooks are automatically cleaned up after a period of inactivity.
     */
    isTransient?: boolean;
    /**
     * Name of the resource.
     */
    name?: string;
    options?: BtWebhookOptions;
    projectId?: string;
    url?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtWebhookLifecycleMessageBody = {
    appElementSessionId?: string;
    data?: string;
    event?: string;
    messageId?: string;
    timestamp?: string;
    webhookId?: string;
};

export type BtWebhookOptions = {
    collapseEvents?: boolean;
};

export type BtWebhookParams = {
    clientId?: string;
    /**
     * Company admins can register webhooks to listen to all company events.
     */
    companyId?: string;
    data?: string;
    description?: string;
    documentId?: string;
    elementId?: string;
    /**
     * List of events for which webhook callback is invoked.
     */
    events?: Array<string>;
    /**
     * Applications can pass this parameter as X-Session-ID with every REST call to distinguish webhooks triggered by self.
     */
    externalSessionId?: string;
    filter?: string;
    folderId?: string;
    id?: string;
    /**
     * Transient webhooks are automatically cleaned up after a period of inactivity.
     */
    isTransient?: boolean;
    linkDocumentId?: string;
    options?: BtWebhookOptions;
    partId?: string;
    projectId?: string;
    url?: string;
    userId?: string;
    versionId?: string;
    workspaceId?: string;
};

export type BtWidthMateDisplayData2888 = BtAssemblyFeatureDisplayData1783 & {
    btType?: 'BTWidthMateDisplayData-2888';
} & {
    btType?: string;
    location?: BtCoordinateSystem387;
    mateConnectorIds?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtWorkflowActionInfo = {
    action?: string;
    allowIfApprovers?: boolean;
    allowIfNoApprovers?: boolean;
    alwaysAllow?: boolean;
    isAdminOverride?: boolean;
    isApproverAction?: boolean;
    isCreatorOverride?: boolean;
    label?: string;
    requiredProperties?: Array<string>;
    tooltip?: string;
    type?: BtTransitionType;
    uiHint?: string;
};

export type BtWorkflowAuditLogEntryInfo = {
    approvalOverride?: boolean;
    approverIds?: Array<string>;
    commentId?: string;
    date?: string;
    entryType?: number;
    errorMessage?: string;
    featureScriptConsole?: string;
    featureScriptNotices?: Array<string>;
    featureScriptResponse?: {
        [key: string]: unknown;
    };
    id?: string;
    objectId?: string;
    propertyUpdates?: Array<BtPropertyUpdateInfo>;
    supportCode?: string;
    userId?: string;
    workflowAction?: string;
    workflowState?: string;
    workflowTransition?: string;
};

export type BtWorkflowAuditLogInfo = {
    companyId?: string;
    debugMicroversionId?: string;
    entries?: Array<BtWorkflowAuditLogEntryInfo>;
    objectId?: string;
    objectType?: number;
    publishedWorkflowId?: BtPublishedWorkflowId;
};

export type BtWorkflowMessageBody = {
    appElementSessionId?: string;
    data?: string;
    event?: string;
    messageId?: string;
    objectId?: string;
    objectType?: string;
    timestamp?: string;
    transitionName?: string;
    webhookId?: string;
    workflowId?: string;
};

export type BtWorkflowObserverEntryType = 'USER' | 'TEAM' | 'ROLE' | 'ALIAS';

/**
 * Array of items in the current page.
 */
export type BtWorkflowObserverOptionInfo = {
    alias?: BtAliasInfo;
    company?: BtCompanySummaryInfo;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    identityType?: number;
    role?: BtRbacRoleInfo;
    team?: BtTeamSummaryInfo;
    user?: BtUserSummaryInfo;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtWorkflowObserverState = 'NONE' | 'APPROVED' | 'REJECTED' | 'OVERRIDDEN';

export type BtWorkflowPropertyInfo = {
    aggregationSkippedFilteredOutValues?: boolean;
    computedAssemblyProperty?: boolean;
    computedProperty?: boolean;
    computedPropertyError?: string;
    computedPropertyEvalInfo?: string;
    dateFormat?: string;
    dirty?: boolean;
    editable?: boolean;
    editableInUi?: boolean;
    enumValues?: Array<BtMetadataEnumValueInfo>;
    hideInUi?: boolean;
    isApproverProperty?: boolean;
    isNotifierProperty?: boolean;
    multivalued?: boolean;
    name?: string;
    propertyId?: string;
    /**
     * 0: Unknown | 1: Not computed | 2: Computed without override | 3: Computed with override | 4: Computed with subassembly overrides | 5: Overridden
     */
    propertyOverrideStatus?: number;
    propertySource?: number;
    required?: boolean;
    schemaId?: string;
    teamsOnly?: boolean;
    uiHints?: BtMetadataPropertyUiHintsInfo;
    usersOnly?: boolean;
    validator?: BtMetadataPropertyValidatorInfo;
    valueType?: string;
};

export type BtWorkflowSnapshotInfo = {
    actions?: Array<BtWorkflowActionInfo>;
    approverIds?: Array<string>;
    canBeDiscarded?: boolean;
    currentStateDisplayName?: string;
    debugMicroversionId?: string;
    errorMessage?: string;
    isCreator?: boolean;
    isDiscarded?: boolean;
    isFrozen?: boolean;
    isSetup?: boolean;
    metadataState?: string;
    notifierIds?: Array<string>;
    state?: BtWorkflowStateInfo;
    usesExternalPlm?: boolean;
};

export type BtWorkflowStateInfo = {
    approverSourceProperty?: string;
    displayName?: string;
    editPermissions?: Array<string>;
    editableProperties?: Array<string>;
    name?: string;
    nonEditableProperties?: Array<string>;
    notifierSourceProperty?: string;
    requiredItemProperties?: Array<string>;
    requiredProperties?: Array<string>;
};

export type BtWorkflowableObjectInfo = {
    companyId?: string;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    documentId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    properties?: Array<BtWorkflowPropertyInfo>;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workflow?: BtWorkflowSnapshotInfo;
    workflowId?: BtPublishedWorkflowId;
};

export type BtWorkflowableObjectObserver = {
    adminOverride?: boolean;
    approvalDate?: string;
    approvalState?: BtWorkflowObserverState;
    approverId?: string;
    approverName?: string;
    associatedStates?: string;
    companyId?: string;
    createdAt?: string;
    createdBy?: string;
    creatorOverride?: boolean;
    description?: string;
    entryId?: string;
    entryType?: BtWorkflowObserverEntryType;
    id?: string;
    isExternal?: boolean;
    modifiedAt?: string;
    modifiedBy?: string;
    name?: string;
    new?: boolean;
    objectId?: string;
    observationType?: number;
    propertyId?: string;
    rejectionDate?: string;
    removable?: boolean;
};

export type BtWorkspaceInfo = {
    canDelete?: boolean;
    createdAt?: string;
    creator?: BtUserBasicSummaryInfo;
    description?: string;
    documentId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isReadOnly?: boolean;
    lastModifier?: BtUserBasicSummaryInfo;
    microversion?: string;
    modifiedAt?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    overrideDate?: string;
    parent?: string;
    parents?: Array<BtVersionInfo>;
    protectionRule?: BtWorkspaceProtectionRuleOptions;
    state?: BtObjectState;
    thumbnail?: BtThumbnailInfo;
    type?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
};

export type BtWorkspaceMessageBody = BtDocumentMessageBody & {
    /**
     * The resultant document microverion if applicable created due to workspace modification.
     */
    documentMicroversionId?: string;
};

export type BtWorkspaceProtectionRuleOptions = 'OPEN' | 'MERGE' | 'FAST_FORWARD_MERGE';

export type BtZipFileInfo = {
    files?: Array<string>;
};

export type BlobItem = BtPublicationInfoItem & {
    jsonType: 'publication-blob-item';
} & {
    dataTypeForResponse?: string;
    filename?: string;
    foreignDataId?: string;
    href?: string;
    prettyType?: string;
    safeToShow?: boolean;
    specifiedUnit?: string;
    unupdatable?: boolean;
};

export type _Buffer = {
    byteLength?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    uri?: string;
};

export type BufferModel = {
    bufferData?: {
        short?: number;
        char?: string;
        int?: number;
        long?: number;
        float?: number;
        double?: number;
        direct?: boolean;
        readOnly?: boolean;
    };
    byteLength?: number;
    name?: string;
    uri?: string;
};

export type BufferView = {
    buffer?: number;
    byteLength?: number;
    byteOffset?: number;
    byteStride?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    target?: number;
};

export type BufferViewModel = {
    bufferModel?: BufferModel;
    bufferViewData?: {
        short?: number;
        char?: string;
        int?: number;
        long?: number;
        float?: number;
        double?: number;
        direct?: boolean;
        readOnly?: boolean;
    };
    byteLength?: number;
    byteOffset?: number;
    byteStride?: number;
    name?: string;
    target?: number;
};

export type Callback = {
    empty?: boolean;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get$ref?: string;
    [key: string]: PathItem | boolean | {
        [key: string]: {
            [key: string]: unknown;
        };
    } | string | undefined;
};

export type Camera = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    orthographic?: CameraOrthographic;
    perspective?: CameraPerspective;
    type?: string;
};

export type CameraOrthographic = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    xmag?: number;
    ymag?: number;
    zfar?: number;
    znear?: number;
};

export type CameraPerspective = {
    aspectRatio?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    yfov?: number;
    zfar?: number;
    znear?: number;
};

export type Category = {
    id?: string;
    name?: string;
    plmId?: string;
};

export type CombinedSketchEntityType = {
    constraintType?: GbtConstraintType;
    entityType?: GbtSketchEntityType;
};

export type CompanyRole = {
    admin?: boolean;
    companyId?: string;
    companyName?: string;
    guest?: boolean;
    light?: boolean;
};

export type Components = {
    callbacks?: {
        [key: string]: Callback;
    };
    examples?: {
        [key: string]: Example;
    };
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    headers?: {
        [key: string]: Header;
    };
    links?: {
        [key: string]: Link;
    };
    parameters?: {
        [key: string]: Parameter;
    };
    pathItems?: {
        [key: string]: PathItem;
    };
    requestBodies?: {
        [key: string]: RequestBody;
    };
    responses?: {
        [key: string]: ApiResponse;
    };
    schemas?: {
        [key: string]: Schema;
    };
    securitySchemes?: {
        [key: string]: SecurityScheme;
    };
};

export type ConfigurationEntry = {
    parameterId?: string;
    parameterValue?: string;
};

export type ConfigurationInfoEntry = {
    explicit?: boolean;
    isCosmetic?: boolean;
    isVisible?: boolean;
    parameterAbbreviatedDisplayValue?: string;
    parameterDisplayValue?: string;
    parameterId?: string;
    parameterName?: string;
    parameterType?: number;
    parameterValue?: string;
};

export type Contact = {
    email?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    name?: string;
    url?: string;
};

export type CoordinatesInfo = {
    x?: number;
    y?: number;
    z?: number;
};

export type CoordinatesParams = {
    x?: number;
    y?: number;
    z?: number;
};

export type Discriminator = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    mapping?: {
        [key: string]: string;
    };
    propertyName?: string;
};

export type EditType = 'NOTHING' | 'NEW_ROOT' | 'MOVE' | 'CHANGE' | 'CHANGE_FIELD' | 'INSERTION' | 'DELETION' | 'LIST';

export type ElementType = 'SCALAR' | 'VEC2' | 'VEC3' | 'VEC4' | 'MAT2' | 'MAT3' | 'MAT4';

export type Encoding = {
    allowReserved?: boolean;
    contentType?: string;
    explode?: boolean;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    headers?: {
        [key: string]: Header;
    };
    style?: StyleEnum;
};

export type Entry = {
    permissionSet?: Array<string>;
    role?: BtRbacRoleInfo;
};

export type Example = {
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    externalValue?: string;
    get$ref?: string;
    summary?: string;
    value?: {
        [key: string]: unknown;
    };
    valueSetFlag?: boolean;
};

export type ExternalDocumentation = {
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    url?: string;
};

export type GbtAnnotationType = 'DATUM' | 'GTOL' | 'DIMENSION_POSITION' | 'DIMENSION' | 'WELD' | 'HOLE_CALLOUT' | 'HOLE_CALLOUT_POSITION' | 'UNKNOWN';

export type GbtAppElementAssociativeDataType = 'ONSHAPE_DRAWING_VIEW' | 'MODEL_TOPOLOGY' | 'MODEL_DEFINITION_FEATURE' | 'MODEL_DEFINITION_ENTITY' | 'UNKNOWN';

export type GbtAppElementReferenceType = 'UNKNOWN' | 'PARTSTUDIO' | 'ASSEMBLY' | 'PART' | 'FLATTENED_PART' | 'COMPOSITE_PART' | 'MESH_PART' | 'SURFACE' | 'SKETCH' | 'CURVE';

export type GbtAppearanceType = 'UNKNOWN' | 'SKETCH';

export type GbtAssemblyFeatureDisplayStatus = 'OK' | 'ERROR' | 'SUPPRESSED' | 'UNKNOWN';

export type GbtAssemblySimulationType = 'LINEAR_STATIC' | 'MODAL' | 'CONTACT_ANALYSIS' | 'UNKNOWN';

export type GbtbsFeatureVisibility = 'UNSET' | 'HIDDEN' | 'VISIBLE' | 'UNKNOWN';

export type GbtBillOfMaterialsExclusionStatus = 'NOT_EXCLUDED' | 'PARENT_EXCLUDED' | 'EXCLUDED' | 'UNKNOWN';

export type GbtBillOfMaterialsExpansionStatus = 'NOT_EXPANDABLE' | 'EXPANDED' | 'COLLAPSED' | 'UNKNOWN';

export type GbtBillOfMaterialsSuppressionStatus = 'UNSET' | 'SUPPRESSED' | 'UNSUPPRESSED' | 'UNKNOWN';

export type GbtBodyType = 'SOLID' | 'SHEET' | 'WIRE' | 'POINT' | 'MATE_CONNECTOR' | 'COMPOSITE' | 'UNKNOWN';

export type GbtComputeStatus = 'COMPUTED' | 'STALE' | 'COMPUTING' | 'ERROR' | 'UNDERDEFINED' | 'PREPARING' | 'UNKNOWN';

export type GbtConfigurationParameterType = 'ENUM' | 'BOOLEAN' | 'STRING' | 'QUANTITY';

export type GbtConfiguredParentType = 'FEATURE' | 'INSTANCE' | 'MATE' | 'MATE_CONNECTOR' | 'UNKNOWN';

export type GbtConstraintType = 'NONE' | 'COINCIDENT' | 'PARALLEL' | 'VERTICAL' | 'HORIZONTAL' | 'PERPENDICULAR' | 'CONCENTRIC' | 'MIRROR' | 'MIDPOINT' | 'TANGENT' | 'EQUAL' | 'LENGTH' | 'DISTANCE' | 'ANGLE' | 'RADIUS' | 'NORMAL' | 'FIX' | 'PROJECTED' | 'OFFSET' | 'CIRCULAR_PATTERN' | 'PIERCE' | 'LINEAR_PATTERN' | 'MAJOR_DIAMETER' | 'MINOR_DIAMETER' | 'QUADRANT' | 'DIAMETER' | 'SILHOUETTED' | 'CENTERLINE_DIMENSION' | 'INTERSECTED' | 'RHO' | 'EQUAL_CURVATURE' | 'BEZIER_DEGREE' | 'FREEZE' | 'UNKNOWN';

export type GbtCurveTypeEnum = 'OTHER' | 'LINE' | 'CIRCLE' | 'ELLIPSE' | 'BCURVE' | 'ICURVE' | 'UNKNOWN';

export type GbtDataItemFormat = 'X_T' | 'XMM' | 'STL' | 'ONSHAPE' | 'ZIP' | 'X_T_XMM_ZIP' | 'OBJ_MTL_ZIP' | 'X_B' | 'JSON' | 'UNKNOWN';

export type GbtDebugEntityColor = 'RED' | 'GREEN' | 'BLUE' | 'CYAN' | 'YELLOW' | 'MAGENTA' | 'BLACK' | 'TRANSLUCENT_PURPLE' | 'FEATURE_ERROR' | 'FEATURE_DEBUG' | 'TRANSLUCENT_GREEN' | 'TRANSLUCENT_BLUE' | 'TRANSLUCENT_CYAN' | 'TRANSLUCENT_YELLOW' | 'TRANSLUCENT_BLACK' | 'TRANSLUCENT_ORANGE' | 'TRANSLUCENT_RED' | 'TRANSLUCENT_MAGENTA' | 'ORANGE' | 'UNKNOWN';

export type GbtDebugEntityStyle = 'DEFAULT' | 'STAR' | 'WITH_START' | 'ERROR' | 'UNKNOWN';

export type GbtDisplayDataUsage = 'BASE' | 'PREVIEW_BEFORE' | 'PREVIEW_AFTER' | 'PREVIEW_FINAL' | 'COMPARE_TARGET' | 'REFERENCE_REPAIR' | 'UNKNOWN';

export type GbtEdgeTopology = 'WIRE' | 'ONE_SIDED' | 'TWO_SIDED' | 'LAMINAR' | 'UNKNOWN';

export type GbtEdgeType = 'OTHER' | 'LINE' | 'SPLINE' | 'CIRCLE' | 'ELLIPSE' | 'INTERSECTION' | 'SPCURVE' | 'POLYLINE' | 'CONIC' | 'UNKNOWN';

export type GbtElementBranchStatus = 'CREATED' | 'DELETED' | 'EDITS' | 'NOT_ON_THIS_BRANCH' | 'NO_CHANGES' | 'UNKNOWN';

export type GbtElementType = 'PARTSTUDIO' | 'ASSEMBLY' | 'DRAWING' | 'FEATURESTUDIO' | 'BLOB' | 'APPLICATION' | 'TABLE' | 'BILLOFMATERIALS' | 'VARIABLESTUDIO' | 'PUBLICATIONITEM' | 'UNKNOWN';

export type GbtEntityEdgeSmoothnessStatus = 'UNKNOWN' | 'SMOOTH' | 'NOT_SMOOTH' | 'SMOOTH_V2';

export type GbtEntityInferenceType = 'PART_ORIGIN' | 'POINT' | 'CENTROID' | 'CENTER' | 'MID_POINT' | 'TOP_AXIS_POINT' | 'MID_AXIS_POINT' | 'BOTTOM_AXIS_POINT' | 'ORIGIN_X' | 'ORIGIN_Y' | 'ORIGIN_Z' | 'LOOP_CENTER' | 'VIRTUAL_SHARP' | 'UNKNOWN';

export type GbtEntityType = 'VERTEX' | 'EDGE' | 'FACE' | 'BODY' | 'DEGENERATE_EDGE' | 'UNKNOWN';

export type GbtErrorStringEnum = 'NO_ERROR' | 'UNKNOWN_OPERATION' | 'TOO_MANY_ENTITIES_SELECTED' | 'POINTS_COINCIDENT' | 'NO_TRANSLATION_DIRECTION' | 'NO_ROTATION_AXIS' | 'NO_TANGENT_PLANE' | 'NO_TANGENT_LINE' | 'INVALID_INPUT' | 'CANNOT_RESOLVE_ENTITIES' | 'CANNOT_EVALUATE_VERTEX' | 'CANNOT_RESOLVE_PLANE' | 'CANNOT_COMPUTE_BBOX' | 'CANNOT_BE_EMPTY' | 'CACHE_WRITE_FAILED' | 'CACHE_READ_FAILED' | 'HLR_FAILED' | 'BAD_GEOMETRY' | 'INVALID_RESULT' | 'MISSING_EXT_REF' | 'READ_FAILED' | 'WRITE_FAILED' | 'WRONG_TYPE' | 'TANGENT_PROPAGATION_FAILED' | 'REGEN_ERROR' | 'COULD_NOT_COMPUTE_TRANSFORM' | 'MATE_INVALID_MATE' | 'MATECONNECTOR_INVALID_MATE' | 'MATE_TWO_MATECONNECTORS_NEEDED' | 'MATECONNECTORS_ON_SAME_OCCURRENCE' | 'MATE_OVERDEFINED' | 'MATE_INCONSISTENT' | 'BOOLEAN_NEED_ONE_SOLID' | 'BOOLEAN_INVALID' | 'BOOLEAN_INTERSECT_FAIL' | 'BOOLEAN_SAME_INPUT' | 'BOOLEAN_BAD_INPUT' | 'BOOLEAN_UNION_NO_OP' | 'BOOLEAN_INTERSECT_NO_OP' | 'BOOLEAN_SUBTRACT_NO_OP' | 'CPLANE_INPUT_MIDPLANE' | 'CPLANE_INPUT_OFFSET_PLANE' | 'CPLANE_INPUT_POINT_PLANE' | 'CPLANE_INPUT_LINE_ANGLE' | 'CPLANE_INPUT_POINT_LINE' | 'CPLANE_INPUT_THREE_POINT' | 'CPLANE_FAILED' | 'DRAFT_NO_NEUTRAL_PLANE' | 'DRAFT_NO_DRAFT_FACE' | 'DRAFT_FAILED' | 'EXTRUDE_INVALID_REF_FACE' | 'EXTRUDE_INVALID_REF_SURFACE' | 'EXTRUDE_FAILED' | 'EXTRUDE_NO_DIRECTION' | 'EXTRUDE_INVALID_ENTITIES' | 'PATTERN_INPUT_TOO_MANY_INSTANCES' | 'PATTERN_INPUT_TOO_FEW_INSTANCES' | 'PATTERN_FACE_FAILED' | 'PATTERN_NOT_ON_BODY' | 'PATTERN_BODY_FAILED' | 'TRANSFORM_TRANSLATE_INPUT' | 'TRANSFORM_TRANSLATE_BY_DISTANCE_INPUT' | 'TRANSFORM_FAILED' | 'SHELL_FAILED' | 'EDGEBLEND_SMOOTH' | 'EDGEBLEND_FAILED' | 'DIRECT_EDIT_WRONG_CONCENTRIC' | 'DIRECT_EDIT_WRONG_EQ_RADIUS' | 'DIRECT_EDIT_NO_FILLET_FACES' | 'DIRECT_EDIT_NO_OFFSET' | 'DIRECT_EDIT_CONSTRAIN_FACE_FAILED' | 'DIRECT_EDIT_REPLACE_FACE_FAILED' | 'DIRECT_EDIT_DELETE_FACE_FAILED' | 'DIRECT_EDIT_MODIFY_FILLET_FAILED' | 'DIRECT_EDIT_MODIFY_FACE_FAILED' | 'DIRECT_EDIT_MOVE_FACE_FAILED' | 'DIRECT_EDIT_OFFSET_FACE_FAILED' | 'IMPORT_PART_FAILED' | 'IMPORT_ASSEMBLY_FAILED' | 'IMPRINT_FAILED' | 'REVOLVE_FAILED' | 'REVOLVE_2ND_DIR_FAILED' | 'REVOLVE_NOT_PLANAR' | 'REVOLVE_PERPENDICULAR' | 'REVOLVE_INVALID_ENTITIES' | 'SPLIT_FAILED' | 'SPLIT_INVALID_INPUT' | 'SWEEP_INVALID_PATH' | 'SWEEP_FAILED' | 'SWEEP_PATH_FAILED' | 'SWEEP_PROFILE_FAILED' | 'WIRE_CREATION_FAILED' | 'SKETCH_NO_PLANE' | 'SKETCH_INPUT_INVALID' | 'SKETCH_NOT_ACTIVE' | 'SKETCH_SOLVER_NOT_INITIALIZED' | 'SKETCH_EVALUATION_FAILED' | 'SKETCH_MODIFICATION_FAILED' | 'SKETCH_UPDATE_FAILED' | 'SKETCH_SOLVE_FAILED' | 'SKETCH_ADD_CONSTRAINT_FAILED' | 'SKETCH_ADD_DIMENSION_FAILED' | 'SKETCH_POSITION_DIMENSION_FAILED' | 'SKETCH_CONSTRAINT_NEEDS_SKETCH_ENTITY' | 'SKETCH_CONSTRAINT_UNKNOWN' | 'SKETCH_MISSING_ENTITY' | 'SKETCH_FILLET_INVALID_POINT' | 'SKETCH_FILLET_PARALLEL' | 'SKETCH_FILLET_FAIL' | 'SKETCH_USE_FAILED' | 'SKETCH_USE_PARTIAL' | 'SKETCH_SPLINE_FAILED' | 'SKETCH_BAD_SPLINE' | 'SKETCH_DRAG_ERROR' | 'SKETCH_PROJ_FAILED' | 'SKETCH_PROJ_PARTIAL' | 'SKETCH_TANGENT_ARC_FAILED' | 'SKETCH_TANGENT_NOT_FOUND' | 'SKETCH_OFFSET_FAILED' | 'SKETCH_OFFSET_DISTANCE' | 'SKETCH_TRIM_FAILED' | 'SKETCH_INFERENCE_FAILED' | 'SKETCH_MODIFY_DIM_FAILED' | 'SKETCH_DRAG_NO_SKETCH' | 'SKETCH_INFER_DIM_FAILED' | 'SKETCH_DELETE_PTS_FAILED' | 'SKETCH_DELETE_FAILED' | 'SKETCH_ARC_FAILED' | 'SKETCH_LINE_FAILED' | 'SKETCH_CIRCLE_FAILED' | 'SKETCH_RECTANGLE_FAILED' | 'SKETCH_TANGENT_ARC_INVALID_START' | 'SKETCH_CONSTRUCTION_POINT_FAILED' | 'SYS_INTERNAL_DESERIALIZATION' | 'SYS_SERVER_EXCEPTION' | 'SYS_ERROR_REGEN' | 'SYS_ERROR_MESSAGING' | 'CANNOT_RESOLVE_ELEMENT' | 'NOTHING_SELECTED' | 'SKETCH_ANGLE_TWO_LINES' | 'SKETCH_DIMENSION_DIFF_ENTITIES' | 'SKETCH_CONSTRAINT_DIFF_ENTITIES' | 'SKETCH_CONSTRAINT_TWO_ENTITIES' | 'SKETCH_DIMENSION_TWO_ENTITIES' | 'SKETCH_COINCIDENT_FAILED' | 'SKETCH_COINCIDENT_INPUT_ERROR' | 'SKETCH_COINCIDENT_DIFF_POINTS' | 'SKETCH_CONCENTRIC_INPUT_ERROR' | 'SKETCH_CONCENTRIC_FAILED' | 'SKETCH_EQUAL_INPUT_ERROR' | 'SKETCH_EQUAL_NO_ENDS' | 'SKETCH_EQUAL_FAILED' | 'SKETCH_FIX_ONE_ENT' | 'SKETCH_FIX_FAILED' | 'SKETCH_DIR_INTERNAL' | 'SKETCH_DIR_INPUT' | 'SKETCH_HORIZONTAL_FAILED' | 'SKETCH_VERTICAL_FAILED' | 'SKETCH_OFFSET_CONSTRAINT_FAILED' | 'SKETCH_PARALLEL_CONSTRAINT_FAILED' | 'SKETCH_PARALLEL_INPUT_ERROR' | 'SKETCH_DIMENSION_INPUT_ERROR' | 'SKETCH_DIMENSION_DIST_ERROR' | 'SKETCH_DIMENSION_FAILED' | 'SKETCH_NORMAL_NEED_LINE' | 'SKETCH_NORMAL_INPUT_ERROR' | 'SKETCH_NORMAL_INPUT_NEEDED' | 'SKETCH_CANNOT_SPLIT_INTO_GROUPS' | 'SKETCH_OFFSET_BAD_PAIR' | 'SKETCH_OFFSET_INPUT_ERROR' | 'SKETCH_MIDPOINT_INPUT_ERROR' | 'SKETCH_MIDPOINT_NEED_POINT' | 'SKETCH_MIDPOINT_NEED_DIFF_POINT' | 'SKETCH_MIDPOINT_MISSING_ENDS' | 'SKETCH_MIDPOINT_MISSING_PTS' | 'SKETCH_MIDPOINT_NO_INTERNAL_LINE' | 'SKETCH_MIDPOINT_NO_COINCIDENT' | 'SKETCH_MIDPOINT_FAILED' | 'SKETCH_PERPENDICULAR_INPUT_ERROR' | 'SKETCH_PERPENDICULAR_FAILED' | 'SKETCH_POINT_LINE_ONLY' | 'SKETCH_PROJECTION_UNKNOWN' | 'SKETCH_PROJECTION_FAILED' | 'SKETCH_SIL_PROJECTION_INPUT_ERROR' | 'SKETCH_SIL_PROJECTION_MISSING_POINT' | 'SKETCH_LENGTH_DIM_INPUT_ERROR' | 'SKETCH_LENGTH_DIM_MISSING_ENDS' | 'SKETCH_LENGTH_DIM_NOT_FOUND' | 'SKETCH_LENGTH_DIM_FAILED' | 'SKETCH_RADIUS_INPUT_ERROR' | 'SKETCH_RADIUS_DIM_FAILED' | 'SKETCH_TANGENT_INPUT_ERROR' | 'SKETCH_TANGENT_FAILED' | 'PART_QUERY_FAILED' | 'PART_QUERY_MULTI' | 'MATECONNECTOR_QUERY_FAILED' | 'MATECONNECTOR_QUERY_ORIGIN_FAILED' | 'MATECONNECTOR_QUERY_AXIS_FAILED' | 'MATECONNECTOR_QUERY_CSYS_FAILED' | 'ASSEMBLY_INSERT_WILL_CAUSE_CYCLES' | 'SKETCH_MIRROR_NEED_VALID_MIRROR_LINE' | 'SKETCH_MIRROR_NEED_ENTITIES_TO_MIRROR' | 'SKETCH_MIRROR_CONSTRAINT_FAILED' | 'SKETCH_MIRROR_FAILED' | 'SELF_INTERSECTING_CURVE_SELECTED' | 'SWEEP_START_NOT_ON_PROFILE' | 'PATTERN_DIRECTIONS_PARALLEL' | 'MATE_OCCURRENCE_NOT_VALID' | 'MATE_WITHIN_SAME_GROUP' | 'EXPORT_ASSEMBLY_UNKNOWN_NODE_TYPE' | 'EXPORT_ASSEMBLY_CREATE_INSTANCE_FAILED' | 'EXPORT_PARTS_AS_XTS_NOT_A_BODY' | 'EXPORT_PARTS_AS_XTS_FAILED_TO_WRITE_XT' | 'MATECONNECTOR_OWNER_PART_NOT_RESOLVED' | 'WIRE_CREATION_PARTIAL_FAILURE' | 'SERVER_IS_IN_INVALID_STATE' | 'SKETCH_EXTEND_FAILED' | 'FOLLOW_CYCLE_ERROR' | 'SKETCH_FILLET_INVALID_RADIUS' | 'SKETCH_CONSTRAINT_COINCIDENT_TWO_ENTITIES' | 'SKETCH_CONSTRAINT_CONCENTRIC_TWO_ENTITIES' | 'SKETCH_CONSTRAINT_EQUAL_TWO_ENTITIES' | 'SKETCH_CONSTRAINT_MIDPOINT_TWO_ENTITIES' | 'EXTRUDE_NO_SELECTED_REGION' | 'EXTRUDE_NO_REGION_IN_SKETCH' | 'DELETE_SELECT_PARTS' | 'COPY_SELECT_PARTS' | 'SPLIT_NO_CHANGE' | 'MIRROR_NO_PLANE' | 'MIRROR_SELECT_PARTS' | 'PATTERN_CIRCULAR_NO_AXIS' | 'PATTERN_SELECT_FACES' | 'PATTERN_SELECT_PARTS' | 'PATTERN_LINEAR_NO_DIR' | 'SHELL_SELECT_FACES' | 'DRAFT_SELECT_NEUTRAL' | 'DRAFT_SELECT_FACES' | 'CHAMFER_SELECT_EDGES' | 'FILLET_SELECT_EDGES' | 'EXTRUDE_SURF_NO_CURVE' | 'EXTRUDE_SELECT_TERMINATING_BODY' | 'EXTRUDE_SELECT_TERMINATING_SURFACE' | 'DIRECT_EDIT_SELECT_ANCHOR' | 'REVOLVE_SURF_NO_CURVE' | 'REVOLVE_SELECT_FACES' | 'REVOLVE_SELECT_AXIS' | 'SWEEP_SELECT_PROFILE' | 'SWEEP_SELECT_PATH' | 'DIRECT_EDIT_DELETE_SELECT_FACES' | 'DIRECT_EDIT_MODIFY_FILLET_SELECT' | 'DIRECT_EDIT_MODIFY_FACE_SELECT' | 'DIRECT_EDIT_REPLACE_FACE_SELECT' | 'DIRECT_EDIT_OFFSET_FACE_SELECT' | 'DIRECT_EDIT_MOVE_FACE_SELECT' | 'SELECT_MATECONNECTOR' | 'OVERDEFINED_ASSEMBLY' | 'PART_STUDIO_UPGRADE_SUCCESSFUL' | 'PART_STUDIO_UPGRADE_FAILED' | 'PART_STUDIO_UPGRADE_NONE' | 'MATE_GROUP_OCCURRENCES_UNRESOLVED' | 'SWEEP_SURF_NO_CURVE_PROFILE' | 'MATE_RESET_HAD_NO_EFFECT' | 'MATECONNECTOR_MULTIPLE_OCCURRENCES' | 'MATECONNECTOR_OCCURRENCE_NOT_RESOLVED' | 'ELEMENT_REFERENCE_CYCLE_DETECTED' | 'MATE_OVERDEFINES_ASSEMBLY' | 'MATE_CANNOT_RESOLVE_CONNECTORS' | 'SKETCH_EXCEEDS_BOUNDS' | 'SWEEP_SELF_INT' | 'SKETCH_UNSOLVABLE_CONSTRAINT' | 'RESTRUCTURE_INVALID_SOURCE_OR_TARGET' | 'CPLANE_INPUT_CURVE_POINT' | 'TRANSFORM_OCCURRENCES_HAD_NO_EFFECT' | 'HELIX_FAILED' | 'HELIX_INPUT_CONE' | 'RENDERER_NOT_AVAILABLE' | 'RENDERER_FAILED_TO_RENDER' | 'EXPRESSION_FAILED_VALIDATION' | 'VERSION_MISMATCH_ERROR' | 'EXTRUDE_UPTO_NEXT_NO_DIVISION' | 'MATE_BETWEEN_FIXED_OCCURRENCES' | 'THICKEN_SELECT_ENTITIES' | 'THICKEN_FAILED' | 'WORKSPACE_UPGRADE_SUCCESSFUL' | 'WORKSPACE_UPGRADE_FAILED' | 'WORKSPACE_UPGRADE_NONE' | 'SKETCH_CIRCULAR_PATTERN_FAILED' | 'DIRECT_EDIT_ALL_FILLET_FACES_SELECTED' | 'DIRECT_EDIT_FAILED_TO_IDENTIFY_FILLETS' | 'PARASOLID_IMPORT_FAILED' | 'FOLLOW_LEADER_HAS_NO_FUNCTIONALITY_ERROR' | 'MIRROR_SELECT_FACES' | 'RELATION_INVALID_RELATION' | 'RELATION_INVALID_MATE' | 'GEAR_RELATION_INVALID_MATE_TYPES' | 'SCREW_RELATION_INVALID_MATE_TYPES' | 'RACK_RELATION_INVALID_MATE_TYPES' | 'ROLLING_RELATION_INVALID_MATE_TYPES' | 'LINEAR_RELATION_INVALID_MATE_TYPES' | 'RELATION_OVERDEFINED' | 'RELATION_INCONSISTENT' | 'RELATION_SAME_OCCURRENCES' | 'SKETCH_SPLIT_FAILED' | 'SKETCH_CONSTRAINT_PIERCE_TWO_ENTITIES' | 'SKETCH_PIERCE_FAILED' | 'MIRROR_FACE_FAILED' | 'MIRROR_BODY_FAILED' | 'SKETCH_CANNOT_PIERCE_WITH_PLANE' | 'WITH_SUPPORT_CODE' | 'FILLET_FAIL_SMOOTH' | 'FILLET_FAILED' | 'CHAMFER_FAIL_SMOOTH' | 'CHAMFER_FAILED' | 'BOOLEAN_OFFSET_NO_FACES' | 'MATE_OCCURRENCE_SUPPRESSED' | 'MATECONNECTOR_OCCURRENCE_SUPPRESSED' | 'SKETCH_SPLINE_NEW_POINTS_TOO_CLOSE' | 'SKETCH_SPLINE_CANNOT_DELETE_ENDPOINTS' | 'SKETCH_SPLINE_POINT_TO_DELETE_NOT_FOUND' | 'ASSEMBLY_INSERT_FAILED' | 'SKETCH_PATTERN_UNKNOWN_FAILURE' | 'SKETCH_PATTERN_TOO_LARGE' | 'SKETCH_LINEAR_PATTERN_ZERO_LENGTH' | 'SKETCH_LINEAR_PATTERN_PARALLEL_DIRECTIONS' | 'SKETCH_CIRCULAR_PATTERN_ZERO_ANGLE' | 'SKETCH_ELLIPSE_FAILED' | 'SKETCH_ELLIPSE_FAILED_TOO_SMALL' | 'DELETE_PARTS_FAILED' | 'DELETE_PARTS_PARTIAL' | 'SKETCH_ELLIPSE_RADIUS_INPUT_ERROR' | 'QUADRANT_CONSTRAINT_INPUT' | 'SKETCH_QUADRANT_FAILED' | 'SKETCH_SPLINE_TOO_FEW_POINTS' | 'SKETCH_SPLINE_NOT_INTERPOLATED_SPLINE' | 'SKETCH_SPLINE_POINTS_NOT_DELETED' | 'SKETCH_TEXT_RECTANGLE_FAILED' | 'IMPORT_DERIVED_NO_PARTS' | 'LOFT_SELECT_PROFILES' | 'LOFT_PROFILE_SINGLE_FACE' | 'LOFT_PROFILE_SOLID' | 'LOFT_PROFILE_POINT' | 'LOFT_PROFILE_FAILED' | 'LOFT_SELECT_GUIDES' | 'LOFT_GUIDE_FAILED' | 'LOFT_PERIODIC_ERROR' | 'LOFT_GUIDE_POINT_INTERSECTION' | 'LOFT_GUIDE_PROFILE_INTERSECTION' | 'LOFT_VERTEX_MATCHING' | 'LOFT_DIRECTION_ERROR' | 'LOFT_PROFILE_ALIGNMENT' | 'LOFT_GUIDE_ALIGNMENT' | 'LOFT_VERTEX_ADDITIONS' | 'LOFT_FAILED' | 'LOFT_INVALID' | 'LOFT_ALIGNMENT_INFO' | 'LOFT_VERTEX_NOT_ON_PROFILE' | 'LOFT_PROFILE_NO_INNER_LOOPS' | 'LOFT_TWO_PROFILES' | 'CANNOT_OFFSET_ELLIPSE' | 'SKETCH_MIRROR_NEEDS_LINE_AND_TWO_OTHERS' | 'SKETCH_POLYGON_BAD_SIDE_COUNT' | 'SKETCH_DIRECTIONAL_GROUP_INPUT' | 'NAMED_VIEWS_DUPLICATE_NAME' | 'SILHOUETTE_USE_FAILED' | 'PASTE_SKETCH_METRICS_FAILURE' | 'PASTE_SKETCH_LIBRARY_MISMATCH' | 'PASTE_SKETCH_CLIPBOARD_EMPTY' | 'SKETCH_MIRROR_OFFSET_SPLINE' | 'SKETCH_MIRROR_CURVE_POINT' | 'LOFT_PERIODIC_GUIDE_ERROR' | 'SHELL_SELECT_PARTS' | 'RELATION_MATE_DOES_NOT_EXIST' | 'RELATION_MATE_IS_SUPPRESSED' | 'VARIABLE_NAME_INVALID' | 'LOFT_GUIDE_INFO' | 'HOLE_NO_POINTS' | 'HOLE_FAIL_BBOX' | 'HOLE_EMPTY_SCOPE' | 'HOLE_NO_HITS' | 'WITH_EXTRA_DATA' | 'HOLE_DISJOINT' | 'SKETCH_INSERT_DWG_CONVERSION_FAILURE' | 'HOLE_CBORE_TOO_SMALL' | 'HOLE_CBORE_TOO_DEEP' | 'HOLE_CSINK_TOO_SMALL' | 'HOLE_CSINK_TOO_DEEP' | 'SWEEP_PATH_NO_CONSTRUCTION' | 'SKETCH_IMAGE_RECTANGLE_FAILED' | 'ASSEMBLY_REPLICATE_NO_VALID_TARGET' | 'ASSEMBLY_REPLICATE_NO_MATCHING_TARGET' | 'LOFT_SHAPE_CONTROL_FAILED' | 'LOFT_START_CONDITIONS_FAILED' | 'LOFT_END_CONDITIONS_FAILED' | 'LOFT_NO_FACE_FOR_START_CLAMP' | 'LOFT_NO_FACE_FOR_END_CLAMP' | 'LOFT_NO_PLANE_FOR_START_CLAMP' | 'LOFT_NO_PLANE_FOR_END_CLAMP' | 'LOFT_NO_CLAMPS_ON_POINT_PROFILE' | 'EXPORT_NOT_IMPLEMENTED' | 'SKETCH_POLYGON_ZERO_RADIUS_FAIL' | 'DRAWING_FAILED_TO_RESOLVE_VIEW_REFERENCE' | 'DRAWING_PARTSTUDIO_EMPTY_AFTER_SECTION_CUT' | 'DRAWING_ASSEMBLY_DOES_NOT_CONTAIN_VISIBLE_INSTANCES' | 'DRAWING_ASSEMBLY_EMPTY_AFTER_SECTION_CUT' | 'DRAWING_VIEW_GENERATION_FAILED' | 'SKETCH_SLOT_FAILURE' | 'SKETCH_SLOT_PARTIAL_FAILURE' | 'NO_UNIT' | 'RESTRUCTURE_INVALID_SOURCE' | 'RESTRUCTURE_INVALID_TARGET' | 'MATE_MIN_MAX_LIMIT_VIOLATION' | 'REST_ASSEMBLY_GET_DOCUMENT_FAILED' | 'REST_ASSEMBLY_UNKNOWN_INSERTABLE_TYPE' | 'REST_ASSEMBLY_SETUP_EXCEPTION' | 'REST_ASSEMBLY_BEGIN_OPERATION_FAILED' | 'REST_ASSEMBLY_INSERT_INSTANCE_FAILED' | 'REST_ASSEMBLY_COMMIT_OPERATION_FAILED' | 'REST_ASSEMBLY_CLOSE_CLIENT_FAILED' | 'REST_ASSEMBLY_NULL_OCCURRENCES' | 'REST_ASSEMBLY_EMPTY_OCCURRENCE' | 'REST_ASSEMBLY_TRANSFORM_WRONG_SIZE' | 'ASSEMBLY_EMPTY_OCCURRENCE_LIST' | 'ASSEMBLY_NULL_TRANSFORM' | 'ASSEMBLY_TRANSFORM_NOT_RIGID' | 'ASSEMBLY_CANNOT_TRANSFORM_FIXED_OCCURRENCE' | 'ASSEMBLY_TRANSFORM_FAILED' | 'ASSEMBLY_OCCURRENCE_NOT_FOUND' | 'ASSEMBLY_REPLICATE_MULTIPLE_VALID_TARGET' | 'ASSEMBLY_REPLICATE_NO_TARGET_SELECTED' | 'CPLANE_INPUT_LINE_ANGLE2' | 'CPLANE_DEGENERATE_SELECTION' | 'CPLANE_SELECT_LINE_ANGLE_REFERENCE' | 'ASSEMBLY_REPLICATE_INVALID_SEED_INSTANCE' | 'CANNOT_USE_VARIABLES_IN_SKETCH_PATTERNS' | 'SKETCH_MIRROR_OFFSET_ELLIPSE' | 'EXTERNAL_REFERENCE_FAILED_TO_CREATE' | 'SPLIT_FACE_NO_CHANGE' | 'SKETCH_INTERSECTION_FAILED' | 'SKETCH_INTERSECTION_MULTIPLE_FAILED' | 'SKETCH_INTERSECTION_PARTIAL_FAILED' | 'FEATURE_ID_IN_PATH_DOES_NOT_MATCH_BODY' | 'FEATURE_NOT_FOUND' | 'FEATURE_DOES_NOT_MATCH' | 'FEATURE_HAS_INVALID_TYPE' | 'FEATURE_DOES_NOT_MATCH_ITS_FEATURE_SPEC' | 'FEATURE_BAD_SERIALIZATION_VERSION' | 'FEATURE_WRONG_SERIALIZATION_VERSION' | 'FEATURE_INVALID_ROLLBACK_INDEX' | 'FEATURE_ERROR_IN_INPUT' | 'FEATURE_CONCURRENCY_ERROR' | 'FEATURE_CHANGE_BREAKS_MODEL' | 'FEATURE_NODE_IDS_INVALID' | 'ROLLBACK_INDEX_INVALID' | 'FEATURE_NO_SOLIDS' | 'SKETCH_EXTERNAL_GEOMETRY_MISMATCH' | 'HOLE_EXCEEDS_MAX_LOCATIONS' | 'SKETCH_TEXT_IS_EMPTY' | 'SKETCH_INSERT_DWG_MAX_ENTITIES_EXCEEDED' | 'HOLE_TAP_DIA_TOO_LARGE' | 'ASSEMBLY_EMPTY_BODY' | 'SIMPLIFY_BODY_FAILED' | 'INVALID_VIEW_NAME' | 'PATTERN_SELECT_FEATURES' | 'MIRROR_SELECT_FEATURES' | 'PATTERN_FEATURE_FAILED' | 'SKETCH_TRANSFORM_FAILED' | 'TANGENT_MATE_TWO_ENTITIES_NEEDED' | 'HOLE_CANNOT_DETERMINE_LAST_BODY' | 'RESTRUCTURE_CANNOT_MODIFY_SAVED_VERSION' | 'REST_ASSEMBLY_EXTERNAL_REFERENCE_REQUIRES_VERSION' | 'REST_ASSEMBLY_EXTERNAL_REFERENCE_DISALLOWS_MICROVERSION' | 'REST_ASSEMBLY_VERSION_SUPPORTED_ONLY_FOR_EXTERNAL_REFERENCES' | 'SWEEP_BAD_LOCK_FACES' | 'SKETCH_TEXT_CANNOT_BE_CONSTRUCTION' | 'CUSTOM_ERROR' | 'BEND_BAD_CONFIGURATION' | 'BEND_WRONG_NUMBER_OF_ENTITIES' | 'BEND_BAD_CURVES' | 'BEND_GENERAL_ERROR' | 'BEND_EDGE_NO_EDGES' | 'BEND_EDGE_NO_SEED_ENTITY' | 'EXTEND_SHEET_BODY_NO_BODY' | 'EXTRACT_SURFACE_NO_FACES' | 'FLATTEN_NO_EDGES' | 'FLATTEN_NO_FACES' | 'FOLD_NO_BODIES' | 'BEND_PREP_NO_FACES' | 'BEND_PREP_NO_BODIES' | 'BEND_PREP_ERROR_FINDING_EDGE_LOCATIONS' | 'BEND_PREP_ERROR_IMPRINTING_EDGES' | 'ASSEMBLY_ANIMATE_MATE_START_AFTER_END' | 'ASSEMBLY_ANIMATE_NO_MATE' | 'ASSEMBLY_ANIMATE_MATE_SUPPRESSED' | 'TANGENT_MATE_GEOMETRY_NOT_SUPPORTED' | 'SKETCH_DIMENSION_INFINITY' | 'BOLEAN_INPUTS_NOT_SOLID' | 'FACE_IS_NOT_RECTANGLE' | 'HOLE_DESTROY_SOLID' | 'HELIX_INPUT_CIRCLE' | 'IMPORT_SCALING_NON_MESH_DATA' | 'EVALUATE_FACE_TANGENT_FOR_MESHES' | 'CANNOT_COMPUTE_CENTROID' | 'CANNOT_EVALUATE_DIMENSION' | 'CANNOT_IMPORT_MESH' | 'SKETCH_ELLIPSE_ZERO_AXIS' | 'TRANSFORM_SCALE_UNIFORMLY' | 'TRANSFORM_MATE_CONNECTORS' | 'ASSEMBLY_WRONG_ELEMENT_TYPE' | 'ASSEMBLY_ELEMENT_NOT_FOUND' | 'SHEET_METAL_TABLE_UNKNOWN_ERROR' | 'SHEET_METAL_TABLE_REGEN_ERROR' | 'SHEET_METAL_TABLE_READ_ONLY' | 'ASSEMBLY_PATTERN_INVALID_TYPE' | 'ASSEMBLY_PATTERN_DIRECTION_ERROR' | 'ASSEMBLY_PATTERN_NONPOSITIVE_LINEAR_DISTANCE' | 'ASSEMBLY_PATTERN_NONPOSITIVE_ANGLE' | 'ASSEMBLY_PATTERN_INVALID_SEED' | 'ASSEMBLY_PATTERN_INVALID_REFERENCE_MATE_CONNECTOR' | 'RESTORE_FEATURE_FAILED' | 'FACES_NOT_OWNED_BY_PARTS' | 'EDGES_NOT_OWNED_BY_PARTS' | 'SHEET_METAL_REBUILD_ERROR' | 'SHEET_METAL_INPUT_BODY_SHOULD_NOT_BE_SHEET_METAL' | 'SHEET_METAL_CANNOT_RECOGNIZE_PARTS' | 'SHEET_METAL_CANNOT_THICKEN' | 'SHEET_METAL_CONVERT_PLANE' | 'ASSEMBLY_PATTERN_AXIS_ERROR' | 'RIB_NO_PROFILES' | 'RIB_NO_PARTS' | 'RIB_PROFILE_FAILED' | 'RIB_BODY_FAILED' | 'RIB_NO_INTERSECTIONS' | 'RIB_MERGE_FAILED' | 'ASSEMBLY_NAMED_POSITIONS_SAVE_FAILED' | 'ASSEMBLY_NAMED_POSITIONS_LOAD_FAILED' | 'ASSEMBLY_NAMED_POSITIONS_NO_MATES_TO_SAVE' | 'ASSEMBLY_NAMED_POSITIONS_POSITION_NOT_FOUND' | 'SPHERE_FAILED' | 'ASSEMBLY_PATTERN_NOT_SUPPORTED' | 'ASSEMBLY_NAMED_POSITIONS_PARTIAL_LOAD_FAILURE' | 'ASSEMBLY_NAMED_POSITIONS_LOAD_SUCCEEDED_WITH_EXTRA_MATES' | 'ASSEMBLY_NAMED_POSITIONS_SAVED_MATE_NOT_FOUND_ON_LOAD' | 'SHEET_METAL_SINGLE_MODEL_NEEDED' | 'SHEET_METAL_ACTIVE_JOIN_NEEDED' | 'INSTANCE_QUERY_FAILED' | 'SHEET_METAL_ACTIVE_EDGE_NEEDED' | 'SHEET_METAL_FLANGE_NO_EDGES' | 'MESH_NOT_SUPPORTED' | 'SHEET_METAL_PARTS_PROHIBITED' | 'VARIABLE_CANNOT_EVALUATE' | 'DRAWING_ASSEMBLY_INVALID_SECTION_CUT' | 'DRAWING_PARTSTUDIO_INVALID_SECTION_CUT' | 'SHEET_METAL_COULD_NOT_UNFOLD' | 'PARAMETER_OUT_OF_RANGE' | 'SHEET_METAL_NO_0_ANGLE_BEND' | 'SHEET_METAL_FLAT_RIP_NO_EDIT' | 'SHEET_METAL_CANT_CHANGE_TO_FLAT' | 'PARAMETER_PRECONDITION_FAILED' | 'PARAMETER_SYNTAX_ERROR' | 'SHEET_METAL_CAN_ONLY_REMOVE' | 'SHEET_METAL_CAN_ONLY_SUBTRACT' | 'REST_ASSEMBLY_INVALID_FEATURE' | 'REST_ASSEMBLY_INVALID_BODY_TYPE' | 'PARTING_OUT_TARGET_READONLY' | 'SHEET_METAL_MULTI_SM_DEFAULT_RADIUS' | 'SHEET_METAL_FLANGE_FAIL_ALIGNMENT' | 'SHEET_METAL_FLANGE_FAIL_UP_TO' | 'SHEET_METAL_FLANGE_FAIL_UP_TO_ENTITY' | 'SHEET_METAL_FLANGE_FAIL' | 'SHEET_METAL_FLANGE_FAIL_LIMIT_OPP_FLANGE' | 'CANT_SPLIT_SHEET_METAL_BEND_FACE' | 'IN_CONTEXT_INSTANCE_INVALID_TARGET' | 'SHEET_METAL_SELF_INTERSECTING_MODEL' | 'SHEET_METAL_SELF_INTERSECTING_FLAT' | 'SHEET_METAL_NON_90_BUTT' | 'SHEET_METAL_RIP_STYLE_ERROR' | 'CANNOT_USE_MATECONNECTORS_IN_PATTERN' | 'CANNOT_COPY_MATECONNECTORS' | 'SHEET_METAL_CAN_ONLY_OFFSET' | 'MODIFIABLE_ENTITY_ONLY' | 'IN_CONTEXT_UPDATE_DELETED_ASSEMBLY' | 'IN_CONTEXT_UPDATE_EMPTY_INSTANCE' | 'IN_CONTEXT_UPDATE_INVALID_SOURCE' | 'IN_CONTEXT_UPDATE_INVALID_TARGET' | 'SHEET_METAL_NO_FEATURE_PATTERN' | 'CUSTOM_FEATURE_DEFINITION_NOT_FOUND' | 'SHEET_METAL_START_SELECT_BENDS' | 'SHEET_METAL_END_DONE' | 'PATH_EDGES_NOT_CONTINUOUS' | 'SHEET_METAL_RIP_FAIL_INTERNAL_EDGE' | 'SHEET_METAL_RIP_FAIL' | 'SHEET_METAL_RIP_MULTI_BODY' | 'SHEET_METAL_RIP_FAIL_NON_PLANAR' | 'PATTERN_CURVE_NO_EDGES' | 'SHEET_METAL_RIP_NO_CORNER' | 'SHEET_METAL_RIP_EVEN' | 'SHEET_METAL_RIP_WALL_NOT_FOUND' | 'SHEET_METAL_RIP_SAME_VERTEX' | 'SHEET_METAL_RIP_NEED_MORE_VERTICES' | 'SHEET_METAL_MAKE_JOINT_FAIL' | 'CURVE_PATTERN_START_OFF_PATH' | 'PART_LOAD_FAILED' | 'SHEET_METAL_MOVE_NOT_PLANAR' | 'SHEET_METAL_JOINT_FAIL_ADJACENT_FACES' | 'WRONG_PARASOLID_VERSION' | 'SHEET_METAL_SINGLE_MODEL_NEEDED_EDGES' | 'REST_ASSEMBLY_MISSING_INSTANCE_DOCUMENT_ID' | 'REST_ASSEMBLY_MISSING_INSTANCE_ELEMENT_ID' | 'FACE_CLASH' | 'CURVE_PATTERN_START_OFF_CLOSED_PATH' | 'SHEET_METAL_CUT_JOINT' | 'EXPORT_STL_NO_PARTS' | 'INPUT_NAME_TOO_LONG' | 'IMPORT_BODY_FAILED_CHECK' | 'DERIVED_BODIES_HAVE_FAULTS' | 'SHEET_METAL_BLOCKED_PATTERN' | 'SHEET_METAL_FLANGE_INTERNAL' | 'SHEET_METAL_TOO_THICK' | 'SHEET_METAL_BEND_END_NOT_A_CORNER' | 'SHEET_METAL_NOT_A_CLOSED_CORNER' | 'SHEET_METAL_CORNER_NOT_A_BEND_END' | 'RIB_ONLY_OPEN_PROFILES' | 'TAB_NO_LONGER_EXISTS' | 'CLINE_FAILED' | 'ILLEGAL_MODIFICATION' | 'ASSEMBLY_MATE_VALUE_SET_FAILED' | 'EXTRUDE_OFFSET_TOO_DEEP' | 'SHEET_METAL_CANNOT_MOVE_BEND_EDGE' | 'UP_TO_FACE_NOT_PARALLEL' | 'TRANSLATION_FACE_NOT_PLANAR' | 'MOVE_FACE_NO_INTERSECTION' | 'SWEEP_PATH_PROFILE_NO_INTERSECTION' | 'DIRECT_EDIT_MOVE_FACE_CREATE_SELECT' | 'SHEET_METAL_THICKEN_IN_CONTEXT_INFO' | 'CANNOT_DELETE_RHO_DIMENSION' | 'INVALID_RHO' | 'SKETCH_RHO_DIM_NOT_FOUND' | 'SKETCH_CONIC_FAILED' | 'TAB_NAME_TOO_LONG' | 'DIRECT_EDIT_DELETE_FACE_ALL_FACES' | 'SHEET_METAL_CORNER_BREAK_FAILED' | 'BOOLEAN_NO_TARGET_SURFACE' | 'BAD_BSPLINECURVE_DEFINITION' | 'REQUIRE_3D_BSPLINECURVE_DATA' | 'PERIODIC_BSPLINECURVE_NOT_CLOSED' | 'PERIODIC_BSPLINECURVE_NOT_SMOOTH' | 'RATIONAL_BSPLINECURVE_WEIGHT_NEGATIVE' | 'BSPLINECURVE_NOT_G1' | 'BRIDGING_CURVE_VERTEX_BOTH_SIDES' | 'BRIDGING_CURVE_ONE_EDGE_EACH_SIDE' | 'BRIDGING_CURVE_VERTEX_AT_END_OF_EDGE' | 'PROJECT_CURVES_PARALLEL_PLANES' | 'PROJECT_CURVES_DIFFERENT_SKETCHES' | 'SHEET_METAL_SELECT_PART' | 'VARIABLE_NOT_FOUND' | 'CANNOT_EDIT_FIXED_CONIC' | 'EXTRACT_WIRES_OVERLAPPING_EDGES' | 'EXTRACT_WIRES_NON_MANIFOLD' | 'EXTRACT_WIRES_NEEDS_EDGES' | 'SPLINE_TWO_POINTS' | 'CLOSED_SPLINE_THREE_POINTS' | 'TANGENCY_ONE_EDGE' | 'FIT_SPLINE_CANNOT_EVALUATE_END_CONDITION' | 'FIT_SPLINE_REPEATED_POINT' | 'FEATURE_ID_REQUIRED' | 'PARAMETER_NOT_FOUND' | 'PARAMETER_DOES_NOT_MATCH_ITS_FEATURE_SPEC' | 'SHEET_METAL_CORNER_BREAK_DISABLED' | 'SHEET_METAL_FILLET_NO_CONIC' | 'SHEET_METAL_CHAMFER_NO_TWO_OFFSETS' | 'SHEET_METAL_CHAMFER_NO_OFFSET_ANGLE' | 'SHEET_METAL_CHAMFER_MUST_BE_EQUAL_OFFSETS' | 'SHEET_METAL_ACTIVE_ENTITY_NEEDED' | 'SHEET_METAL_CORNER_BREAK_NOT_A_CORNER' | 'SHEET_METAL_CORNER_BREAK_NO_WALL' | 'SHEET_METAL_CORNER_BREAK_VERTEX_NOT_FREE' | 'SHEET_METAL_CORNER_BREAK_ATTRIBUTE_EXISTS' | 'FIT_SPLINE_ZERO_START_MAGNITUDE' | 'FIT_SPLINE_ZERO_END_MAGNITUDE' | 'SHEET_METAL_CORNER_BREAK_SELECT_ENTITIES' | 'EXTRUDE_SELECT_TERMINATING_VERTEX' | 'FILL_SURFACE_NO_EDGES' | 'FILL_SURFACE_DOUBLE_SELECTION' | 'FILL_SURFACE_MULTI_LOOP' | 'FILL_SURFACE_OPEN_LOOP' | 'FILL_SURFACE_FAIL' | 'FILL_SURFACE_ATTACH_FAIL' | 'FILL_SURFACE_G2_FAIL' | 'FILL_SURFACE_VERTEX_INTERPOLATION_FAIL' | 'LOFT_SPINE_DISJOINT_PATH' | 'LOFT_SPINE_SELF_INTERSECTING_PATH' | 'LOFT_SPINE_PATH_PROFILE_NO_INTERSECTION' | 'LOFT_SPINE_FAILED_XSECTIONS' | 'LOFT_SPINE_GUIDE_WITH_POINT_PROFILE' | 'LOFT_SPINE_PROFILES_NOT_IN_ORDER' | 'LOFT_SELECT_SPINE' | 'DOCUMENT_NOT_FOUND' | 'ELEMENT_NOT_FOUND' | 'ENCLOSE_NO_REGION' | 'ENCLOSE_CANNOT_MERGE_REGIONS' | 'ENCLOSE_CANNOT_CREATE_SOLID' | 'ENCLOSE_NOTHING_SELECTED' | 'ENCLOSE_UNKNOWN_ERROR' | 'ACCESS_NOT_ALLOWED' | 'LOFT_SPINE_TOO_MANY_GUIDES' | 'FEATURE_INVALID_NAMESPACE' | 'FEATURE_NULL_NOT_ALLOWED' | 'SKETCH_DIMENSION_LIMIT_ERROR' | 'FILL_SURFACE_WIRE_CONTINUITY_MISMATCH' | 'FILL_SURFACE_INTERNAL_CONTINUITY_MISMATCH' | 'LOFT_START_OR_END_CONDITIONS_FAILED' | 'LOFT_START_OR_END_CONDITIONS_MAGNITUDE_NO_EFFECT' | 'FOLLOW_LEADER_IS_IN_UNFOLLOWABLE_TAB' | 'LOFT_START_OR_END_CONDITIONS_WITH_GUIDES_FAILED' | 'REST_ASSEMBLY_MISSING_TRANSFORM_GROUPS' | 'REST_ASSEMBLY_NULL_TRANSFORM_GROUP' | 'REST_ASSEMBLY_NULL_TRANSFORM_GROUP_INSTANCES' | 'REST_ASSEMBLY_NULL_TRANSFORM_GROUP_INSTANCE' | 'LOFT_NO_FACE_FOR_GUIDE_CLAMP' | 'LOFT_NO_CONTINUITY_CONDITION_AT_INTERNAL_GUIDE' | 'SKETCH_CONSTRAINT_NOT_FOUND' | 'SKETCH_CONSTRAINT_PARAMETER_NOT_FOUND' | 'SKETCH_ENTITY_NOT_FOUND' | 'SKETCH_ENTITY_PARAMETER_NOT_FOUND' | 'FEATURE_PARAMETER_TYPE_MISMATCH' | 'FEATURE_CONFIGURED_PARAMETER_NO_VALUES' | 'FEATURE_CONFIGURED_PARAMETER_INCONSISTENT_TYPES' | 'SHEET_METAL_FLANGE_FAIL_AUTO_MITER' | 'SHEET_METAL_FLANGE_FAIL_PARALLEL_EDGE' | 'SHEET_METAL_FLANGE_FAIL_PARALLEL_PLANE' | 'SHEET_METAL_FLANGE_FAIL_PARALLEL_DIRECTION' | 'SHEET_METAL_FLANGE_FAIL_NO_BEND' | 'SHEET_METAL_FLANGE_NO_PARALLEL_ENTITY' | 'SHEET_METAL_FLANGE_NO_DIRECTION_ENTITY' | 'SHEET_METAL_TAB_NO_BEND' | 'BOOLEAN_NO_SURFACE_IN_MERGE_SCOPE' | 'BOOLEAN_NO_SHARED_EDGE_WITH_SURFACE_IN_MERGE_SCOPE' | 'SHEET_METAL_BEND_RELIEF_NO_CORNER' | 'SHEET_METAL_CORNER_SELECT_ENTITIES' | 'SHEET_METAL_BEND_RELIEF_SELECT_ENTITIES' | 'VRFILLET_RADIUS_REQUIRED_AT_VERTEX' | 'VRFILLET_RHO_REQUIRED_AT_VERTEX' | 'VRFILLET_MAG_REQUIRED_AT_VERTEX' | 'VRFILLET_SELECT_VERTICES' | 'VRFILLET_VERTEX_NOT_ON_CHAIN' | 'VRFILLET_INVALID_CHAIN' | 'SHEET_METAL_TAB_NO_MERGE' | 'SHEET_METAL_TAB_NONPLANAR' | 'SHEET_METAL_TAB_NO_WALL' | 'SHEET_METAL_TAB_NO_TAB' | 'VRFILLET_NO_EFFECT' | 'VRFILLET_MULTI_SELECTION' | 'SHEET_METAL_TAB_NO_PARALLEL_WALL' | 'SHEET_METAL_CORNER_UNDER_SIZED' | 'FILLET_PARTIAL_FAIL' | 'VRFILLET_INTERNAL_ZERO' | 'SHEET_METAL_TAB_NO_EFFECT' | 'SHEET_METAL_TAB_LOW_CLEARANCE' | 'SHEET_METAL_TAB_FAILS_MERGE' | 'SHEET_METAL_TAB_COLLISION' | 'REPLACE_FACE_FACE_COUNT_CHANGED' | 'FACE_OVERLAP' | 'FACE_REMOVED' | 'INTERSECTING_EDGES' | 'CANNOT_SPLIT_FACE' | 'FILL_SURFACE_BAD_SUPPORT' | 'FILL_SURFACE_SUPPORT_NOT_ON_BOUNDARY' | 'FILL_SURFACE_SUPPORT_NOT_SMOOTH' | 'FILL_CURVE_OR_POINT_CONSTRAINTS' | 'SHEET_METAL_ADD_WRONG_MODEL' | 'SHEET_METAL_PATTERN_DISABLED_BOOLEANS' | 'DRAWING_ALL_INSTANCES_HIDDEN' | 'FILL_SUPPORT_NOT_SMOOTH_INTERNAL' | 'SKETCH_CONSTRAINT_WRONG_SHEET_METAL_BODY' | 'SKETCH_CONSTRAINT_FLAT_IN_3D' | 'SKETCH_CONSTRAINT_3D_IN_FLAT' | 'FIT_SPLINE_CURVATURE_FACE' | 'FIT_SPLINE_CANNOT_EVALUATE_CURVATURE_END_CONDITION' | 'FIT_SPLINE_NEED_DIRECTION_FOR_CURVATURE' | 'CONFIGURATION_HAS_BAD_PARAMETERS' | 'CONFIGURATION_HAS_BAD_CURRENT_CONFIGURATION' | 'FEATURE_CONFIGURED_PARAMETER_VALUES_HAVE_IDS' | 'WORKSPACE_NO_LONGER_EXISTS' | 'CONTENT_STACKING_INVALID_MODE' | 'CONTENT_STACKING_INVALID_COMPONENTS' | 'CONTENT_STACKING_INVALID_TOP_STACK' | 'SHEET_METAL_FACE_PATTERN_NO_JOINT' | 'SHEET_METAL_FACE_PATTERN_FLOATING_CUT' | 'SHEET_METAL_FACE_PATTERN_FLOATING_WALL' | 'SM_FLAT_OP_NO_INTERSECT' | 'SM_FLAT_OP_PARTIAL_INTERSECT' | 'SM_FLAT_OP_ADD_CROSSES_EDGE' | 'SM_FLAT_OP_NON_PLANAR_TOOL' | 'SM_FLAT_OP_NON_PLANAR_TARGET' | 'SM_FLAT_OPERATION_FAILED' | 'SM_FLAT_OP_LEGACY_MODEL' | 'SHEET_METAL_FLANGE_NON_LINEAR_EDGES' | 'SHEET_METAL_CYLINDER_BEND' | 'SHEET_METAL_INVALID_FACE' | 'SHEET_METAL_ROLLED_CORNER_RELIF' | 'SHEET_METAL_RELIEF_FAILURES' | 'EDGE_CHANGE_FAILED' | 'BOOLEAN_INPUTS_NOT_SOLID' | 'TRANSFORM_SCALE_SELECTION' | 'SHEET_METAL_SUBTRACT_DESTROYS_SHEET' | 'SPLIT_KEEP_TOOLS_WITH_FACE' | 'SPLIT_TRIM_WITH_SINGLE_FACE' | 'SHEET_METAL_SKETCH_DETACHED_FACE' | 'HOLE_CUT_FAIL' | 'SHEET_METAL_FLAT_OP_ROLL_FAIL' | 'PATTERN_EDGE_FAILED' | 'SHEET_METAL_FACE_PATTERN_NO_VERTEX' | 'SHEET_METAL_FACE_PATTERN_PARTIAL_FLOATING_WALL' | 'EXTRUDE_3D_AND_FLAT' | 'PATTERN_SWITCH_TO_PER_INSTANCE' | 'PATTERN_NO_GEOM_FROM_FEATURES' | 'RM_NO_LINK_PERMISSION_TO_REVISION' | 'DRAFT_SELECT_PARTING_EDGES' | 'DRAFT_CONFLICTING_OPPOSITION' | 'SPLIT_SELECT_TARGETS' | 'SPLIT_SELECT_TOOL' | 'SPLIT_SELECT_FACE_TARGETS' | 'SPLIT_SELECT_FACE_TOOLS' | 'ASSEMBLY_PATTERN_EXCEED_MAX_INSTANCE_COUNT' | 'ASSEMBLY_PATTERN_RECURSIVE_SEED' | 'NO_LINK_PERMISSION_TO_THIS_DOCUMENT' | 'SM_FLAT_OP_FACES_NOT_COPLANAR' | 'FLATTENED_SHEET_METAL_SKETCH_PROHIBITED' | 'DRAFT_SELECT_PULL_DIRECTION_ENTITY' | 'DRAFT_PARALLEL_PARTING_EDGE' | 'FLATTENED_SHEET_METAL_SKETCH_ONE_FACE' | 'SKETCH_OFFSET_CHAIN_FAIL' | 'SKETCH_OFFSET_BASE_CURVE_CONSUMED' | 'SKETCH_OFFSET_SPLINE_SPLIT' | 'SKETCH_OFFSET_ELLIPSE_SPLIT' | 'CANNOT_FIND_FLATTENED_BODY' | 'SHEET_METAL_ACTIVE_MODEL_REQUIRED' | 'SKETCH_REFERENCE_WRONG_FLAT_PART' | 'SKETCH_CANNOT_REFERENCE_3D' | 'SM_FLAT_OP_CANNOT_JOIN_DIFFERENT_TRANSFORMS' | 'DEFINED_IN_3D_CANT_REFERENCE_SM_FLAT' | 'DEFINED_IN_SM_FLAT_CANT_REFERENCE_3D' | 'CANNOT_CHANGE_REFERENCE_TO_DELETED_DOCUMENT' | 'CANNOT_CHANGE_REFERENCE_ELEMENT_NOT_FOUND' | 'COPIED_SKETCH_NOT_FOUND' | 'VARIABLE_NAME_TOO_LONG' | 'NO_INSTANCE_TO_REPLACE' | 'ASSEMBLY_REPLACE_NO_REPLACER' | 'CANNOT_REPLACE_IN_SUBASSEMBLIES' | 'FILL_SURFACE_G1_FAIL' | 'ALL_CONFIGURATION_PARAMETERS_NOT_SPECIFIED' | 'ASSEMBLY_REPLACE_INVALID_SEED_INSTANCE' | 'ASSEMBLY_REPLACE_INVALID_SEED_TYPE' | 'ASSEMBLY_REPLACE_SUPPRESSED_FORBIDDEN' | 'DISPLAY_STATES_INVALID_NAME' | 'DISPLAY_STATES_DUPLICATE_NAME' | 'WORKSPACE_UPGRADE_NONE_ENABLE_CAPABILITY' | 'DISPLAY_STATES_UPDATE_HAD_NO_EFFECT' | 'DISPLAY_STATES_APPLY_HAD_NO_EFFECT' | 'DISPLAY_STATES_DOES_NOT_EXIST' | 'LOFT_SPINE_NONTANGENT_PATH' | 'LOFT_SPINE_APPROXIMATED' | 'REST_ASSEMBLY_REVISION_PART_NUMBER_BLANK' | 'REST_ASSEMBLY_REVISION_NOT_FOUND' | 'ROLL_FAILED' | 'ROLL_CANNOT_ADJUST' | 'ROLL_MISMATCHED_SOURCE' | 'INVALID_ROLL_SURFACE' | 'ROLL_NOT_TO_OR_FROM_PLANE' | 'FAILED_TO_FIND_ELEMENT_FOR_TO_STATE' | 'FAILED_TO_FIND_VERSION_FOR_TO_STATE' | 'MISSING_REVISION_ID_FOR_TO_STATE' | 'MISSING_VERSION_ID_FOR_TO_STATE' | 'INVALID_DOCUMENT_ID_FOR_TO_STATE' | 'ASSEMBLY_CONTAINS_MISSING_PART_DATA' | 'SHEET_METAL_HEM_NO_EDGES' | 'SHEET_METAL_HEM_NON_LINEAR_EDGES' | 'SHEET_METAL_HEM_FAIL_ALIGNMENT' | 'SHEET_METAL_HEM_TOO_SHORT' | 'SHEET_METAL_HEM_TEAR_DROP_GAP_TOO_LARGE' | 'SHEET_METAL_HEM_INTERNAL' | 'SHEET_METAL_HEM_FAILED' | 'INVALID_CONFIGURATION_SPECIFIED' | 'EDGEBLEND_PARTIAL' | 'CHAMFER_PARTIAL_FAIL' | 'LOFT_INCONSISTENT_EXTENT' | 'LOFT_CANT_TRIM_PROFILES_INFO' | 'LOFT_CANT_TRIM_GUIDES_INFO' | 'NON_GEOMETRIC_ITEM_INSERTION_FAILED' | 'SHEET_METAL_FLANGE_NEXT_TO_CYLINDER_BEND' | 'SHEET_METAL_HEM_NEXT_TO_CYLINDER_BEND' | 'SHEET_METAL_MOVE_FACE_NEXT_TO_CYLINDER_BEND' | 'ASSEMBLY_UNKNOWN_SOLVE_ERROR' | 'ASSEMBLY_FEATURE_FAILED_TO_RESOLVE_ALL_INSTANCES' | 'SHEET_METAL_ORPHANED_BEND' | 'ASSEMBLY_CONTEXT_INVALID_REFERENCE' | 'ASSEMBLY_FEATURE_QUERY_DATA_MISSING' | 'NON_GEOMETRIC_ITEMS_DOCUMENT_NOT_OWNED_BY_COMPANY' | 'NON_GEOMETRIC_ITEM_NO_ITEM_FOUND_FOR_DOCUMENT_OWNER' | 'EXTEND_SHEET_BODY_NO_TARGET' | 'EXTEND_TARGET_MISSED' | 'EXTEND_SELF_INTERSECTION' | 'EXTEND_FAILED' | 'EXTEND_TO_FACE_FAILED' | 'TRIM_TO_MULTI_FAILED' | 'EXTEND_NON_LAMINAR' | 'EXTEND_TO_VERTEX_FAILED' | 'TRIM_FAILED' | 'SKETCH_EQUAL_CURVATURE_FAILED' | 'SKETCH_EQUAL_CURVATURE_INPUT_ERROR' | 'ASSEMBLY_EXPLODE_STEP_DIRECTION_QUERY_FAILED' | 'WRAP_DESTINATION_NO_FACE' | 'WRAP_TRIM_FAILED' | 'WRAP_TRIM_NO_INTERSECTION' | 'WRAP_IMPRINT_FAILED' | 'WRAP_NEEDS_ANCHOR' | 'WRAP_SELECT_TOOLS' | 'WRAP_SELECT_TARGET' | 'CREATE_COMPOSITE_PART_FAILED' | 'NESTED_COMPOSITE_PARTS' | 'ASSEMBLY_EXPLOSION_DOES_NOT_EXIST' | 'FILL_SURFACE_NO_GUIDES' | 'HOLE_INCONSISTENT_TAP_INFO' | 'WRAP_SOURCE_DIFFERING_PLANES' | 'WRAP_IMPRINT_SHEET_METAL' | 'WRAP_SELECT_ANCHORS' | 'OPERATION_CANCELLED' | 'COMPOSITE_CLOSED_OVERLAP' | 'COMPOSITE_OPEN_OVERLAP' | 'COMPOSITE_SKETCH' | 'COMPOSITE_MATE_CONNECTOR' | 'COMPOSITE_PLANE' | 'COMPOSITE_NON_MODIFIABLE' | 'ASSEMBLY_REPLACE_WILL_CAUSE_CYCLES' | 'CREATE_OUTLINE_TWO_OFFSET_FACES_PER_BODY' | 'SHEET_METAL_TOOL_DOES_NOT_CUT_THROUGH' | 'PERIODIC_BSPLINESURFACE_NOT_CLOSED' | 'PERIODIC_BSPLINESURFACE_NOT_SMOOTH' | 'CANNOT_MAKE_BSPLINESURFACE' | 'BSPLINESURFACE_NOT_G1' | 'BAD_2D_BOUNDARY_BSPLINECURVE_DEFINITION' | 'PERIODIC_2D_BOUNDARY_BSPLINECURVE_NOT_CLOSED' | 'PERIODIC_2D_BOUNDARY_BSPLINECURVE_NOT_SMOOTH' | 'BSPLINESURFACE_BOUNDARY_NOT_SINGLE_CLOSED_LOOP' | 'BSPLINESURFACE_FAILED_TO_MAKE_SOLID' | 'BOOLEAN_NO_SHARED_EDGE_WITH_OTHER_SURFACE' | 'BOOLEAN_NO_SURFACE_TO_MERGE_WITH' | 'BOOLEAN_INVALID_PARAMETER_COMBINATION' | 'MODIFY_COMPOSITE_PART_FAILED' | 'INSTANCE_CONSUMED_BY_CLOSED_COMPOSITE' | 'EXPLODE_STEP_INSTANCE_IS_SUPPRESSED' | 'NO_COMPOSITE_FOR_SINGLE_SOLID' | 'COMPOSITE_PART_ADD_AND_REMOVE_BODY' | 'BOOLEAN_TOOL_INPUTS_NOT_SOLID' | 'BOOLEAN_CANNOT_MIX_SOLIDS_AND_SURFACES' | 'BSPLINESURFACE_CONTROL_POINTS_GRID_TOO_LONG' | 'BSPLINE_TOO_MANY_CONTROL_POINTS' | 'BSPLINE_DEGREE_TOO_HIGH' | 'COMPOSITE_PART_SELECT_ENTITIES' | 'DELETE_COMPOSITE_PART_FAILED' | 'SURFACES_NOT_SUPPORTED_BY_PATTERN_REMOVE_AND_INTERSECT' | 'SHEET_METAL_TAB_MERGE_AND_SUBTRACT_SAME_FLANGE' | 'EXPLODED_VIEW_INVALID_STARTING_POSITION' | 'CANNOT_EXPLODE_SKETCH' | 'FAILED_TO_CREATE_EXPLODED_VIEW' | 'ASSEMBLY_NAMED_POSITIONS_NEW_INSTANCES' | 'SYS_FEATURE_EXCEPTION' | 'CURVE_PARTIAL_FAILED' | 'CURVE_FAILED' | 'SPLIT_KEEP_PLANES_AND_MATE_CONNECTORS' | 'EXPLODE_LINES_MUST_SPECIFY_STARTING_POINT' | 'EXPLODE_LINES_FAILED_TO_RESOLVE_ENTITY' | 'SPLINE_THROUGH_EDGES_SELECTED_EDGES_DONT_FORM_CHAIN' | 'SPLINE_THROUGH_EDGES_TANGENT_DISCONTINUITY_AT_EDGE_ENDS' | 'SPLINE_THROUGH_EDGES_CANNOT_FIT_SPLINE' | 'SPLINE_THROUGH_EDGES_SELECT_EDGES' | 'SPLINE_THROUGH_EDGES_RESULTED_IN_MORE_THAN_ONE_EDGE' | 'SKETCH_CANNOT_DELETE_SPLINE_HANDLES' | 'SKETCH_TRIM_NO_SPLINE_HANDLES' | 'SKETCH_SPLIT_NO_SPLINE_HANDLES' | 'SKETCH_EXTEND_NO_SPLINE_HANDLES' | 'SKETCH_PATTERN_NO_SPLINE_HANDLES' | 'SKETCH_FILLET_NO_SPLINE_HANDLES' | 'SKETCH_MIRROR_NO_SPLINE_HANDLES' | 'SKETCH_TRANSFORM_NO_SPLINE_HANDLES' | 'MATE_OFFSET_INVALID_ROTATION_TYPE' | 'SKETCH_TANGENT_CONSTRAINT_SPLINE_AND_HANDLE' | 'SKETCH_CURVATURE_CONSTRAINT_SPLINE_AND_HANDLE' | 'EXPLODE_LINE_NOT_ON_EXPLODED_INSTANCE' | 'SWEEP_DISJOINT_PROFILE' | 'SWEEP_MIXED_PROFILE' | 'MULTI_PROFILE_SWEEP_NO_INNER_LOOPS' | 'SWEEP_PROFILE_DIM_MISMATCH' | 'LOFT_CONNECTION_MATCHING' | 'SIMULATION_LOAD_DIRECTION_QUERY_FAILED' | 'SIMULATION_LOAD_REGION_QUERY_FAILED' | 'SIMULATION_LOAD_REGION_QUERY_EMPTY' | 'SIMULATION_LOAD_REGION_NOT_ON_LOAD_INSTANCE' | 'SIMULATION_LOAD_INSTANCE_NOT_SPECIFIED' | 'SIMULATION_LOAD_DIRECTION_NOT_SPECIFIED' | 'SIMULATION_FUNCTIONAL_CONNECTION_QUERY_FAILED' | 'SIMULATION_FUNCTIONAL_CONNECTION_QUERY_EMPTY' | 'HOLE_MATCH_FAILED' | 'RULED_SURFACE_SELECT_EDGES' | 'RULED_SURFACE_MITER_FAILED' | 'RULED_SURFACE_NO_TANGENT_DIR' | 'RULED_SURFACE_SELECT_DIRECTION' | 'RULED_SURFACE_ZERO_LENGTH' | 'RULED_SURFACE_SELECT_UP_TO_ENTITY' | 'RULED_SURFACE_OVERLAPPING_SKETCH_EDGES' | 'RULED_SURFACE_EDGES_NOT_MANIFOLD' | 'RULED_SURFACE_FAILED' | 'RULED_SURFACE_NO_LOCK_FACE' | 'RULED_SURFACE_VERTEX_SELECT_VERTEX' | 'RULED_SURFACE_MULTIPLE_LOCK_FACES' | 'RULED_SURFACE_TOP_LEVEL_BOUNDARY_ENTITY' | 'RULED_SURFACE_SPLIT_VERTEX' | 'FULL_ROUND_SELECT_FACES' | 'FULL_ROUND_MINIMUM_VERSION' | 'FULL_ROUND_ADJACENT_CENTER_FACES' | 'FULL_ROUND_COMMON_BODY' | 'FAILED_TO_CREATE_ASSEMBLY_SIMULATION' | 'IN_CONTEXT_UPDATE_DELETED_WORKSPACE' | 'HOLE_TOOL_CONSTRUCTION_FAILED' | 'HOLE_PARTIAL_FAILURE' | 'HOLE_EXCEEDS_MAX_LOCATIONS_500' | 'CONSTRUCT_PATH_EDGES_OVERLAP' | 'CONSTRUCT_PATH_NOT_MANIFOLD' | 'CONSTRUCT_PATH_FAILED' | 'CONSTRUCT_PATH_FACES_OPPOSITE_SIDES' | 'RULED_SURFACE_REFERENCE_FACES_BOTH_SIDES' | 'HOLE_TARGETS_DO_NOT_DIFFER' | 'RULED_SURFACE_OVERRIDES_CLASH' | 'FGS_STREAM_ERROR' | 'NO_MATERIAL_FOR_MASS_PROPERTY' | 'SPECIFIED_SIMULATION_DOES_NOT_EXIST' | 'MULTIPLE_MODAL_SIMULATIONS_PROHIBITED' | 'LOFT_POINT_PROFILE_NORMAL_TO_PROFILE_GUIDE' | 'RULED_SURFACE_GLOBAL_NORMAL_OVERRIDE' | 'RULED_SURFACE_EDGE_PARALLEL_REFERENCE' | 'FIXED_PART_REQUIRED_FOR_SIMULATION' | 'MATERIAL_ASSIGNMENT_REQUIRED_FOR_SIMULATION' | 'LOAD_REQUIRED_FOR_LINEAR_STATIC_SIMULATION' | 'MATERIAL_LACKS_REQUIRED_PROPERTY_FOR_SIMULATION' | 'FILLET_EDGES_NOT_MANIFOLD' | 'SHEET_METAL_FILLET_NO_WIDTH' | 'FRAME_TAG_PROFILE_SELECT_SKETCH' | 'FRAME_TAG_PROFILE_SPECIFY_COLUMNS' | 'FRAME_TAG_PROFILE_HEADER_EMPTY' | 'FRAME_TAG_PROFILE_VALUE_EMPTY' | 'FRAME_MISSING_CAP_FACES' | 'FRAME_MISSING_SWEPT_EDGES' | 'FRAME_MISSING_SWEPT_FACES' | 'FRAME_CUTLIST_NO_END_FACE_EDGE_GEOMETRY_PAIR' | 'PUBLICATION_ITEM_INSERT_FAILED' | 'PUBLICATION_ITEM_INSERT_FAILED_NO_LINK_PERMISSION' | 'PUBLICATION_ITEM_INSERT_FAILED_NO_DUPLICATES_ALLOWED' | 'PUBLICATION_ITEM_UPDATE_FAILED_NO_DUPLICATES_ALLOWED' | 'PUBLICATION_ITEM_UPDATE_FAILED' | 'VRFILLET_RADIUS_REQUIRED_AT_POINT' | 'VRFILLET_PARAMETER_REQUIRED_AT_POINT' | 'VRFILLET_RHO_REQUIRED_AT_POINT' | 'VRFILLET_MAG_REQUIRED_AT_POINT' | 'VRFILLET_SELECT_EDGES' | 'VRFILLET_EDGE_NOT_ON_CHAIN' | 'BRIDGING_CURVE_POSITIONS_IDENTICAL' | 'SPLIT_FACE_MUTUAL_IMPRINT' | 'BRIDGING_CURVE_ZERO_SPEED_SCALE' | 'VARIABLE_DESCRIPTION_TOO_LONG' | 'FRAME_BAD_PATH' | 'FRAME_SWEEP_FAILED' | 'FRAME_TRIM_FAILED' | 'FRAME_MALFORMED_BEAM' | 'FRAME_BAD_CORNER_TYPE' | 'FRAME_SELECT_PROFILE' | 'FRAME_PROFILE_REGION' | 'FRAME_NO_INTERNAL_TRIM' | 'FRAME_MULTIPLE_TRIM_PLANES' | 'FRAME_MULTIPLE_EQUAL_BEAMS_AFTER_SPLIT' | 'FRAME_TRIM_GROUPS' | 'FRAME_DISJOINT_GROUPS' | 'FRAME_CANDIDATE_FACES' | 'FRAME_LENGTHWISE_TRIM' | 'FRAME_TRIM_SELECT_TARGETS' | 'FRAME_TRIM_SELECT_TOOL' | 'FRAME_SELECT_PATH' | 'FRAME_TAG_PROFILE_HEADER_RESERVED' | 'FRAME_CUTLIST_COLUMN_EMPTY' | 'FRAME_TAG_PROFILE_NO_FEATURE_PATTERN' | 'FRAME_CUTLIST_NO_FEATURE_PATTERN' | 'SPLIT_EDGE_SELECT_EDGES' | 'SPLIT_EDGE_SIZES_MISMATCH' | 'SPLIT_EDGE_PARAMETER_BOUND' | 'SPLIT_EDGE_FAILED' | 'SPLIT_CLOSED_EDGE_ONE_POINT' | 'SPLIT_EDGE_PROVIDE_PARAMETERS' | 'NO_MATERIAL_FOR_COMPOSITE_PART_COMPUTED_MASS' | 'FRAME_MULTIPLE_EQUAL_SEGMENTS_AFTER_SPLIT' | 'FRAME_MALFORMED_SEGMENT' | 'SIMULATION_UNSUPPORTED_INSTANCE' | 'MIXED_MODEL_LAYOUT' | 'ADJACENT_MESH_FACES_FOR_CAP_OR_HEAL' | 'NOT_ALL_MESH_FACES_PATTERN' | 'VOLUME_ACCURACY_MUST_BE_HIGH_FOR_REGEN' | 'ASSEMBLY_REPLICATE_INVALID_SEED_MATE' | 'ASSEMBLY_REPLICATE_MISSING_SEED_MATE' | 'DXF_UNKNOWN_ENTITY' | 'DXF_NONUNIFORM_SCALING' | 'DXF_COULD_NOT_READ_FILE' | 'DXF_COULD_NOT_CONVERT_HATCH' | 'DXF_COULD_NOT_CONVERT_BODY' | 'DXF_COULD_NOT_CONVERT_REGION' | 'DXF_BAD_SPLINE_DATA' | 'SIMULATION_LOAD_INSTANCE_SUPPRESSED' | 'DIAMETERS_MUST_BE_EQUAL' | 'NOT_CONVEX' | 'SELECT_CYLINDER_EDGES' | 'NOT_CYLINDER_OR_CONE' | 'UNABLE_TO_FIND_THREAD_BOUNDARY' | 'UNDERCUT_OFF_FACE' | 'UNDERCUT_TOO_DEEP' | 'HOLE_CBORE_CSINK_VALUES_NON_STD' | 'SHEET_METAL_FLANGE_PARAMETER_BOUND' | 'SHEET_METAL_FLANGE_ZERO_WIDTH' | 'SHEET_METAL_FLANGE_NO_BOUNDING_ENTITY' | 'SHEET_METAL_FLANGE_BOUNDING_ENTITY_PARALLEL' | 'SHEET_METAL_FLANGE_BOUNDING_ENTITY_NOT_SUPPORTED' | 'FRAME_BAD_COMPOSITE_SEGMENT' | 'SKETCH_SPLINE_POINT_HAS_HANDLE' | 'SKETCH_TRIM_NO_SPLINE_CONTROL_POLYGON' | 'SELECTED_NON_MATCHING_SIZE' | 'NEAREST_MATCHING_THREAD_SIZE' | 'SKETCH_PATTERN_NO_SPLINE_CONTROL_POLYGON' | 'SKETCH_TRANSFORM_NO_SPLINE_CONTROL_POLYGON' | 'SKETCH_FILLET_NO_SPLINE_CONTROL_POLYGON' | 'SKETCH_MIRROR_NO_SPLINE_CONTROL_POLYGON' | 'SKETCH_SPLIT_NO_SPLINE_CONTROL_POLYGON' | 'VARIABLE_SELECT_FIRST_ENTITY' | 'VARIABLE_SELECT_SECOND_ENTITY' | 'VARIABLE_SELECT_CUSTOM_DIRECTION' | 'VARIABLE_SELECT_ENTITIES_TO_MEASURE' | 'VARIABLE_SELECT_ENTITY_TO_MEASURE' | 'VARIABLE_NO_GEOMETRY_WITH_DIAMETER' | 'VARIABLE_ONLY_TWO_ENTITIES_ALLOWED' | 'VARIABLE_FLATTENED_ENTITIES_MUST_BE_SAME_BODY' | 'CURVE_PROJECTION_FAILED' | 'FACE_INTERSECTION_FAILED' | 'FACE_INTERSECTION_NO_RESULT' | 'FACE_INTERSECTION_UNIQUE_SELECTION' | 'FACE_INTERSECTION_OVERLAPPING_SELECTION' | 'CHAMFER_SIZE_EXCEED_GUSSET_SIZE' | 'EMPTY_GUSSET_SELECTION' | 'CANNOT_FIT_A_GUSSET' | 'NON_FRAME_EDGE_SELECTED' | 'SWEPT_EDGE_SELECTED' | 'NO_CAP_FACE_SELECTED_ERROR' | 'INVALID_CAP_FACE_SELECTED_ERROR' | 'CAP_MULTI_FACE_SELECTED_ERROR' | 'CAP_MULTI_LUMENS_SELECTED_ERROR' | 'CAP_CURVED_FRAME_ERROR' | 'CAP_FRAME_AXIS_ERROR' | 'VARIABLE_CANNOT_USE_MAXIMUM_WITH_INFINITE_ENTITIES' | 'VARIABLE_NO_AXIS_ENTITIES' | 'CURVE_PROJECTION_NO_RESULT' | 'BSURF_FAILED' | 'BSURF_PROFILE_FAILED' | 'BSURF_INCONSISTENT_BOUNDARY_CONDITIONS' | 'FGS_SIMULATION_ERROR_SIMULATION_NON_CONVERGENT' | 'FGS_SIMULATION_ERROR_LATERAL_BEARING_FORCE' | 'FGS_SIMULATION_ERROR_LOADS_NONE' | 'FGS_SIMULATION_ERROR_CONSTRAINTS_NONE' | 'FGS_SIMULATION_ERROR_CONSTRAINTS_ONLY_KINEMATIC' | 'FGS_SIMULATION_ERROR_INTERNAL_ERROR' | 'DXF_COULD_NOT_CONVERT_TEXT' | 'FGS_SIMULATION_ASSEMBLY_TOO_COMPLEX' | 'SPLIT_SELECT_FACE_DIRECTION' | 'SELECTION_IS_INVALID' | 'CANNOT_ADD_MORE_THAN_ONE_THREAD_TO_UNSPLIT_CYLINDER' | 'UNDERCUT_TOO_SHALLOW' | 'CAP_INCLINED_CUT_FRAME_ERROR' | 'SPLIT_OFF_FACE' | 'UNDERCUT_DIAMETER_TOO_LARGE' | 'PUBLICATION_ACTION_FAILED_NO_PLAN_ACCESS' | 'DISPLAY_STATES_NO_REFERENCE' | 'INVALID_ARC_LENGTH' | 'FILLET_ADJOINING_EDGE_NOT_FILLETED' | 'FILLET_BOUNDARY_INTERSECTS_EDGE' | 'FILLET_BOUNDARY_OVERLAP' | 'FILLET_EDGE_OVERLAPPED_BY_FILLET' | 'FILLET_FACE_RANGE_TOO_LARGE' | 'FILLET_ILLEGAL_END_BOUNDARY' | 'FILLET_OVERLAP' | 'FILLET_OVERLAPS_EDGE_LOOP' | 'FILLET_PRODUCED_SELF_INT_SURFACE' | 'FILLET_RANGE_INCONSISTENT_EDGE' | 'FILLET_REQUIRES_SURFACE_EXTENSION' | 'FILLET_RHO_TOO_LARGE' | 'FILLET_VERTEX_EDGES_COMPLICATED' | 'CHAMFER_ADJOINING_EDGE_NOT_CHAMFERED' | 'CHAMFER_BOUNDARY_INTERSECTS_EDGE' | 'CHAMFER_BOUNDARY_OVERLAP' | 'CHAMFER_EDGE_OVERLAPPED_BY_CHAMFER' | 'CHAMFER_FACE_RANGE_TOO_LARGE' | 'CHAMFER_ILLEGAL_END_BOUNDARY' | 'CHAMFER_OVERLAP' | 'CHAMFER_OVERLAPS_EDGE_LOOP' | 'CHAMFER_PRODUCED_SELF_INT_SURFACE' | 'CHAMFER_RANGE_INCONSISTENT_EDGE' | 'CHAMFER_REQUIRES_SURFACE_EXTENSION' | 'CHAMFER_RHO_TOO_LARGE' | 'CHAMFER_VERTEX_EDGES_COMPLICATED' | 'EDGEBLEND_ADJOINING_EDGE_NOT_BLENDED' | 'EDGEBLEND_BOUNDARY_INTERSECTS_EDGE' | 'EDGEBLEND_BOUNDARY_OVERLAP' | 'EDGEBLEND_EDGE_OVERLAPPED_BY_BLEND' | 'EDGEBLEND_FACE_RANGE_TOO_LARGE' | 'EDGEBLEND_ILLEGAL_END_BOUNDARY' | 'EDGEBLEND_OVERLAP' | 'EDGEBLEND_OVERLAPS_EDGE_LOOP' | 'EDGEBLEND_PRODUCED_SELF_INT_SURFACE' | 'EDGEBLEND_RANGE_INCONSISTENT_EDGE' | 'EDGEBLEND_REQUIRES_SURFACE_EXTENSION' | 'EDGEBLEND_RHO_TOO_LARGE' | 'EDGEBLEND_VERTEX_EDGES_COMPLICATED' | 'SIMULATION_LOAD_ON_FIXED_INSTANCE' | 'FRAME_CUSTOM_ALIGNMENT_POINTS_NOT_IN_SKETCH' | 'NON_MATCHING_SIZE_ERROR' | 'FILL_CANNOT_MATCH_EDGE_ADJACENT_FACES' | 'FILL_ADJACENT_FACE_BAD_INPUT' | 'FRAME_BAD_OFFSET_INDEX' | 'EXTERNAL_THREADS_UNSUPPORTED_ON_SHEET_METAL' | 'THREAD_DEPTH_BEYOND_CYLINDER' | 'VRFILLET_ASYMMETRIC_RADIUS_REQUIRED_AT_VERTEX' | 'VRFILLET_ASYMMETRIC_RADIUS_REQUIRED_AT_POINT' | 'VRFILLET_BAD_COEDGE' | 'FILLET_LEGACY_ASYMMETRIC_UNSUPPORTED' | 'PARTIAL_FILLET_BAD_INPUT_ERROR' | 'GUSSET_EMPTY_ALIGNMENT_SELECTION' | 'GUSSET_ALIGNMENT_NO_INTERSECTION' | 'BRIDGING_CURVE_VERTEX_OR_EDGE_ON_SIDE' | 'CANNOT_USE_PARTIAL_FILLET_IN_SHEET_METAL' | 'PARTIAL_FILLET_CLOSED_PATH_ERROR' | 'WRONG_CYLINDER_EDGE_SELECTED' | 'GUSSET_OFFSET_NOT_PARALLEL' | 'GUSSET_ALIGNED_OFFSET_NOT_PARALLEL' | 'BRIDGING_CURVE_VERTEX_BELONG_TO_FACE' | 'BRIDGING_CURVE_EDGE_BELONG_TO_FACE' | 'BRIDGING_CURVE_NO_START_SELECTION' | 'BRIDGING_CURVE_NO_END_SELECTION' | 'NAMED_VIEW_INVALID' | 'MUTUAL_TRIM_SAME_SURFACE_USED' | 'MUTUAL_TRIM_SURFACE_NOT_SELECTED' | 'MUTUAL_TRIM_GENERIC_ERROR' | 'SHEET_METAL_CANNOT_CUT' | 'BSURF_2_PROFILES' | 'BSURF_OPEN_CHAIN' | 'BSURF_PROFILE_QUALITY' | 'BSURF_PROFILE_MISMATCH' | 'BSURF_INVALID_BOUNDARY_CONDITIONS' | 'BSURF_SOLVE_FAILS' | 'HOLE_CSINK_ANGLE_TOO_WIDE' | 'HOLE_CSINK_ANGLE_TOO_NARROW' | 'EXTRUDE_START_OFFSET_BOUND_NOT_PLANAR' | 'EXTRUDE_START_OFFSET_BOUND_NOT_PARALLEL_TO_EXTRUDED_ENTITIES' | 'EXTRUDE_DIRECTION_COPLANAR' | 'EXTRUDE_DIRECTION_INVALID_ENTITY' | 'BSURF_CONVERGENCE_CURVES' | 'BSURF_CONVERGENCE_TANGENCY' | 'EXTRUDE_SELECT_DIRECTION' | 'EXTRUDE_SELECT_START_OFFSET_ENTITY' | 'BSURF_INCONSISTENT_CONDITIONS_ERROR' | 'PARTIAL_FILLET_INVALID_BOUNDS_ERROR' | 'DOCUMENT_ELEMENT_NOT_FOUND' | 'BSURF_PROFILE_NON_G1' | 'SM_FLAT_OP_FACES_DONT_MATCH' | 'HOLE_REVERSED_BOUNDS' | 'HELIX_INPUT_AXIS' | 'HELIX_BOTH_RADII_ZERO' | 'HELIX_START_POINT_MISALIGNED' | 'HELIX_END_POINT_MISALIGNED' | 'FACE_BLEND_SELECT_FACES' | 'FACE_BLEND_FAILED' | 'FACE_BLEND_DIMENSION_TOO_SMALL' | 'FACE_BLEND_DIMENSION_TOO_LARGE' | 'FACE_BLEND_CANNOT_ATTACH' | 'FACE_BLEND_WRONG_LEFT_WALL_SENSE' | 'FACE_BLEND_WRONG_RIGHT_WALL_SENSE' | 'FACE_BLEND_WRONG_SENSES' | 'FACE_BLEND_LEFT_WALL_MULTIPLE_BODIES' | 'FACE_BLEND_RIGHT_WALL_MULTIPLE_BODIES' | 'FACE_BLEND_INCONSISTENT_DATA' | 'FACE_BLEND_INVALID_TANGENT_HOLD_LINE' | 'FACE_BLEND_INVALID_CONIC_HOLD_LINE' | 'FACE_BLEND_BAD_SPINE' | 'FACE_BLEND_RHO_TOO_LARGE' | 'FACE_BLEND_RHO_INVALID' | 'FACE_BLEND_SELF_INTERSECTION' | 'FACE_BLEND_INVALID_CAP' | 'FACE_BLEND_INVALID_LIMIT' | 'FACE_BLEND_INVALID_LIMIT_DIRECTION' | 'FACE_BLEND_SPINE_ZERO_ANGLE_PROPAGATION' | 'FACE_BLEND_SPINE_TANGENT_PROPAGATION' | 'FACE_BLEND_SELECT_SPINE' | 'FACE_BLEND_HOLD_LINE_IN_WALLS' | 'FACE_BLEND_TANGENT_HL_ASYMMETRIC' | 'FACE_BLEND_WIDTH_HOLD_LINES' | 'FACE_BLEND_EDGE_LIMIT_NEEDS_SIDE' | 'FACE_BLEND_INVALID_PLANE_LIMIT' | 'FACE_BLEND_INVALID_PROPAGATION_ANGLE' | 'OFFSET_WIRE_GENERIC_ERROR' | 'OFFSET_WIRE_SELECT_WALL_PATH' | 'OFFSET_WIRE_DIR1_FAILED' | 'OFFSET_WIRE_DIR2_FAILED' | 'FACE_BLEND_SOLID_LONG_ATTACH' | 'OFFSET_WIRE_SHAPES_NON_CONSISTENT' | 'OFFSET_WIRE_MULTIPLE_SHAPES' | 'BOOLEAN_NON_MANIFOLD_RESULT' | 'DRAWING_ASSEMBLY_NONMANIFOLD_SECTION_CUT' | 'DRAWING_PARTSTUDIO_NONMANIFOLD_SECTION_CUT' | 'MOVE_CURVE_BOUNDARY_FAILED' | 'MOVE_CURVE_BOUNDARY_EXTENSION_NO_INTERSECTION' | 'MOVE_CURVE_BOUNDARY_TRIM_NO_INTERSECTION' | 'MOVE_CURVE_BOUNDARY_SELECT_CURVE' | 'MOVE_CURVE_BOUNDARY_SELECT_TRIM_BOUNDARY' | 'MOVE_CURVE_BOUNDARY_SELECT_EXTEND_BOUNDARY' | 'MOVE_CURVE_BOUNDARY_NO_SKETCH_ENTITIES' | 'MOVE_CURVE_BOUNDARY_ONLY_WIRES' | 'MOVE_CURVE_BOUNDARY_SELECT_HELP_POINT' | 'MOVE_CURVE_BOUNDARY_EXTEND_REQUIRES_OPEN_CURVE' | 'MOVE_CURVE_BOUNDARY_SPLIT_CLOSED_AT_TWO_POINTS' | 'HOLE_NO_END_BOUNDS' | 'HOLE_TAP_TOO_DEEP' | 'MOVE_CURVE_BOUNDARY_TOOL_IS_TARGET' | 'DRAWING_IGNORE_FAULTY_PARTS' | 'ISOCLINE_NO_RESULT' | 'ISOCLINE_SELECT_FACES' | 'ISOCLINE_SELECT_DIRECTION' | 'ISOCLINE_FAILED' | 'FGS_GENERATIVE_OPT_MAX_ITERATIONS' | 'FGS_GENERATIVE_TARGET_VOLUME_LOW' | 'FGS_GENERATIVE_TARGET_VOLUME_LARGE' | 'FGS_GENERATIVE_THIN_GENERIC' | 'FGS_GENERATIVE_SYMMETRY_DEF_PROBLEM' | 'FGS_GENERATIVE_MINRADIUS_SMALL' | 'FGS_GENERATIVE_MINRADIUS_LARGE' | 'FGS_GENERATIVE_OPT_INVALID_SETUP' | 'CURVE_PATTERN_DISTANCE_TOO_LARGE' | 'BEND_REPLACEMENT_HEAL_FAILED' | 'CANNOT_COPY_CONSTRAINTS' | 'PARAMETER_EXPRESSION_VALIDATION_UNITS_MISMATCH_3ARGS' | 'PARAMETER_EXPRESSION_VALIDATION_SYNTAX_ERROR_0ARGS' | 'PARAMETER_EXPRESSION_VALIDATION_RESERVED_ID_1ARG' | 'PARAMETER_EXPRESSION_VALIDATION_CANNOT_APPLY_OP_TO_1ARG' | 'PARAMETER_EXPRESSION_VALIDATION_CANNOT_APPLY_OP_TO_2ARGS' | 'PARAMETER_EXPRESSION_VALIDATION_CANNOT_APPLY_OP_TO_3ARGS' | 'PARAMETER_EXPRESSION_VALIDATION_INCORRECT_TYPE' | 'PARAMETER_EXPRESSION_UNKNOWN_FUNCTION' | 'PARAMETER_EXPRESSION_UNKNOWN_VARIABLE' | 'REVOLVE_NOT_COPLANAR_WITH_AXIS' | 'FRAME_ANGLE_REFERENCE_INVALID_ENTITY' | 'AMBIGUOUS_GEOMETRY_FOR_GUSSET_DEFINITION' | 'HOLE_START_BOUND_INVALID' | 'HOLE_NO_START_BOUND' | 'BODY_DRAFT_FAILED' | 'BODY_DRAFT_NO_REFERENCES' | 'BODY_DRAFT_NO_ANGLES' | 'BODY_DRAFT_INVALID_ABOVE_ANGLE' | 'BODY_DRAFT_INVALID_BELOW_ANGLE' | 'BODY_DRAFT_INVALID_PARTING_ENTITY' | 'BODY_DRAFT_INVALID_PULL_DIRECTION' | 'BODY_DRAFT_MITER_NEED_BOTH_SIDES' | 'BODY_DRAFT_EDGE_SEPARATION_FAILED' | 'BODY_DRAFT_EDGE_SPLIT_FAILED' | 'BODY_DRAFT_ISOCLINE_SPLIT_FAILED' | 'BODY_DRAFT_PARTING_PLANE_SHEET_ERROR' | 'BODY_DRAFT_INVALID_REFERENCE' | 'BODY_DRAFT_REFERENCE_LOOP' | 'BODY_DRAFT_TOO_STEEP' | 'BODY_DRAFT_BAD_PULL_DIRECTION' | 'BODY_DRAFT_MITER_FAILED' | 'DECAL_HORIZONTAL_REFERENCE_INVALID_ENTITY' | 'OFFSET_WIRE_SHEET_CREATION_FAILED' | 'REPLACE_FACE_SHEET_SMALL' | 'REPLACE_FACES_NOT_ADJACENT' | 'SHEET_METAL_HOLE_REBUILD_FAILED' | 'CPLANE_TANGENT_INPUT' | 'CPLANE_TANGENT_SELECT_REFERENCE' | 'CPLANE_TANGENT_PLANE_INVALID' | 'CPLANE_TANGENT_POINT_INVALID' | 'REPLACE_FACES_NOT_SAME_BODY' | 'MUST_USE_DEFAULT_RADIUS_WITH_FACE_BEND' | 'CANNOT_RIP_A_FACE_BEND' | 'CANNOT_MAKE_A_FACE_BEND_TANGENT' | 'SKETCH_HAS_PATTERN_TOO_LARGE' | 'SKETCH_LINEAR_PATTERN_FAILED' | 'DECAL_PROJECTED_OFF_FACE' | 'FIT_TOLERANCE_LIMITS_NOT_FOUND' | 'FIT_TOLERANCE_SIZE_TOO_LARGE_ISO' | 'FIT_TOLERANCE_SIZE_TOO_LARGE_ANSI' | 'DECAL_NO_FACE_SELECTION' | 'DECAL_NO_IMAGE_SELECTION' | 'DECAL_IMAGE_TOO_LARGE' | 'FGS_SIMULATION_ASSEMBLY_HAS_NO_INSTANCES' | 'FGS_SIMULATION_ASSEMBLY_HAS_TOO_FEW_INSTANCES' | 'FGS_MODAL_SIMULATION_HAS_ALL_FIXED_PARTS' | 'BODY_DRAFT_STRAY_NONMITER_EDGES' | 'MASS_PROPERTY_FACES_NOT_COPLANAR' | 'PARAMETER_VALUE_INVALID' | 'SHEET_METAL_CHAMFER_NO_TANGENT_BASED' | 'CHAMFER_DIRECTION_OVERRIDE_NO_EFFECT' | 'FILLET_CHAMFER_UNSUPPORTED' | 'LINEAR_PATTERN_SKETCH_REAPPLY_INFO' | 'CIRCULAR_PATTERN_SKETCH_REAPPLY_INFO' | 'CURVE_PATTERN_SKETCH_REAPPLY_INFO' | 'MIRROR_SKETCH_REAPPLY_INFO' | 'CHAMFER_HELD_BACK' | 'SWEEP_BAD_LOCK_DIRECTION' | 'SHEET_METAL_COUNTER_HOLE_UNSUPPORTED' | 'SPECIFIED_FEATURE_DOES_NOT_EXIST' | 'SHEET_METAL_BEND_NO_BEND_LINE' | 'SHEET_METAL_BEND_BAD_BEND_LINE' | 'SHEET_METAL_BEND_NO_FACE' | 'SHEET_METAL_BEND_NO_PARALLEL' | 'SHEET_METAL_BEND_NO_DIRECTION' | 'SHEET_METAL_BEND_BAD_FACE' | 'SHEET_METAL_BEND_IMPRINT_FAILED' | 'SHEET_METAL_BEND_BAD_DECOMPOSITION' | 'SHEET_METAL_BEND_LINE_PERPENDICULAR_TO_FACE' | 'SWEEP_SELECT_DIRECTION' | 'SHEET_METAL_BEND_ROLL_FAILED' | 'SHEET_METAL_BOTH_SIDES_CONNECTED' | 'SHEET_METAL_CANNOT_BEND_BUTTS' | 'SHEET_METAL_BEND_COLLISION' | 'MISSING_PARAMETER_REFERENCE' | 'MISSING_IMAGE_PARAMETER_REFERENCE' | 'BODY_DRAFT_SELECT_EDGES' | 'BODY_DRAFT_SELECT_FACES' | 'BODY_DRAFT_SELECT_PARTS' | 'SPLIT_EDGE_INVALID_SURFACE' | 'BODY_DRAFT_NO_EFFECT' | 'OFFSET_CURVE_ON_FACE_SELECT_EDGES' | 'OFFSET_CURVE_ON_FACE_WIRE_EDGES' | 'OFFSET_CURVE_ON_FACE_INVALID_TARGETS' | 'OFFSET_CURVE_ON_FACE_INVALID_DISTANCE' | 'OFFSET_CURVE_ON_FACE_IMPRINT_NO_EXTEND' | 'OFFSET_CURVE_ON_FACE_FAILED_TO_CREATE_CHAIN' | 'OFFSET_CURVE_ON_FACE_BRANCHING_CHAIN' | 'OFFSET_CURVE_ON_FACE_FAILED' | 'OFFSET_CURVE_ON_FACE_BAD_DIRECTION' | 'OFFSET_CURVE_ON_FACE_GEODESIC_OUTSIDE' | 'OFFSET_CURVE_ON_FACE_EXTENSION_FAILED' | 'OFFSET_CURVE_ON_FACE_CHAIN_YIELDED_NO_RESULT' | 'OFFSET_CURVE_ON_FACE_NO_RESULT' | 'OFFSET_CURVE_ON_FACE_INPUT_WITH_NO_TARGETS' | 'OFFSET_CURVE_ON_FACE_EUCLIDEAN_SIDE_PICK_FAIL' | 'OFFSET_CURVE_ON_FACE_SCAR_EDGE' | 'OFFSET_CURVE_ON_FACE_CLOSED_CURVE_NO_TRIM' | 'OFFSET_CURVE_ON_FACE_SIDE_DIFF_FAIL' | 'ANGLE_CONTROL_PARALLEL_TO_BEND' | 'BODY_DRAFT_PARTING_SURFACE_SMALL' | 'MASS_PROPERTY_MATE_CONNECTOR_Z_AXIS_NOT_NORMAL' | 'DERIVED_MATE_CONNECTOR_INDEX_OUT_OF_BOUNDS' | 'DERIVED_MATE_CONNECTOR_NO_LONGER_VALID' | 'DERIVED_MATE_CONNECTOR_RESET' | 'DERIVED_NO_MATE_CONNECTORS' | 'TESSELLATED_LOFT_ERROR' | 'BODY_DRAFT_INVALID_FACE_REFERENCE' | 'BODY_DRAFT_INVALID_EDGE_REFERENCE' | 'BODY_DRAFT_INVALID_PART_REFERENCE' | 'HOLE_CANNOT_DETERMINE_TAPPED_BODY' | 'HOLE_PARAMS_OVERRIDDEN_INFO' | 'HOLE_TAP_DIA_TOO_LARGE_OR_EQUAL' | 'SPLIT_AS_MODIFICATION_MULTIPLE_RESULTS' | 'FORMED_TAG_FORM_NO_FEATURE_PATTERN' | 'FORMED_TAG_FORM_SELECT_DIFFERENT_PARTS' | 'FORMED_TAG_FORM_SELECT_SKETCH' | 'FORMED_TAG_FORM_SELECT_SOMETHING' | 'ISOPARAMETRIC_CURVE_SELECT_FACE' | 'ISOPARAMETRIC_CURVE_SELECT_POINT' | 'ISOPARAMETRIC_CURVE_SELECT_POSITION' | 'ISOPARAMETRIC_CURVE_POINT_NOT_ON_FACE' | 'THIN_SWEEP_3D_PROFILE_TRIM_WARNING' | 'THIN_SWEEP_FAILED_TO_FIND_TRIM_PLANES_WARNING' | 'THIN_SWEEP_TRIM_FAILED' | 'ISOPARAMETRIC_CURVE_SELECT_SINGLE_FACE' | 'HOLE_FASTENER_FIT_IS_NOT_APPLICABLE' | 'PATTERN_SKIPPED_INSTANCES_SEED_INDEX' | 'PATTERN_SKIPPED_INSTANCES_OUT_OF_RANGE_INDEX' | 'FORMED_SELECT_LOCATION' | 'FORMED_NO_PART_STUDIO_SELECTED' | 'FORMED_SELECT_LOCATION_ON_ACTIVE_FACE' | 'FORMED_LOCATION_ON_MULTIPLE_FACES' | 'FORMED_NOT_ON_HOLE_FORMED_FACE' | 'THIN_SWEEP_THICKEN_FAILED' | 'DERIVED_NO_PARTS' | 'DERIVED_NO_INSTANCING' | 'DERIVED_NO_SAME_SOURCE' | 'DERIVED_FULL_FEATURE_PATTERN' | 'THIN_LOFT_3D_PROFILE_TRIM_WARNING' | 'THIN_LOFT_FAILED_TO_FIND_TRIM_PLANES_WARNING' | 'THIN_LOFT_THICKEN_FAILED' | 'FGS_MODAL_SIMULATION_MAXIMUM_RIGID_MODES_REACHED' | 'ASSEMBLY_MIRROR_PLANE_ERROR' | 'POLYLINE_CONSECUTIVE_EQUAL_POINTS' | 'POLYLINE_ZERO_ANGLE' | 'POLYLINE_BEND_RADII_INVALID_SIZE' | 'POLYLINE_INVALID_BEND' | 'SKETCH_MISSING_LOCAL_REFERENCE' | 'SKETCH_DIMENSION_MISSING_PARAMETER' | 'MATECONNECTOR_QUERY_SECONDARY_AXIS_CONFLICT' | 'MATECONNECTOR_NORMAL_RESOLUTION_FAILED' | 'LOFT_PLANAR_GUIDE_NOT_FOUND' | 'PART_STUDIO_DOES_NOT_EXIST_IN_MOMENT' | 'SOME_BODIES_WERE_REMOVED_FROM_EXPORT' | 'ALL_BODIES_WERE_REMOVED_FROM_EXPORT' | 'CONFIG_NO_PARAMETERS_FOUND' | 'CONFIG_INCORRECT_PARAMETER_TYPE' | 'CONFIG_TOO_MANY_PARAMETERS' | 'REFERENCE_REPAIR_MISSING_CONFIGURATION' | 'SKETCH_CANNOT_MAKE_2_POINTS_BEZIER' | 'PART_INSTANCE_SELECTED_IN_MULTIPLE_GENERATIVE_DESIGNS' | 'CURVE_PATTERN_LOCK_FACES_INTERSECTION_FAILED' | 'SIMULATION_MATERIAL_LACKS_REQUIRED_PROPERTY_DENSITY' | 'SIMULATION_MATERIAL_LACKS_REQUIRED_PROPERTY_POISSONS_RATIO' | 'SIMULATION_MATERIAL_LACKS_REQUIRED_PROPERTY_YOUNGS_MODULUS' | 'SIMULATION_MATERIAL_LACKS_REQUIRED_PROPERTY_TENSILE_YIELD_STRENGTH' | 'SIMULATION_ASSEMBLY_HAS_UNSUPPORTED_MATES' | 'ASSEMBLY_NAMED_POSITIONS_OUTSIDE_MATE_LIMIT' | 'ASSEMBLY_NAMED_POSITIONS_SUBASSEMBLY_OUTSIDE_MATE_LIMIT' | 'GENERATIVE_RUN_WAS_CANCELED' | 'SKETCH_CHAMFER_INVALID_POINT' | 'SKETCH_CHAMFER_PARALLEL' | 'SKETCH_CHAMFER_FAIL' | 'SKETCH_CHAMFER_INVALID_INPUTS' | 'ASSEMBLY_FEATURE_MISSING_SELECTION' | 'ASSEMBLY_NAMED_POSITIONS_LOCKED_SUBASSEMBLY_FOUND' | 'CURVE_PATTERN_MISSING_FACE_SELECTION' | 'TL_CONNECTION_ON_ALL_PROFILES' | 'TL_FAILED' | 'TL_CONNECTIONS_CROSS' | 'TL_SELECT_PROFILES' | 'TL_TWO_PROFILES' | 'TL_CONSECUTIVE_ACORNS' | 'TL_MIXED_PROFILES' | 'TL_MIXED_PROFILE_TOPOLOGY' | 'TL_FAILED_TO_CREATE_PROFILES' | 'TL_CONNECTION_NOT_ON_PROFILE' | 'SHEET_METAL_FILLET_NO_VARIABLE' | 'PARTIALLY_INVALID_INPUT' | 'SKETCH_BEZIER_DEGREE_DIM_NOT_FOUND' | 'INVALID_BEZIER_DEGREE' | 'CANNOT_DELETE_BEZIER_DEGREE_DIMENSION' | 'DERIVED_NO_INSTANCING_SM' | 'DERIVED_SM_AUTO_INSERT' | 'ASSEMBLY_PATTERN_WRONG_REFERENCE_WAS_SELECTED' | 'ASSEMBLY_PATTERN_REFERENCE_COULD_NOT_BE_FOUND' | 'DERIVED_NO_ACTIVE_SM_COMPOSITE' | 'PARTIAL_FILLET_INVALID_BOUND_ENTITY' | 'FGS_THICKNESS_UNCLOSED_INPUT' | 'FGS_THICKNESS_INTERNAL_ERROR' | 'SKETCH_SPLIT_NO_BEZIER' | 'SKETCH_TRIM_NO_BEZIER' | 'EXPORT_NO_PARTS' | 'SHEET_METAL_FILLET_OPTIONS_USE_CORNER_BREAK' | 'SHEET_METAL_CHAMFER_OPTIONS_USE_CORNER_BREAK' | 'SHEET_METAL_ATTRIBUTE_CORNER_BREAK_UNSUPPORTED_SELECTION' | 'SHEET_METAL_USE_CORNER_BREAK_INFO' | 'DRAWING_VIEW_CORRESPONDENCE_FAILED' | 'EDIT_CURVE_SELECT_PLANE' | 'EDIT_CURVE_SELECT_WIRE' | 'EDIT_CURVE_MULTIPLE_EDGES' | 'EDIT_CURVE_DEGREE_TOO_HIGH' | 'EDIT_CURVE_INDEX_TOO_LARGE' | 'EDIT_CURVE_PERIODICITY_CHANGE' | 'EDIT_CURVE_FAILED' | 'EDIT_CURVE_NOT_WIRE' | 'EDIT_CURVE_CANNOT_EDIT_SKETCH_WIRE' | 'EDIT_CURVE_LOCK_ENDS_PERIODIC' | 'EDIT_CURVE_NO_BEST_FIT' | 'PARTIAL_FILLET_OFFSET_BOUNDARY_TOO_LARGE' | 'ASSEMBLY_MIRROR_INVALID_SEED' | 'FLATTEN_COULD_NOT_FLATTEN' | 'FLATTEN_SELECT_CONTIGUOUS_REGION' | 'RULED_SURFACE_BAD_VERTEX' | 'EDIT_CURVE_TOO_MANY_CONTROL_POINTS' | 'EDIT_CURVE_NO_END_OVERLAP' | 'EDIT_CURVE_APPROXIMATION_DEGREE_TOO_SMALL' | 'EDIT_CURVE_CLOSED_APPROXIMATION_NO_DERIVATIVE' | 'CONFIGURATION_PARAMETER_HAS_BAD_VISIBILITY_CONDITION' | 'SHEET_METAL_FORMED_REBUILD_FAILED' | 'SKETCH_PROFILE_ANALYSIS_FAILED' | 'FORMED_SPLIT_PART' | 'LOFT_NO_DIRECTION_FOR_START' | 'LOFT_NO_DIRECTION_FOR_END' | 'TOO_MANY_SAMPLES' | 'FORMED_TOOL_NOT_NORMAL_TO_FACE' | 'SHEET_METAL_ACTIVE_MODEL_NEEDED' | 'SHEET_METAL_SELECT_PARTS' | 'SHEET_METAL_INACTIVE_MODEL_SELECTED' | 'FORMED_NOT_SAME_LOCATION' | 'SIMULATION_MASS_OVERRIDE_WILL_BE_IGNORED' | 'SIMULATION_MASS_OVERRIDE_ARE_IGNORED' | 'FORMED_TAG_FORM_SELECT_SKETCH_WITH_WIRE_POINT' | 'FORMED_TAG_FORM_BODIES_ALREADY_TAGGED' | 'FORMED_TAG_FORM_POSITIVE_PART_NOT_SOLID' | 'FORMED_TAG_FORM_NEGATIVE_PART_NOT_SOLID' | 'FORMED_TAG_FORM_POSITIVE_PART_CONSUMED' | 'FORMED_TAG_FORM_NEGATIVE_PART_CONSUMED' | 'FORMED_BOOLEAN_UNION_NO_OP' | 'FORMED_BOOLEAN_SUBTRACT_NO_OP' | 'FORMED_FAILED_TO_DERIVE' | 'TWO_WIDTH_MATECONNECTORS_NEEDED' | 'ONE_TAB_MATECONNECTOR_NEEDED' | 'TWO_TAB_MATECONNECTORS_NEEDED' | 'FORMED_TAG_FORM_ORIGIN_OUTSIDE_TOOLS_BBOX' | 'FORMED_TOOLS_INTERSECT_CANNOT_CUT' | 'ROUTING_CURVE_AT_LEAST_TWO_DISTINCT_POINTS' | 'ROUTING_CURVE_ORTHO_PATH_ALREADY_AXIS_ALIGNED' | 'ROUTING_CURVE_INVALID_PATH' | 'ROUTING_CURVE_CSV_INVALID_DATA' | 'ROUTING_CURVE_CSV_NOT_ENOUGH_COLUMNS' | 'EXTEND_TO_PART_FAILED' | 'EXTEND_OFFSET_FAILED' | 'SKETCH_PATTERN_NEEDS_SEED' | 'WRAP_NEEDS_DIFFERENT_ANCHOR' | 'CANNOT_RESOLVE_PART_STUDIO' | 'CANNOT_RESOLVE_ASSEMBLY' | 'NO_MESH_FOUND' | 'CONSTRAINED_SURFACE_TOO_FEW_POINTS' | 'CONSTRAINED_SURFACE_BAD_TOLERANCE' | 'CONSTRAINED_SURFACE_BAD_POSITION' | 'CONSTRAINED_SURFACE_FAILED_TOLERANCE' | 'CONSTRAINED_SURFACE_FAILED' | 'CONSTRAINED_SURFACE_SELECT_MESH' | 'ROUTING_CURVE_SELECT_CURVE' | 'ROUTING_CURVE_AT_LEAST_THREE_DISTINCT_POINTS' | 'ASSEMBLY_MIRROR_HAS_REFERENCE_ERRORS' | 'ASSEMBLY_MIRROR_HAS_NO_REFERENCE_ERRORS' | 'FEATURE_NOT_PROVIDED' | 'TOLERANT_OFFSET_END_CONSUMED' | 'TOLERANT_OFFSET_NOT_TO_FACE' | 'TOLERANT_DEPTH_NO_SECOND' | 'TOLERANT_DEPTH_END_CONSUMED' | 'MIXED_THICKNESS_TOLERANCE' | 'DOUBLE_THICKNESS_TOLERANCE' | 'TOLERANT_ANGLE_NO_SECOND' | 'TOLERANT_ANGLE_END_CONSUMED' | 'TOLERANT_THICKNESS_NEEDS_PLANE' | 'TOLERANT_SOLID_ONLY' | 'TOLERANT_INVALID_OFFSET_TARGET' | 'SHEET_METAL_HEM_ADJACENT_CONE' | 'SHEET_METAL_FLANGE_ADJACENT_CONE' | 'SHEET_METAL_BEND_RELIEF_CONE' | 'SHEET_METAL_ACTIVE_MODEL_CANNOT_OFFSET' | 'TRIM_TO_MULTI_FAILED_FOR_UPTO_BODY' | 'LOFT_CONNECTION_EDGE_PARAMETER_MISMATCH' | 'SHEET_METAL_NO_CONE_APEX' | 'SIMULATION_MATERIAL_PROPERTY_OUTSIDE_REQUIRED_BOUNDS' | 'FGS_CONNECTIONS_ASSEMBLY_TOO_COMPLEX' | 'THIN_EXTRUDE_NOT_PARALLEL_PLANES' | 'WIDTH_AND_TAB_MATECONNECTORS_ON_SAME_OCCURRENCE' | 'MIRROR_INVALID_SEED_ASSEMBLY' | 'CANNOT_COMPUTE_MAX_DEVIATION' | 'CANNOT_COMPUTE_MIN_DEVIATION' | 'ASSEMBLY_MIRROR_INVOLVES_FIXED_OCCURRENCES' | 'QUERY_VARIABLE_EMPTY_NAME' | 'FEATURES_WITH_CYCLIC_DEPENDENCY_DETECTED' | 'ASSEMBLY_MIRROR_RECURSIVE_SEED' | 'QUERY_VARIABLE_NAME_ALREADY_USED_IN_NON_QUERY_VARIABLE' | 'QUERY_VARIABLE_EMPTY_SELECTION' | 'QUERY_VARIABLE_NAME_CANNOT_START_WITH_POUND' | 'VARIABLE_NAME_ALREADY_USED_IN_QUERY_VARIABLE' | 'ASSEMBLY_MIRROR_TARGET_PART_MISSING' | 'ASSEMBLY_MIRROR_TARGET_FEATURE_MISSING' | 'ASSEMBLY_MIRROR_TARGET_ELEMENT_MISSING' | 'ASSEMBLY_MIRROR_DERIVED_ELEMENT_CONFIGURATIONS_INVALID' | 'ASSEMBLY_DERIVED_MIRROR_REFERENCE_MISSING' | 'INVALID_SUPPRESSION_EXPRESSION' | 'ASSEMBLY_MIRROR_CHILD_HAS_REFERENCE_ERROR' | 'THICKNESS_NO_CLOSED_COMPOSITES' | 'VALUE_WITH_UNITS_ERROR' | 'ROW_INDEX_RANGE_ERROR' | 'ROW_INDEX_MIN_ERROR' | 'ROW_INDEX_MAX_ERROR' | 'ROW_INDEX_ERROR' | 'ROW_LABEL_INDEX_ERROR' | 'COL_INDEX_RANGE_ERROR' | 'COL_INDEX_MIN_ERROR' | 'COL_INDEX_MAX_ERROR' | 'COL_INDEX_ERROR' | 'COL_LABEL_INDEX_ERROR' | 'QUERY_VARIABLE_NAME_CANNOT_CONTAIN_QUOTE' | 'DRAWING_EMPTY_SECTION_TARGET_BODY' | 'SKETCH_CANNOT_EVALUATE_PATTERN_PARAMETER' | 'TL_SELF_INTERSECTING_BODY' | 'SKETCH_PATTERN_MISSING_PARAMETER' | 'SKETCH_PATTERN_INVALID_VALUE' | 'UNKNOWN';

/**
 * Determines export resolution of fine, medium, or coarse
 */
export type GbtExportResolution = 'FINE' | 'MEDIUM' | 'COARSE' | 'UNKNOWN';

/**
 * Units to export the model with.
 */
export type GbtExportUnit = 'METER' | 'CENTIMETER' | 'MILLIMETER' | 'INCH' | 'FOOT' | 'YARD' | 'UNKNOWN';

export type GbtFeatureFilterExclusion = 'EXCLUDE_EVERYTHING_ELSE' | 'EXCLUDE_THIS' | 'UNKNOWN';

export type GbtFieldWeldFlag = 'NONE' | 'UPPER' | 'LOWER' | 'UNKNOWN';

export type GbtFilterFlattenedGeometryOptions = 'MODEL_ONLY' | 'FLATTENED_ONLY' | 'MODEL_AND_FLATTENED' | 'UNKNOWN';

export type GbtgTolConstraintType = 'TRUE_POSITION' | 'PARALLELISM' | 'PERPENDICULARITY' | 'PROFILE_SURFACE' | 'TOTAL_RUNOUT' | 'CONCENTRICITY' | 'SYMMETRY' | 'ANGULARITY' | 'CYLINDRICITY' | 'FLATNESS' | 'ROUNDNESS' | 'STRAIGHTNESS' | 'PROFILE_LINE' | 'CIRCULAR_RUNOUT' | 'UNKNOWN';

export type GbtGeometryType = 'LINE' | 'CIRCLE' | 'ARC' | 'PLANE' | 'CYLINDER' | 'CONE' | 'SPHERE' | 'TORUS' | 'SPLINE' | 'ELLIPSE' | 'MESH' | 'CONIC' | 'REVOLVED' | 'EXTRUDED' | 'ALL_MESH' | 'MIXED_MESH' | 'SPLINE_INTERNAL_POINT' | 'SPLINE_CONTROL_POLYGON' | 'ELLIPTICAL_ARC' | 'UNKNOWN';

export type GbtGraphicsBufferTarget = 'ARRAY_BUFFER' | 'ELEMENT_ARRAY_BUFFER' | 'UNKNOWN';

export type GbtHoleType = 'SIMPLE' | 'C_BORE' | 'C_SINK' | 'UNKNOWN';

export type GbtInsertableType = 'PARTS' | 'SKETCHES' | 'SURFACES' | 'FLATTENED_PARTS' | 'COMPOSITE_PARTS' | 'PART_STUDIOS' | 'WIRES' | 'PARAMETRIC_PART_STUDIOS' | 'UNKNOWN';

export type GbtLoadType = 'FORCE' | 'MOMENT' | 'BEARING_LOAD' | 'ACCELERATION' | 'PRESSURE' | 'ANGULAR_VELOCITY' | 'UNKNOWN';

export type GbtmGeomStatus = 'UNKNOWN' | 'UNDER_DEFINED' | 'WELL_DEFINED' | 'FIXED' | 'OVER_DEFINED' | 'NOT_CONSISTENT';

export type GbtMateType = 'SLIDER' | 'CYLINDRICAL' | 'REVOLUTE' | 'PIN_SLOT' | 'PLANAR' | 'BALL' | 'FASTENED' | 'PARALLEL' | 'UNKNOWN';

export type GbtMeshState = 'NO_MESH' | 'MIXED' | 'ALL_MESH' | 'UNKNOWN';

export type GbtMetadataOverrideStatusType = 'UNKNOWN' | 'PROPERTY_NOT_COMPUTED' | 'COMPUTED_WITH_NO_OVERRIDES' | 'COMPUTED_WITH_OVERRIDES' | 'COMPUTED_WITH_SUBASSEMBLY_OVERRIDES' | 'OVERRIDDEN';

export type GbtMetadataSourceType = 'AUTOMATIC' | 'MERGED' | 'FEATURE' | 'UNCONFIGURED' | 'CONFIGURED' | 'STANDARD_CONTENT' | 'DEFAULT' | 'COMPUTED' | 'COMPUTED_CONFIGURED' | 'IMPORT' | 'UNKNOWN';

export type GbtNodeChange = 'NONE' | 'MOVED' | 'MODIFIED' | 'MOVED_AND_MODIFIED' | 'ADDED' | 'DELETED' | 'UNKNOWN';

export type GbtNodeStatusType = 'OK' | 'INFO' | 'WARNING' | 'ERROR' | 'UNKNOWN';

export type GbtNoticeLevel = 'INTERNAL' | 'ERROR' | 'WARNING' | 'INFO' | 'UNKNOWN';

export type GbtNoticeType = 'PARSE' | 'SEMANTIC' | 'EXECUTION' | 'MODELING' | 'TEST' | 'OTHER' | 'UNKNOWN';

export type GbtpDefinitionType = 'FUNCTION' | 'PREDICATE' | 'CONSTANT' | 'ENUM' | 'USER_TYPE' | 'FEATURE_DEFINITION' | 'FILE_HEADER' | 'UNDOCUMENTABLE' | 'CONST_LAMBDA' | 'UNKNOWN';

export type GbtpOperator = 'NONE' | 'PLUS' | 'MINUS' | 'TIMES' | 'DIVIDE' | 'MODULUS' | 'POWER' | 'NEGATE' | 'OR' | 'AND' | 'NOT' | 'EQUAL_TO' | 'NOT_EQUAL_TO' | 'GREATER' | 'LESS' | 'GREATER_OR_EQUAL' | 'LESS_OR_EQUAL' | 'CONCATENATE' | 'CONDITIONAL' | 'UNDEFINED_COALESCING';

export type GbtpType = 'UNDEFINED' | 'BOOLEAN' | 'NUMBER' | 'STRING' | 'ARRAY' | 'MAP' | 'BOX' | 'BUILTIN' | 'FUNCTION' | 'UNKNOWN';

export type GbtParameterLibraryRelationType = 'NONE' | 'CONTROLLED' | 'OVERRIDE' | 'UNKNOWN';

export type GbtParameterVisibilityLogicalOp = 'NOT' | 'AND' | 'OR' | 'UNKNOWN';

/**
 * Export Parasolid in `BINARY` (.x_b) or `TEXT` (.x_t) mode.
 */
export type GbtParasolidEncodingType = 'TEXT' | 'BINARY' | 'UNKNOWN';

export type GbtPartColorCycleVersion = 'COLOR_CYCLE_0' | 'COLOR_CYCLE_1' | 'UNKNOWN';

export type GbtPartStudioDisplayDataVersion = 'V0_ORIGINAL_VERSION' | 'V1_SMOOTH_EDGES_RENDERING_OPTIONS' | 'V2_SMOOTH_EDGES_TOLERANCE_CHANGED' | 'UNKNOWN';

export type GbtPartStudioInstanceType = 'PART' | 'SKETCH' | 'SURFACE' | 'COMPOSITE' | 'UNKNOWN';

export type GbtPartStudioItemType = 'SOLID' | 'SURFACE' | 'WIRE' | 'MESH' | 'SKETCH' | 'FLATTENED_SHEET_METAL' | 'ENTIRE_PART_STUDIO' | 'CONSTRUCTION_PLANE' | 'COMPOSITE_PART' | 'UNKNOWN';

export type GbtPartVisibility = 'HIDDEN' | 'VISIBLE' | 'UNSPECIFIED' | 'UNKNOWN';

export type GbtPatternType = 'LINEAR' | 'CIRCULAR' | 'UNKNOWN';

/**
 * Original geometry processing mode to improve results of translation to STEP.
 */
export type GbtPreProcessParasolidOption = 'NO_PRE_PROCESSING' | 'USE_BODYSHOP_PRE_PROCESSING_ADVANCED' | 'USE_TRANSLATOR_PRE_PROCESSING' | 'USE_BODYSHOP_PRE_PROCESSING' | 'USE_BODYSHOP_PRE_PROCESSING_ADVANCED_WITH_SURFS_TO_BSURFS_CONVERTING' | 'UNKNOWN';

export type GbtQuantityType = 'UNKNOWN' | 'INTEGER' | 'REAL' | 'LENGTH' | 'ANGLE' | 'MASS' | 'TIME' | 'TEMPERATURE' | 'CURRENT' | 'ANYTHING' | 'ANYTHING_WITH_UNITS' | 'FORCE' | 'PRESSURE' | 'MOMENT' | 'ACCELERATION' | 'ANGULAR_VELOCITY' | 'ENERGY' | 'AREA' | 'VOLUME' | 'BOOLEAN' | 'STRING' | 'DENSITY';

export type GbtRadiusDisplay = 'NONE' | 'RADIAL' | 'DIAMETRAL' | 'UNKNOWN';

export type GbtRhinoVersions = 'V2' | 'V3' | 'V4' | 'V5' | 'V6' | 'V7' | 'V8' | 'UNKNOWN';

export type GbtSimulationContactBehavior = 'MATES_ONLY' | 'FUSE_IN_CONTACT' | 'FUSE_IN_CONTACT_AND_USE_MATES' | 'UNKNOWN';

export type GbtSketchCurveType = 'UNSET' | 'INTERPOLATED_SPLINE' | 'BEZIER_CURVE' | 'UNKNOWN';

export type GbtSketchEntityType = 'CURVE' | 'IMAGE_ENTITY' | 'POINT' | 'TEXT' | 'CIRCLE' | 'CONIC' | 'SPLINE' | 'ELLIPSE' | 'LINE' | 'UNKNOWN';

export type GbtSketchObjectType = 'NOT_SKETCH_OBJECT' | 'ANY_SKETCH_OBJECT' | 'USER_ENTITY' | 'WHOLE_SKETCH' | 'UNKNOWN';

/**
 * STL encoding type, `TEXT | BINARY`
 */
export type GbtStlEncodingType = 'TEXT' | 'BINARY' | 'UNKNOWN';

export type GbtSubAssemblyLockType = 'SUB_ASSEMBLY_POSITION' | 'CURRENT_POSITION' | 'NAMED_POSIITION' | 'UNKNOWN';

export type GbtSurfaceType = 'PLANE' | 'CYLINDER' | 'CONE' | 'SPHERE' | 'TORUS' | 'OTHER' | 'REVOLVED' | 'EXTRUDED' | 'MESH' | 'SPLINE' | 'UNKNOWN';

export type GbtSurfaceTypeEnum = 'PLANE' | 'CYLINDER' | 'CONE' | 'SPHERE' | 'TORUS' | 'SPUN' | 'SWEEP' | 'OFFSET' | 'BLEND' | 'BSURFACE' | 'OTHER' | 'UNKNOWN';

export type GbtTableColumnWidthUnits = 'PERCENT' | 'CHARS' | 'PIXELS' | 'UNKNOWN';

export type GbtTableTextAlignment = 'LEFT' | 'CENTER' | 'RIGHT' | 'UNKNOWN';

export type GbtTessellationSettingEnum = 'AUTO' | 'COARSE' | 'MEDIUM' | 'FINE' | 'VERY_FINE' | 'CURVATURE_VISUALIZATION' | 'UNKNOWN';

export type GbtTolerancePrecision = 'DEFAULT' | 'ONES' | 'TENTHS' | 'HUNDREDTHS' | 'THOUSANDTHS' | 'TEN_THOUSANDTHS' | 'HUNDRED_THOUSANDTHS' | 'MILLIONTHS' | 'UNKNOWN';

export type GbtToleranceType = 'NONE' | 'SYMMETRICAL' | 'DEVIATION' | 'LIMITS' | 'MIN' | 'MAX' | 'FIT' | 'FIT_WITH_TOLERANCE' | 'FIT_TOLERANCE_ONLY' | 'DEFAULT' | 'BASIC' | 'UNKNOWN';

export type GbtuiHint = 'OPPOSITE_DIRECTION' | 'ALWAYS_HIDDEN' | 'SHOW_CREATE_SELECTION' | 'CONTROL_VISIBILITY' | 'NO_PREVIEW_PROVIDED' | 'REMEMBER_PREVIOUS_VALUE' | 'DISPLAY_SHORT' | 'ALLOW_FEATURE_SELECTION' | 'MATE_CONNECTOR_AXIS_TYPE' | 'PRIMARY_AXIS' | 'SHOW_EXPRESSION' | 'OPPOSITE_DIRECTION_CIRCULAR' | 'SHOW_LABEL' | 'HORIZONTAL_ENUM' | 'UNCONFIGURABLE' | 'MATCH_LAST_ARRAY_ITEM' | 'COLLAPSE_ARRAY_ITEMS' | 'INITIAL_FOCUS_ON_EDIT' | 'INITIAL_FOCUS' | 'DISPLAY_CURRENT_VALUE_ONLY' | 'READ_ONLY' | 'PREVENT_CREATING_NEW_MATE_CONNECTORS' | 'FIRST_IN_ROW' | 'ALLOW_QUERY_ORDER' | 'PREVENT_ARRAY_REORDER' | 'VARIABLE_NAME' | 'FOCUS_INNER_QUERY' | 'SHOW_TOLERANCE' | 'ALLOW_ARRAY_FOCUS' | 'SHOW_INLINE_CONFIG_INPUTS' | 'FOCUS_ON_VISIBLE' | 'CAN_BE_TOLERANT' | 'CAN_BE_TOLERANT_DIAMETER' | 'PLUS_MINUS' | 'ALWAYS_USE_DEPENDENCIES' | 'NO_QUERY_VARIABLE' | 'ALLOW_FLAT_SKETCH_SELECTION' | 'QUERY_VARIABLE_NAME' | 'UNKNOWN';

export type GbtUiSelectionType = 'ENTITY' | 'FEATURE' | 'BODY' | 'OCCURRENCE' | 'USERCODE' | 'ROLLBACKBAR' | 'ELEMENT' | 'MATE' | 'MATE_CONNECTOR' | 'EDGE_POINT' | 'MESH_POINT' | 'TABLE_ITEM' | 'SKETCH_GROUP' | 'FOLDER' | 'NON_GEOMETRIC_ITEM' | 'TEMPORARY_GEOMETRY' | 'PROPERTY' | 'SIMULATION_LOAD' | 'PERSISTENT_QUERY_STRING' | 'GENERATIVE_DESIGN_ITEM' | 'ANNOTATION' | 'DIMENSION' | 'QUERY_VARIABLE' | 'UNKNOWN';

export type GbtValueUse = 'STRING' | 'INTEGER' | 'UNITS' | 'TYPE' | 'LOCALIZE' | 'UNKNOWN';

/**
 * Variable type name, from FeatureScript VariableType
 */
export type GbtVariableType = 'LENGTH' | 'ANGLE' | 'NUMBER' | 'ANY' | 'UNKNOWN';

export type GbtWeldContourType = 'NONE' | 'FLAT' | 'CONVEX' | 'CONCAVE' | 'UNKNOWN';

export type GbtWeldFinishing = 'NONE' | 'CHIPPING' | 'GRINDING' | 'HAMMERING' | 'MACHINING' | 'ROLLING' | 'UNSPECIFIED' | 'UNKNOWN';

export type GbtWeldJointType = 'NONE' | 'DOUBLE_V_GROOVE' | 'DOUBLE_BEVEL_GROOVE' | 'DOUBLE_U_GROOVE' | 'DOUBLE_J_GROOVE' | 'DOUBLE_FLARE_V' | 'DOUBLE_FLARE_BEVEL' | 'UNKNOWN';

export type GbtWeldStandard = 'ANSI' | 'ISO' | 'UNKNOWN';

export type GbtWeldType = 'NONE' | 'SQUARE_GROOVE' | 'V_GROOVE' | 'U_GROOVE' | 'J_GROOVE' | 'BEVEL_GROOVE' | 'SINGLE_BEVEL_BUTT_BROAD_ROOT' | 'V_FLARE_GROOVE' | 'BEVEL_FLARE_GROOVE' | 'BEAD_JOINT' | 'FILLET_JOINT' | 'PLUG_OR_SLOT_JOINT' | 'SEAM_JOINT' | 'SPOT_JOINT' | 'UNKNOWN';

export type GlTf = {
    accessors?: Array<Accessor>;
    animations?: Array<Animation>;
    asset?: Asset;
    bufferViews?: Array<BufferView>;
    buffers?: Array<_Buffer>;
    cameras?: Array<Camera>;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extensionsRequired?: Array<string>;
    extensionsUsed?: Array<string>;
    extras?: {
        [key: string]: unknown;
    };
    images?: Array<Image>;
    materials?: Array<Material>;
    meshes?: Array<Mesh>;
    nodes?: Array<Node>;
    samplers?: Array<Sampler>;
    scene?: number;
    scenes?: Array<Scene>;
    skins?: Array<Skin>;
    textures?: Array<Texture>;
};

export type GlobalPermissionInfo = {
    accessReports?: boolean;
    adminEnterprise?: boolean;
    allowAppStoreAccess?: boolean;
    allowPublicDocumentsAccess?: boolean;
    approveReleases?: boolean;
    branchLockPermissions?: boolean;
    createDocumentsInRoot?: boolean;
    createProject?: boolean;
    createReleases?: boolean;
    createTasks?: boolean;
    deletePermanently?: boolean;
    exportFiles?: boolean;
    importFiles?: boolean;
    manageGuestUsers?: boolean;
    manageNonGeometricItems?: boolean;
    manageRbac?: boolean;
    manageStandardContentMetadata?: boolean;
    manageUsers?: boolean;
    manageWorkflows?: boolean;
    shareForAnonymousAccess?: boolean;
    transferDocumentsFromEnterprise?: boolean;
    useRevisionTools?: boolean;
};

export type Header = {
    deprecated?: boolean;
    description?: string;
    example?: {
        [key: string]: unknown;
    };
    examples?: {
        [key: string]: Example;
    };
    explode?: boolean;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get$ref?: string;
    required?: boolean;
    schema?: Schema;
    style?: StyleEnum;
};

export type Image = {
    bufferView?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    mimeType?: string;
    name?: string;
    uri?: string;
};

export type In = 'COOKIE' | 'HEADER' | 'QUERY';

export type Info = {
    contact?: Contact;
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    license?: License;
    summary?: string;
    termsOfService?: string;
    title?: string;
    version?: string;
};

export type Interpolation = 'STEP' | 'LINEAR' | 'CATMULLROMSPLINE' | 'CUBICSPLINE';

/**
 * All types of PLM background jobs
 */
export type JobType = 'SYNC_ITEM' | 'SYNC_BOM' | 'SYNC_RELEASE_CANDIDATE';

export type License = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    identifier?: string;
    name?: string;
    url?: string;
};

export type Lines = {
    [key: string]: unknown;
};

export type Link = {
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get$ref?: string;
    headers?: {
        [key: string]: Header;
    };
    operationId?: string;
    operationRef?: string;
    parameters?: {
        [key: string]: string;
    };
    requestBody?: {
        [key: string]: unknown;
    };
    server?: Server;
};

export type Material = {
    alphaCutoff?: number;
    alphaMode?: string;
    doubleSided?: boolean;
    emissiveFactor?: Array<number>;
    emissiveTexture?: TextureInfo;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    normalTexture?: MaterialNormalTextureInfo;
    occlusionTexture?: MaterialOcclusionTextureInfo;
    pbrMetallicRoughness?: MaterialPbrMetallicRoughness;
};

export type MaterialNormalTextureInfo = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    index?: number;
    scale?: number;
    texCoord?: number;
};

export type MaterialOcclusionTextureInfo = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    index?: number;
    strength?: number;
    texCoord?: number;
};

export type MaterialPbrMetallicRoughness = {
    baseColorFactor?: Array<number>;
    baseColorTexture?: TextureInfo;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    metallicFactor?: number;
    metallicRoughnessTexture?: TextureInfo;
    roughnessFactor?: number;
};

export type MediaType = {
    encoding?: {
        [key: string]: Encoding;
    };
    example?: {
        [key: string]: unknown;
    };
    exampleSetFlag?: boolean;
    examples?: {
        [key: string]: Example;
    };
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    schema?: Schema;
};

export type Mesh = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    primitives?: Array<MeshPrimitive>;
    weights?: Array<number>;
};

export type MeshPrimitive = {
    attributes?: {
        [key: string]: number;
    };
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    indices?: number;
    material?: number;
    mode?: number;
    targets?: Array<{
        [key: string]: number;
    }>;
};

export type NextCharge = {
    amount?: number;
    currentPeriodEnd?: string;
    interval?: string;
    total?: number;
};

export type Node = {
    camera?: number;
    children?: Array<number>;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    matrix?: Array<number>;
    mesh?: number;
    name?: string;
    rotation?: Array<number>;
    scale?: Array<number>;
    skin?: number;
    translation?: Array<number>;
    weights?: Array<number>;
};

export type OAuthFlow = {
    authorizationUrl?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    refreshUrl?: string;
    scopes?: {
        extensions?: {
            [key: string]: {
                [key: string]: unknown;
            };
        };
        empty?: boolean;
        [key: string]: string | {
            [key: string]: {
                [key: string]: unknown;
            };
        } | boolean | undefined;
    };
    tokenUrl?: string;
};

export type OAuthFlows = {
    authorizationCode?: OAuthFlow;
    clientCredentials?: OAuthFlow;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    implicit?: OAuthFlow;
    password?: OAuthFlow;
};

export type ObjectId = {
    date?: string;
    timestamp?: number;
};

export type OpenApi = {
    components?: Components;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    externalDocs?: ExternalDocumentation;
    info?: Info;
    jsonSchemaDialect?: string;
    openapi?: string;
    paths?: {
        extensions?: {
            [key: string]: {
                [key: string]: unknown;
            };
        };
        empty?: boolean;
        [key: string]: PathItem | {
            [key: string]: {
                [key: string]: unknown;
            };
        } | boolean | undefined;
    };
    security?: Array<SecurityRequirement>;
    servers?: Array<Server>;
    tags?: Array<Tag>;
    webhooks?: {
        [key: string]: PathItem;
    };
};

export type Operation = {
    callbacks?: {
        [key: string]: Callback;
    };
    deprecated?: boolean;
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    externalDocs?: ExternalDocumentation;
    operationId?: string;
    parameters?: Array<Parameter>;
    requestBody?: RequestBody;
    responses?: {
        extensions?: {
            [key: string]: {
                [key: string]: unknown;
            };
        };
        default?: ApiResponse;
        empty?: boolean;
        [key: string]: ApiResponse | {
            [key: string]: {
                [key: string]: unknown;
            };
        } | boolean | undefined;
    };
    security?: Array<SecurityRequirement>;
    servers?: Array<Server>;
    summary?: string;
    tags?: Array<string>;
};

export type Parameter = {
    allowEmptyValue?: boolean;
    allowReserved?: boolean;
    content?: {
        empty?: boolean;
        [key: string]: MediaType | boolean | undefined;
    };
    deprecated?: boolean;
    description?: string;
    example?: {
        [key: string]: unknown;
    };
    examples?: {
        [key: string]: Example;
    };
    explode?: boolean;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get$ref?: string;
    in?: string;
    name?: string;
    required?: boolean;
    schema?: Schema;
    style?: StyleEnum;
};

export type PathItem = {
    delete?: Operation;
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get?: Operation;
    get$ref?: string;
    head?: Operation;
    options?: Operation;
    parameters?: Array<Parameter>;
    patch?: Operation;
    post?: Operation;
    put?: Operation;
    servers?: Array<Server>;
    summary?: string;
    trace?: Operation;
};

export type ProratedCharges = {
    amount?: number;
    date?: string;
    description?: string;
};

export type RequestBody = {
    content?: {
        empty?: boolean;
        [key: string]: MediaType | boolean | undefined;
    };
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    get$ref?: string;
    required?: boolean;
};

export type RoleMapEntry = {
    identities?: Array<BtIdentityInfo>;
    role?: BtRbacRoleInfo;
};

export type Sampler = {
    input?: AccessorModel;
    interpolation?: Interpolation;
    output?: AccessorModel;
};

export type Scene = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    nodes?: Array<number>;
};

export type Schema = {
    additionalItems?: Schema;
    additionalProperties?: {
        [key: string]: unknown;
    };
    allOf?: Array<Schema>;
    anyOf?: Array<Schema>;
    booleanSchemaValue?: boolean;
    const?: {
        [key: string]: unknown;
    };
    contains?: Schema;
    contentEncoding?: string;
    contentMediaType?: string;
    contentSchema?: Schema;
    default?: {
        [key: string]: unknown;
    };
    dependentRequired?: {
        [key: string]: Array<string>;
    };
    dependentSchemas?: {
        [key: string]: Schema;
    };
    deprecated?: boolean;
    description?: string;
    discriminator?: Discriminator;
    else?: Schema;
    enum?: Array<{
        [key: string]: unknown;
    }>;
    example?: {
        [key: string]: unknown;
    };
    exampleSetFlag?: boolean;
    examples?: Array<{
        [key: string]: unknown;
    }>;
    exclusiveMaximum?: boolean;
    exclusiveMaximumValue?: number;
    exclusiveMinimum?: boolean;
    exclusiveMinimumValue?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    externalDocs?: ExternalDocumentation;
    format?: string;
    get$anchor?: string;
    get$comment?: string;
    get$id?: string;
    get$ref?: string;
    get$schema?: string;
    if?: Schema;
    items?: SchemaObject;
    jsonSchema?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    jsonSchemaImpl?: {
        [key: string]: unknown;
    };
    maxContains?: number;
    maxItems?: number;
    maxLength?: number;
    maxProperties?: number;
    maximum?: number;
    minContains?: number;
    minItems?: number;
    minLength?: number;
    minProperties?: number;
    minimum?: number;
    multipleOf?: number;
    not?: Schema;
    nullable?: boolean;
    oneOf?: Array<Schema>;
    pattern?: string;
    patternProperties?: {
        [key: string]: Schema;
    };
    prefixItems?: Array<Schema>;
    properties?: {
        [key: string]: Schema;
    };
    propertyNames?: Schema;
    readOnly?: boolean;
    required?: Array<string>;
    then?: Schema;
    title?: string;
    type?: string;
    types?: Array<string>;
    unevaluatedItems?: Schema;
    unevaluatedProperties?: Schema;
    uniqueItems?: boolean;
    writeOnly?: boolean;
    xml?: Xml;
};

export type SchemaObject = {
    additionalItems?: Schema;
    additionalProperties?: {
        [key: string]: unknown;
    };
    allOf?: Array<Schema>;
    anyOf?: Array<Schema>;
    booleanSchemaValue?: boolean;
    const?: {
        [key: string]: unknown;
    };
    contains?: Schema;
    contentEncoding?: string;
    contentMediaType?: string;
    contentSchema?: Schema;
    default?: {
        [key: string]: unknown;
    };
    dependentRequired?: {
        [key: string]: Array<string>;
    };
    deprecated?: boolean;
    description?: string;
    discriminator?: Discriminator;
    else?: Schema;
    enum?: Array<{
        [key: string]: unknown;
    }>;
    example?: {
        [key: string]: unknown;
    };
    exampleSetFlag?: boolean;
    examples?: Array<{
        [key: string]: unknown;
    }>;
    exclusiveMaximum?: boolean;
    exclusiveMaximumValue?: number;
    exclusiveMinimum?: boolean;
    exclusiveMinimumValue?: number;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    externalDocs?: ExternalDocumentation;
    format?: string;
    get$anchor?: string;
    get$comment?: string;
    get$id?: string;
    get$ref?: string;
    get$schema?: string;
    if?: Schema;
    items?: SchemaObject;
    jsonSchema?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    jsonSchemaImpl?: {
        [key: string]: unknown;
    };
    maxContains?: number;
    maxItems?: number;
    maxLength?: number;
    maxProperties?: number;
    maximum?: number;
    minContains?: number;
    minItems?: number;
    minLength?: number;
    minProperties?: number;
    minimum?: number;
    multipleOf?: number;
    not?: Schema;
    nullable?: boolean;
    oneOf?: Array<Schema>;
    pattern?: string;
    prefixItems?: Array<Schema>;
    propertyNames?: Schema;
    readOnly?: boolean;
    required?: Array<string>;
    then?: Schema;
    title?: string;
    type?: string;
    types?: Array<string>;
    unevaluatedItems?: Schema;
    unevaluatedProperties?: Schema;
    uniqueItems?: boolean;
    writeOnly?: boolean;
    xml?: Xml;
};

export type SecurityRequirement = {
    empty?: boolean;
    [key: string]: Array<string> | boolean | undefined;
};

export type SecurityScheme = {
    bearerFormat?: string;
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    flows?: OAuthFlows;
    get$ref?: string;
    in?: In;
    name?: string;
    openIdConnectUrl?: string;
    scheme?: string;
    type?: Type;
};

export type Server = {
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    url?: string;
    variables?: {
        extensions?: {
            [key: string]: {
                [key: string]: unknown;
            };
        };
        empty?: boolean;
        [key: string]: ServerVariable | {
            [key: string]: {
                [key: string]: unknown;
            };
        } | boolean | undefined;
    };
};

export type ServerVariable = {
    default?: string;
    description?: string;
    enum?: Array<string>;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
};

export type Skin = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    inverseBindMatrices?: number;
    joints?: Array<number>;
    name?: string;
    skeleton?: number;
};

export type Status = 'DB_TIMEOUT' | 'DB_MAX_NUMBER_ITEMS_EXCEEDED';

export type StyleEnum = 'FORM' | 'SPACE_DELIMITED' | 'PIPE_DELIMITED' | 'DEEP_OBJECT';

export type Tag = {
    description?: string;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    externalDocs?: ExternalDocumentation;
    name?: string;
};

export type Texture = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    name?: string;
    sampler?: number;
    source?: number;
};

export type TextureInfo = {
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    extras?: {
        [key: string]: unknown;
    };
    index?: number;
    texCoord?: number;
};

export type TransformGroup = {
    instances?: Array<BtAssemblyInstanceDefinitionParams>;
    transform?: Array<number>;
};

export type Type = 'APIKEY' | 'HTTP' | 'OAUTH2' | 'OPENIDCONNECT' | 'MUTUALTLS';

export type UpdateParams = {
    fromReference?: BtUniqueDocumentItemParams;
    idsToUpdate?: Array<string>;
    ignoreChildren?: boolean;
    toReference?: BtUniqueDocumentItemParams;
};

export type UserRolePriority = 'OWNER' | 'ADMIN' | 'MEMBER' | 'GUEST';

export type VersionAlias = 'LAST_MINOR' | 'LAST_BUILD';

export type Versions = {
    availableVersions?: Array<BtApiVersion>;
    specifiedVersion?: BtApiVersion;
};

export type Xml = {
    attribute?: boolean;
    extensions?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
    name?: string;
    namespace?: string;
    prefix?: string;
    wrapped?: boolean;
};

export type BtAssemblyFeatureListResponse1174Writable = BtFeatureApiBase1430 & {
    btType?: 'BTAssemblyFeatureListResponse-1174Writable';
} & {
    btType?: string;
    featureStates?: {
        [key: string]: BtFeatureState1688;
    };
    features?: Array<BtmAssemblyFeature887Writable>;
    isComplete?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyInstance947Writable = BtInstance642Writable & {
    btType?: 'BTAssemblyInstance-947Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyMirror2996Writable = BtParametricInstance2641Writable & {
    btType?: 'BTAssemblyMirror-2996Writable';
} & {
    btType?: string;
    mirrorFeature?: BtmAssemblyMirrorFeature3037Writable;
    mirrorFeatureInterface?: BtAssemblyMirrorFeatureInterfaceWritable;
    nodeWithReferenceList?: Array<BtNodeWithReferenceWritable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyMirrorFeatureInterfaceWritable = {
    arrayParameterFromFeature?: BtmParameterArray2025Writable;
    feature?: BtmAssemblyFeature887Writable;
    nodeId?: string;
};

export type BtAssemblyPattern1974Writable = BtParametricInstance2641Writable & {
    btType?: 'BTAssemblyPattern-1974Writable';
} & {
    btType?: string;
    patternFeature?: BtmAssemblyPatternFeature2241Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblyReplicate2774Writable = BtParametricInstance2641Writable & {
    btType?: 'BTAssemblyReplicate-2774Writable';
} & {
    btType?: string;
    replicateFeature?: BtmAssemblyReplicateFeature1351Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblySimulation2246Writable = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    inertialRelief?: boolean;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    modal?: boolean;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    numberOfModes?: number;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    type?: GbtAssemblySimulationType;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtAssemblySimulationData978Writable = BtmNode19Writable & {
    btType?: 'BTAssemblySimulationData-978Writable';
} & {
    btType?: string;
    contactBehavior?: GbtSimulationContactBehavior;
    loads?: Array<BtmLoad3538Writable>;
    loadsByNodeId?: {
        [key: string]: BtmLoad3538Writable;
    };
    simulations?: Array<BtAssemblySimulation2246Writable>;
    structuralLoads?: Array<BtmLoad3538Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblySimulationStructuralLoadsTable3867Writable = BtTable1825Writable & {
    btType?: 'BTAssemblySimulationStructuralLoadsTable-3867Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtAssemblySimulationTable3236Writable = BtTable1825Writable & {
    btType?: 'BTAssemblySimulationTable-3236Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtBillOfMaterialsTable1073Writable = BtTable1825Writable & {
    btType?: 'BTBillOfMaterialsTable-1073Writable';
} & {
    btType?: string;
    failedMetadataRepresentativeOccurrences?: Array<string>;
    indented?: boolean;
    isProtectedWorkspace?: boolean;
    isShowingTopLevelAssemblyRow?: boolean;
    partNumber?: string;
    revision?: string;
    showingExcluded?: boolean;
    subassemblyBomBehaviorName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtClonedInstance2505Writable = BtParametricOutputInstance2288Writable & {
    btType?: 'BTClonedInstance-2505Writable';
} & {
    btType?: string;
    seedOccurrence?: BtOccurrence74;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtComputedPartPropertySpec1746Writable = BtFeatureSpec129Writable & {
    btType?: 'BTComputedPartPropertySpec-1746Writable';
} & {
    btType?: string;
    computedPartPropertySpecId?: string;
    propertyFunctionReturnType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfigurableTreeNodeWritable = {
    name?: string;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parameters?: Array<BtmParameter1Writable>;
    suppressed?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
};

export type BtConfigurationResponse2019Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configurationParameters?: Array<BtmConfigurationParameter819Writable>;
    currentConfiguration?: Array<BtmParameter1Writable>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtConfigurationUpdateCall2933Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configurationParameters?: Array<BtmConfigurationParameter819Writable>;
    currentConfiguration?: Array<BtmParameter1Writable>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtConfiguredDimensionColumnInfo2168Writable = BtConfiguredValuesColumnInfo1025Writable & {
    btType?: 'BTConfiguredDimensionColumnInfo-2168Writable';
} & {
    btType?: string;
    dimensionId?: string;
    parameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredFeatureColumnInfo1014Writable = BtConfiguredValuesColumnInfo1025Writable & {
    btType?: 'BTConfiguredFeatureColumnInfo-1014Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredParameterColumnInfo2900Writable = BtConfiguredValuesColumnInfo1025Writable & {
    btType?: 'BTConfiguredParameterColumnInfo-2900Writable';
} & {
    btType?: string;
    innerParameterLocation?: BtInnerParameterLocation1715;
    parameterId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredPartProperties2645Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
    parts?: Array<BtPartWithConfiguredProperties2163Writable>;
    propertyIdToConfiguredTable?: {
        [key: string]: BtPartWithConfiguredProperties2163Writable;
    };
    synchronizeToSingleEnumInput?: boolean;
};

export type BtConfiguredPartPropertiesTable2740Writable = BtTable1825Writable & {
    btType?: 'BTConfiguredPartPropertiesTable-2740Writable';
} & {
    btType?: string;
    partDeterministicId?: string;
    partDeterministicIds?: Array<string>;
    propertyNodeId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredSuppressionColumnInfo2498Writable = BtConfiguredValuesColumnInfo1025Writable & {
    btType?: 'BTConfiguredSuppressionColumnInfo-2498Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtConfiguredValuesColumnInfo1025Writable = BtTableColumnInfo1222Writable & {
    btType?: 'BTConfiguredValuesColumnInfo-1025Writable';
} & {
    btType?: string;
    parentId?: string;
    parentName?: string;
    parentType?: GbtConfiguredParentType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtDefaultFeatures119Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    children?: Array<BtmFeature134Writable>;
};

export type BtDerivedAssemblyMirror4204Writable = BtParametricInstance2641Writable & {
    btType?: 'BTDerivedAssemblyMirror-4204Writable';
} & {
    assemblyReferenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    btType?: string;
    configuration?: Array<BtmParameter1Writable>;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    lockedState?: BtInstanceWithReferenceWritable;
    microversionId?: BtMicroversionId366;
    mirrorFeature?: BtmDerivedAssemblyMirrorFeature5094Writable;
    mirrorFeatureInterface?: BtAssemblyMirrorFeatureInterfaceWritable;
    nodeWithReferenceList?: Array<BtNodeWithReferenceWritable>;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    versionId?: string;
    versionIdIfExternal?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExplosion2754Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTExplosion-2754Writable';
} & {
    btType?: string;
    explodeSteps?: Array<BtExplosionStepFeature3008Writable>;
    startingPositionId?: BtMicroversionIdAndConfiguration2338;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtExplosionStepFeature3008Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTExplosionStepFeature-3008Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtfsTable953Writable = BtTable1825Writable & {
    btType?: 'BTFSTable-953Writable';
} & {
    btType?: string;
    crossHighlightData?: BtTableBaseCrossHighlightData2609;
    hiddenColumnIdsToNames?: {
        [key: string]: string;
    };
    individualTableProperties?: BtIndividualTableProperties3760;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtfsTableColumnInfo623Writable = BtTableColumnInfo1222Writable & {
    btType?: 'BTFSTableColumnInfo-623Writable';
} & {
    btType?: string;
    crossHighlightData?: BtTableBaseCrossHighlightData2609;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtFeatureDefinitionCall1406Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmFeature134Writable;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureDefinitionResponse1617Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmFeature134Writable;
    featureState?: BtFeatureState1688;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

/**
 * List of features instantiated within the Part Studio.
 */
export type BtFeatureListResponse2457Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * List of Onshape-defined features instantiated within the Part Studio.
     */
    defaultFeatures?: Array<BtmFeature134Writable>;
    /**
     * State of each feature, indicating if the feature is valid. Incorrectly defined features will still appear in the Feature list.
     */
    featureStates?: {
        [key: string]: BtFeatureState1688;
    };
    /**
     * List of user-defined features instantiated within the Part Studio.
     */
    features?: Array<BtmFeature134Writable>;
    /**
     * Internal only. Do not modify.
     */
    imports?: Array<BtmImport136Writable>;
    /**
     * `true` if the features represent the entire part studio or `false` for a filtered subset.
     */
    isComplete?: boolean;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Index of the rollback bar location. `-1` indicates the bar is at the end of the Feature List.
     */
    rollbackIndex?: number;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The document microversion from which the result was extracted. Part, face, edge, and vertex IDs are only valid for the same microversion.
     */
    sourceMicroversion?: string;
};

export type BtFeatureSpec129Writable = {
    additionalLocalizedStrings?: number;
    allParameters?: Array<BtParameterSpec6Writable>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    computedPartPropertySpec?: boolean;
    descriptionImageUri?: string;
    editingLogic?: BtEditingLogic2350;
    featureNameTemplate?: string;
    featureType?: string;
    featureTypeDescription?: string;
    featureTypeName?: string;
    filterSelectors?: Array<string>;
    fullFeatureType?: string;
    groups?: Array<BtParameterGroupSpec3469Writable>;
    iconUri?: string;
    languageVersion?: number;
    linkedLocationName?: string;
    localizableName?: string;
    localizedName?: string;
    locationInfos?: Array<BtLocationInfo226>;
    manipulatorChangeFunction?: string;
    namespace?: string;
    namespaceIncludingEnums?: string;
    namespaceTheSource?: boolean;
    parameterIdToSpec?: {
        [key: string]: BtParameterSpec6Writable;
    };
    parameterLibraryDefinitionIds?: Array<string>;
    parameters?: Array<BtParameterSpec6Writable>;
    signature?: string;
    sourceLocation?: BtLocationInfo226;
    sourceMicroversionId?: string;
    stringsToLocalize?: Array<string>;
    tableSpec?: boolean;
    toleranceSpec?: boolean;
    tooltipTemplate?: string;
    uiHints?: Array<GbtuiHint>;
    variableStudioReferenceSpec?: boolean;
};

export type BtFeatureSpecsResponse664Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureSpecs?: Array<BtFeatureSpec129Writable>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtImportWritable = {
    forExport?: boolean;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
};

export type BtInstance642Writable = BtInstanceBase2263Writable & {
    btType?: 'BTInstance-642Writable';
} & {
    btType?: string;
    configuration?: Array<BtmParameter1Writable>;
    configured?: boolean;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    lockedState?: BtmParameter1Writable;
    microversionId?: BtMicroversionId366;
    name?: string;
    nodeWithReferenceList?: Array<BtNodeWithReferenceWritable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parameters?: Array<BtmParameter1Writable>;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    versionId?: string;
    versionIdIfExternal?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceBase2263Writable = BtmNode19Writable & {
    btType?: 'BTInstanceBase-2263Writable';
} & {
    assemblyInstance?: boolean;
    assemblyMirror?: boolean;
    assemblyPattern?: boolean;
    assemblyReplicate?: boolean;
    btType?: string;
    clonedInstance?: boolean;
    customData?: {
        [key: string]: BtReferenceCustomData1551;
    };
    derivedAssemblyMirror?: boolean;
    instanceFolder?: boolean;
    instanceName?: string;
    isFlattenedPart?: boolean;
    locked?: boolean;
    parametricInstance?: boolean;
    parametricOutputInstance?: boolean;
    parametricPartStudioChildInstance?: boolean;
    parametricPartStudioInstance?: boolean;
    partInstance?: boolean;
    releasable?: boolean;
    revisionCustomData?: BtRevisionCustomData2090;
    standardContent?: boolean;
    standardContentParametersId?: string;
    suppressed?: boolean;
    suppressedFieldIndex?: number;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    suppressionStateFieldIndex?: number;
    validRevisionReference?: boolean;
    version?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceControlNode750Writable = BtmNode19Writable & {
    btType?: 'BTInstanceControlNode-750Writable';
} & {
    btType?: string;
    suppressed?: boolean;
    suppressedFieldIndex?: number;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    suppressionStateFieldIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceFolder3627Writable = BtInstanceBase2263Writable & {
    btType?: 'BTInstanceFolder-3627Writable';
} & {
    btType?: string;
    featureFolder?: boolean;
    folderEnd?: boolean;
    folderStart?: boolean;
    name?: string;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parameters?: Array<BtmParameter1Writable>;
    startNodeId?: string;
    startNodeIdRaw?: BtObjectId;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtInstanceWithReferenceWritable = {
    configuration?: Array<BtmParameter1Writable>;
    customData?: {
        [key: string]: BtReferenceCustomData1551;
    };
    derivedAssemblyMirror?: boolean;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    locked?: boolean;
    lockedState?: BtInstanceWithReferenceWritable;
    microversionId?: BtMicroversionId366;
    nodeId?: string;
    nodeWithReferenceList?: Array<BtNodeWithReferenceWritable>;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    standardContent?: boolean;
    standardContentParametersId?: string;
    validRevisionReference?: boolean;
    versionId?: string;
    versionIdIfExternal?: string;
};

export type BtLazilyParsedFeatureScriptWritable = {
    checksum?: BtUiFeatureStudioChecksum2438;
    languageVersion?: number;
    lines?: Lines;
    model?: BtmModel141Writable;
    module?: BtpModule234Writable;
    moduleId?: BtpModuleId235;
    noticeModuleIds?: BtpModuleId235;
    parentLanguageVersion?: number;
    references?: {
        [key: string]: BtMicroversionId366;
    };
    source?: string;
};

export type BtmAnnotation4664Writable = BtmNode19Writable & {
    btType?: 'BTMAnnotation-4664Writable';
} & {
    annotationType?: GbtAnnotationType;
    parameters?: Array<BtmParameter1Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmArrayParameterItem1843Writable = BtmNode19Writable & {
    btType?: 'BTMArrayParameterItem-1843Writable';
} & {
    parameters?: Array<BtmParameter1Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeature887Writable = BtmFeature134Writable & {
    btType?: 'BTMAssemblyFeature-887Writable';
} & {
    auxiliaryTreeFeature?: boolean;
    btType?: string;
    featureFolder?: boolean;
    featureListFieldIndex?: number;
    fieldIndexForOwnedMateConnectors?: number;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parametricInstanceFeature?: boolean;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    version?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeature12218Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMAssemblyFeature1-2218Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeature21022Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMAssemblyFeature2-1022Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyFeatureFolder2543Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMAssemblyFeatureFolder-2543Writable';
} & {
    btType?: string;
    folderEnd?: boolean;
    folderStart?: boolean;
    startNodeId?: string;
    startNodeIdRaw?: BtObjectId;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmAssemblyMirrorFeature3037Writable = {
    arrayParameterFromFeature?: BtmParameterArray2025Writable;
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmAssemblyFeature887Writable;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmAssemblyPatternFeature2241Writable = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    patternType?: GbtPatternType;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmAssemblyReplicateFeature1351Writable = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmConfigurationData1560Writable = BtmNode19Writable & {
    btType?: 'BTMConfigurationData-1560Writable';
} & {
    btType?: string;
    configurationParameters?: Array<BtmConfigurationParameter819Writable>;
    cosmeticParameterIds?: Array<string>;
    currentConfiguration?: Array<BtmParameter1Writable>;
    currentFSValues?: {
        [key: string]: BtfsValue1888;
    };
    defaultConfigurationValues?: {
        [key: string]: BtfsValue1888;
    };
    syncAndPassthroughReferenceNodeId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameter819Writable = BtmNode19Writable & {
    btType?: 'BTMConfigurationParameter-819Writable';
} & {
    btType?: string;
    enumOptionIds?: Array<string>;
    generatedParameterId?: BtTreeNode20;
    isCosmetic?: boolean;
    parameterId?: string;
    parameterName?: string;
    parameterType?: GbtConfigurationParameterType;
    valid?: boolean;
    visibilityCondition?: BtParameterVisibilityCondition177;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterBoolean2550Writable = BtmConfigurationParameter819Writable & {
    btType?: 'BTMConfigurationParameterBoolean-2550Writable';
} & {
    btType?: string;
    defaultValue?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterEnum105Writable = BtmConfigurationParameter819Writable & {
    btType?: 'BTMConfigurationParameterEnum-105Writable';
} & {
    btType?: string;
    defaultValue?: string;
    enumName?: string;
    enumOptionVisibilityConditions?: BtEnumOptionVisibilityConditionList2936;
    namespace?: string;
    optionIds?: Array<string>;
    optionNames?: Array<string>;
    options?: Array<BtmEnumOption592Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterList5548Writable = BtmNode19Writable & {
    btType?: 'BTMConfigurationParameterList-5548Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterQuantity1826Writable = BtmConfigurationParameter819Writable & {
    btType?: 'BTMConfigurationParameterQuantity-1826Writable';
} & {
    btType?: string;
    quantityType?: GbtQuantityType;
    rangeAndDefault?: BtQuantityRange181;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfigurationParameterString872Writable = BtmConfigurationParameter819Writable & {
    btType?: 'BTMConfigurationParameterString-872Writable';
} & {
    btType?: string;
    defaultValue?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfiguredValue1341Writable = BtmNode19Writable & {
    btType?: 'BTMConfiguredValue-1341Writable';
} & {
    btType?: string;
    configurationValueString?: string;
    value?: BtmParameter1Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfiguredValueByBoolean1501Writable = BtmConfiguredValue1341Writable & {
    btType?: 'BTMConfiguredValueByBoolean-1501Writable';
} & {
    booleanValue?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmConfiguredValueByEnum1923Writable = BtmConfiguredValue1341Writable & {
    btType?: 'BTMConfiguredValueByEnum-1923Writable';
} & {
    btType?: string;
    enumName?: string;
    enumValue?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmDatabaseParameter2229Writable = BtmParameter1Writable & {
    btType?: 'BTMDatabaseParameter-2229Writable';
} & {
    btType?: string;
    databaseId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmDerivedAssemblyMirrorFeature5094Writable = {
    arrayParameterFromFeature?: BtmParameterArray2025Writable;
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    feature?: BtmAssemblyFeature887Writable;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmEnumOption592Writable = BtmNode19Writable & {
    btType?: 'BTMEnumOption-592Writable';
} & {
    btType?: string;
    option?: string;
    optionName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmFeature134Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    mateConnectorFeature?: boolean;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    parameterLibraries?: Array<BtmParameter1Writable>;
    /**
     * A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
     */
    parameters?: Array<BtmParameter1Writable>;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
};

export type BtmFeatureInvalid1031Writable = BtmFeature134Writable & {
    btType?: 'BTMFeatureInvalid-1031Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmFeatureQueryWithOccurrence157Writable = BtmIndividualQueryWithOccurrenceBase904Writable & {
    btType?: 'BTMFeatureQueryWithOccurrence-157Writable';
} & {
    btType?: string;
    featureId?: string;
    featureIdWithOccurrence?: string;
    partStudioMateConnectorQuery?: boolean;
    queryData?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmFolder3208Writable = BtmNode19Writable & {
    btType?: 'BTMFolder-3208Writable';
} & {
    btType?: string;
    folderId?: string;
    isStartFolder?: boolean;
    name?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmGenerativeDesignFeature3195Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMGenerativeDesignFeature-3195Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmGeometryMate1260Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMGeometryMate-1260Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmImport136Writable = BtmNode19Writable & {
    btType?: 'BTMImport-136Writable';
} & {
    btType?: string;
    elementImport?: boolean;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    importedExternalDocumentId?: string;
    namespace?: string;
    path?: string;
    version?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmInContextQuery2254Writable = BtmIndividualQueryBase139Writable & {
    btType?: 'BTMInContextQuery-2254Writable';
} & {
    btType?: string;
    path?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualCoEdgeQuery1332Writable = BtmIndividualQuery138Writable & {
    btType?: 'BTMIndividualCoEdgeQuery-1332Writable';
} & {
    btType?: string;
    edgeQuery?: BtmIndividualQuery138Writable;
    faceQuery?: BtmIndividualQuery138Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualCreatedByQuery137Writable = BtmIndividualQuery138Writable & {
    btType?: 'BTMIndividualCreatedByQuery-137Writable';
} & {
    bodyType?: GbtBodyType;
    btType?: string;
    entityType?: GbtEntityType;
    featureId?: string;
    filterConstruction?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualOccurrenceQuery626Writable = BtmIndividualQueryWithOccurrenceBase904Writable & {
    btType?: 'BTMIndividualOccurrenceQuery-626Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualParametricQuery3477Writable = BtmIndividualQuery138Writable & {
    btType?: 'BTMIndividualParametricQuery-3477Writable';
} & {
    btType?: string;
    escapedQueryVariableName?: string;
    queryVariableName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualQuery138Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    deterministicIdList?: BtmIndividualQueryBase139Writable;
    deterministicIds?: Array<string>;
    generateSectionEntityQuery?: boolean;
    generatedSectionQueryId?: string;
    /**
     * Microversion that resulted from the import.
     */
    importMicroversion?: string;
    nodeId?: string;
    persistentQuery?: BtpStatement269;
    query?: BtmIndividualQueryBase139Writable;
    queryStatement?: BtpStatement269;
    queryString?: string;
    variableName?: BtmIndividualQuery138Writable;
};

export type BtmIndividualQueryBase139Writable = BtmNode19Writable & {
    btType?: 'BTMIndividualQueryBase-139Writable';
} & {
    btType?: string;
    deterministicIdList?: BtmIndividualQueryBase139Writable;
    deterministicIds?: Array<string>;
    generateSectionEntityQuery?: boolean;
    generatedSectionQueryId?: string;
    query?: BtmIndividualQueryBase139Writable;
    queryString?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualQueryWithOccurrence811Writable = BtmIndividualQueryWithOccurrenceBase904Writable & {
    btType?: 'BTMIndividualQueryWithOccurrence-811Writable';
} & {
    btType?: string;
    entityQuery?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualQueryWithOccurrenceBase904Writable = BtmIndividualQueryBase139Writable & {
    btType?: 'BTMIndividualQueryWithOccurrenceBase-904Writable';
} & {
    btType?: string;
    fullPathAsString?: string;
    nodeIdFromCurrentQuery?: string;
    occurrence?: BtOccurrence74;
    path?: Array<string>;
    queryPath?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualSketchRegionQuery140Writable = BtmIndividualQuery138Writable & {
    btType?: 'BTMIndividualSketchRegionQuery-140Writable';
} & {
    btType?: string;
    featureId?: string;
    filterInnerLoops?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmIndividualSketchUniqueVerticesQuery1472Writable = BtmIndividualQuery138Writable & {
    btType?: 'BTMIndividualSketchUniqueVerticesQuery-1472Writable';
} & {
    btType?: string;
    featureId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmInferenceQueryWithOccurrence1083Writable = BtmIndividualQueryWithOccurrence811Writable & {
    btType?: 'BTMInferenceQueryWithOccurrence-1083Writable';
} & {
    btType?: string;
    inferenceType?: GbtEntityInferenceType;
    secondDeterministicId?: string;
    secondEntityQuery?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmLoad3538Writable = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    definedByComponents?: boolean;
    directionFlipped?: boolean;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fgsBaseUnits?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    loadComponentParameterIds?: {
        [key: string]: string;
    };
    loadRegionParameterId?: string;
    loadType?: GbtLoadType;
    magnitudeParameterId?: string;
    magnitudeQuantityType?: GbtQuantityType;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    structuralLoad?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    suppressedInSimulations?: {
        [key: string]: number;
    };
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmMate64Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMMate-64Writable';
} & {
    btType?: string;
    mateConnectorQueryList?: BtmParameterQueryWithOccurrenceList67Writable;
    mateType?: GbtMateType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMateConnector66Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMMateConnector-66Writable';
} & {
    btType?: string;
    implicit?: boolean;
    isAuxiliaryTreeMateConnector?: boolean;
    isHidden?: boolean;
    savedFeatureType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMateGroup65Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMMateGroup-65Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMateRelation1412Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMMateRelation-1412Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmMeshPointQuery1183Writable = BtmIndividualQueryWithOccurrenceBase904Writable & {
    btType?: 'BTMMeshPointQuery-1183Writable';
} & {
    btType?: string;
    origin?: BtVector3d389;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmModel141Writable = BtmNode19Writable & {
    btType?: 'BTMModel-141Writable';
} & {
    allFeatures?: Array<BtmFeature134Writable>;
    allFeaturesAndOtherReferences?: Array<BtmFeature134Writable>;
    allFeaturesAndSubFeatures?: Array<BtmFeature134Writable>;
    allFeaturesAndSubFeaturesAndOtherReferences?: Array<BtmFeature134Writable>;
    btType?: string;
    childNodeIdToIndex?: {
        [key: string]: number;
    };
    configurableTreeNodes?: Array<BtConfigurableTreeNodeWritable>;
    configurationData?: BtmConfigurationData1560Writable;
    configured?: boolean;
    deepImports?: {
        [key: string]: Array<BtImportWritable>;
    };
    defaultFeatures?: BtDefaultFeatures119Writable;
    defaultUnits?: BtmUnitsDefault160Writable;
    featureImports?: {
        [key: string]: Array<BtImportWritable>;
    };
    firstRollbackIndex?: number;
    importSet?: Array<BtpModuleId235>;
    imports?: Array<BtmImport136Writable>;
    isVariableStudio?: boolean;
    lastFeatureBeforeRollBack?: BtmFeature134Writable;
    modelAnnotations?: BtModelAnnotations3945Writable;
    name?: string;
    partProperties?: BtPartProperties293Writable;
    pathToCache?: BtCacheDataPath191;
    properties?: BtModelProperties1258Writable;
    rollbackBar?: BtmRollback150Writable;
    rolledBackToEnd?: boolean;
    variableStudios?: Array<BtmVariableStudioReference2764Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmNode19Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * Microversion that resulted from the import.
     */
    importMicroversion?: string;
    nodeId?: string;
};

export type BtmNodeInvalid1772Writable = BtmNode19Writable & {
    btType?: 'BTMNodeInvalid-1772Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmNonGeometricItem1864Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMNonGeometricItem-1864Writable';
} & {
    btType?: string;
    itemDefinitionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

/**
 * A list of parameter values for instantiation of the feature spec. Parameters are present for all defined parameters, even if not used in a specific instantiation.
 */
export type BtmParameter1Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    /**
     * Microversion that resulted from the import.
     */
    importMicroversion?: string;
    libraryRelationType?: GbtParameterLibraryRelationType;
    /**
     * ID of the parameter's node.
     */
    nodeId?: string;
    /**
     * Unique ID of the parameter.
     */
    parameterId?: string;
    parameterName?: string;
    valueString?: string;
};

export type BtmParameterAppearance627Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterAppearance-627Writable';
} & {
    appearance?: BtGraphicsAppearance1152;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterArray2025Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterArray-2025Writable';
} & {
    btType?: string;
    items?: Array<BtmArrayParameterItem1843Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterBlobReference1679Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterBlobReference-1679Writable';
} & {
    blobImport?: BtmImport136Writable;
    btType?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterBoolean144Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterBoolean-144Writable';
} & {
    btType?: string;
    value?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterButton5169Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterButton-5169Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterConfigured2222Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterConfigured-2222Writable';
} & {
    btType?: string;
    configurationParameterId?: string;
    configurationParameterIdFieldIndex?: number;
    values?: Array<BtmConfiguredValue1341Writable>;
    valuesFieldIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterDerived864Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterDerived-864Writable';
} & {
    btType?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    imports?: Array<BtmImport136Writable>;
    moduleId?: BtpModuleId235;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterEnum145Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterEnum-145Writable';
} & {
    btType?: string;
    enumName?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    namespace?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterFeatureList1749Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterFeatureList-1749Writable';
} & {
    btType?: string;
    featureIds?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterForeignId146Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterForeignId-146Writable';
} & {
    btType?: string;
    foreignId?: string;
    foreignName?: string;
    locationInfo?: BtForeignDataResponse1070;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterIcon460Writable = BtmReadOnlyParameter3800Writable & {
    btType?: 'BTMParameterIcon-460Writable';
} & {
    btType?: string;
    hasError?: boolean;
    hasWarning?: boolean;
    icon?: string;
    label?: string;
    link?: string;
    tooltip?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterInvalid1664Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterInvalid-1664Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterLookupTablePath1419Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterLookupTablePath-1419Writable';
} & {
    btType?: string;
    value?: {
        [key: string]: string;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterMaterial1388Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterMaterial-1388Writable';
} & {
    btType?: string;
    material?: BtPartMaterial1445;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterMultiEnum3411Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterMultiEnum-3411Writable';
} & {
    btType?: string;
    enumName?: string;
    namespace?: string;
    values?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterNotice4455Writable = BtmReadOnlyParameter3800Writable & {
    btType?: 'BTMParameterNotice-4455Writable';
} & {
    btType?: string;
    level?: GbtNoticeLevel;
    message?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterNullableQuantity807Writable = BtmParameterQuantity147Writable & {
    btType?: 'BTMParameterNullableQuantity-807Writable';
} & {
    btType?: string;
    isNull?: boolean;
    nullValue?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterProgress3232Writable = BtmReadOnlyParameter3800Writable & {
    btType?: 'BTMParameterProgress-3232Writable';
} & {
    btType?: string;
    percentDone?: number;
    status?: GbtComputeStatus;
    statusMessage?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterQuantity147Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterQuantity-147Writable';
} & {
    btType?: string;
    expression?: string;
    isInteger?: boolean;
    units?: string;
    value?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterQueryList148Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterQueryList-148Writable';
} & {
    btType?: string;
    filter?: BtQueryFilter183;
    queries?: Array<BtmIndividualQueryBase139Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterQueryWithOccurrenceList67Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterQueryWithOccurrenceList-67Writable';
} & {
    btType?: string;
    occurrences?: Array<BtOccurrence74>;
    queries?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReference2434Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterReference-2434Writable';
} & {
    btType?: string;
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryData?: BtElementLibraryReferenceData3133;
    featureScriptType?: string;
    ids?: Array<string>;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    microversionId?: string;
    namespace?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceAssembly938Writable = BtmParameterReferenceWithConfiguration3028Writable & {
    btType?: 'BTMParameterReferenceAssembly-938Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceBlob3281Writable = BtmParameterReference2434Writable & {
    btType?: 'BTMParameterReferenceBlob-3281Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceCadImport2016Writable = BtmParameterReferenceBlob3281Writable & {
    btType?: 'BTMParameterReferenceCADImport-2016Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceImage2014Writable = BtmParameterReferenceBlob3281Writable & {
    btType?: 'BTMParameterReferenceImage-2014Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceJson790Writable = BtmParameterReferenceBlob3281Writable & {
    btType?: 'BTMParameterReferenceJSON-790Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferencePartStudio3302Writable = {
    blockBuildFunctionAccess?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuration?: Array<BtmParameter1Writable>;
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryData?: BtElementLibraryReferenceData3133;
    featureScriptType?: string;
    ids?: Array<string>;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    libraryRelationType?: GbtParameterLibraryRelationType;
    microversionId?: string;
    namespace?: string;
    /**
     * ID of the parameter's node.
     */
    nodeId?: string;
    /**
     * Unique ID of the parameter.
     */
    parameterId?: string;
    parameterName?: string;
    partIdentity?: BtpsoIdentity2741;
    partQuery?: BtmParameterQueryList148Writable;
    queryDataKey?: string;
    standardContentParametersId?: string;
    valueString?: string;
};

export type BtmParameterReferenceTable917Writable = BtmParameterReferenceBlob3281Writable & {
    btType?: 'BTMParameterReferenceTable-917Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceText2115Writable = BtmParameterReferenceBlob3281Writable & {
    btType?: 'BTMParameterReferenceText-2115Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceVariableStudio3550Writable = BtmParameterReferenceWithConfiguration3028Writable & {
    btType?: 'BTMParameterReferenceVariableStudio-3550Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterReferenceWithConfiguration3028Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuration?: Array<BtmParameter1Writable>;
    documentId?: string;
    documentVersionId?: string;
    elementId?: string;
    elementLibraryData?: BtElementLibraryReferenceData3133;
    featureScriptType?: string;
    ids?: Array<string>;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    libraryRelationType?: GbtParameterLibraryRelationType;
    microversionId?: string;
    namespace?: string;
    /**
     * ID of the parameter's node.
     */
    nodeId?: string;
    /**
     * Unique ID of the parameter.
     */
    parameterId?: string;
    parameterName?: string;
    valueString?: string;
};

export type BtmParameterString149Writable = BtmParameter1Writable & {
    btType?: 'BTMParameterString-149Writable';
} & {
    btType?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterStringWithTolerances4286Writable = BtmReadOnlyParameter3800Writable & {
    btType?: 'BTMParameterStringWithTolerances-4286Writable';
} & {
    btType?: string;
    components?: Array<BtToleranceString3274Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParameterTolerantQuantity2579Writable = BtmParameterQuantity147Writable & {
    btType?: 'BTMParameterTolerantQuantity-2579Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmParametricPartStudioFeature3883Writable = {
    auxiliaryTreeFeature?: boolean;
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureFolder?: boolean;
    /**
     * Unique ID of the feature instance within this Part Studio.
     */
    featureId?: string;
    featureListFieldIndex?: number;
    /**
     * The name of the feature spec that this feature instantiates.
     */
    featureType?: string;
    fieldIndexForOwnedMateConnectors?: number;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    mateConnectorFeature?: boolean;
    mateConnectors?: Array<BtmMateConnector66Writable>;
    /**
     * User-visible name of the feature.
     */
    name?: string;
    /**
     * Indicates where the feature definition lives. Features in the FeatureScript standard library have a namespace value of `""`. Custom features identify the Feature Studio that contains the definition.
     */
    namespace?: string;
    /**
     * ID for the feature node.
     */
    nodeId?: string;
    occurrenceQueriesFromAllConfigurations?: Array<BtmIndividualQueryWithOccurrenceBase904Writable>;
    parameterLibraries?: Array<BtmParameter1Writable>;
    parametricInstanceFeature?: boolean;
    /**
     * For internal use only. Should always be `false`.
     */
    returnAfterSubfeatures?: boolean;
    /**
     * List of subfeatures belonging to the feature.
     */
    subFeatures?: Array<BtmFeature134Writable>;
    subFeaturesNotUsedInQuery?: Array<BtmFeature134Writable>;
    /**
     * If `true`, the feature is suppressed. It will skip regeneration, denoted by a line through the name in the Feature list.
     */
    suppressed?: boolean;
    /**
     * `true` if the suppression is configured in the Part Studio.
     */
    suppressionConfigured?: boolean;
    suppressionState?: BtmSuppressionState1924Writable;
    /**
     * If `true`, the feature references a Variable Studio.
     */
    variableStudioReference?: boolean;
    version?: number;
};

export type BtmPartStudioMateConnectorQuery1324Writable = BtmFeatureQueryWithOccurrence157Writable & {
    btType?: 'BTMPartStudioMateConnectorQuery-1324Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmReadOnlyParameter3800Writable = BtmParameter1Writable & {
    btType?: 'BTMReadOnlyParameter-3800Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmRecordMetrics1169Writable = BtmNode19Writable & {
    btType?: 'BTMRecordMetrics-1169Writable';
} & {
    btType?: string;
    doBodyValidation?: boolean;
    previousFeatureId?: string;
    references?: Array<BtmIndividualQuery138Writable>;
    useLatestBehavior?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmRollback150Writable = BtmNode19Writable & {
    btType?: 'BTMRollback-150Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketch151Writable = BtmFeature134Writable & {
    btType?: 'BTMSketch-151Writable';
} & {
    btType?: string;
    constraints?: Array<BtmSketchConstraint2Writable>;
    entities?: Array<BtmSketchGeomEntity5Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchCompositeEntity893Writable = BtmSketchEntity3Writable & {
    btType?: 'BTMSketchCompositeEntity-893Writable';
} & {
    btType?: string;
    subEntities?: Array<BtmSketchEntity3Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchConstraint2Writable = BtmSketchEntity3Writable & {
    btType?: 'BTMSketchConstraint-2Writable';
} & {
    btType?: string;
    constraintType?: GbtConstraintType;
    drivenDimension?: boolean;
    hasOffsetData1?: boolean;
    hasOffsetData2?: boolean;
    hasPierceParameter?: boolean;
    helpParameters?: Array<number>;
    offsetDistance1?: number;
    offsetDistance2?: number;
    offsetOrientation1?: boolean;
    offsetOrientation2?: boolean;
    pierceParameter?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchCurve4Writable = BtmSketchGeomEntity5Writable & {
    btType?: 'BTMSketchCurve-4Writable';
} & {
    btType?: string;
    centerId?: string;
    internalIds?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchCurveSegment155Writable = BtmSketchCurve4Writable & {
    btType?: 'BTMSketchCurveSegment-155Writable';
} & {
    btType?: string;
    endParam?: number;
    endPointId?: string;
    offsetCurveExtensions?: Array<number>;
    startParam?: number;
    startPointId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchEntity3Writable = BtmNode19Writable & {
    btType?: 'BTMSketchEntity-3Writable';
} & {
    btType?: string;
    combinedSketchEntityType?: CombinedSketchEntityType;
    entityId?: string;
    entityIdAndReplaceInDependentFields?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    index?: number;
    name?: string;
    namespace?: string;
    parameters?: Array<BtmParameter1Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchGeomEntity5Writable = BtmSketchEntity3Writable & {
    btType?: 'BTMSketchGeomEntity-5Writable';
} & {
    btType?: string;
    controlBoxIds?: Array<string>;
    entityType?: GbtSketchEntityType;
    functionName?: string;
    isConstruction?: boolean;
    isFromEndpointSplineHandle?: boolean;
    isFromSplineControlPolygon?: boolean;
    isFromSplineHandle?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchImageEntity763Writable = BtmSketchGeomEntity5Writable & {
    btType?: 'BTMSketchImageEntity-763Writable';
} & {
    aspectRatio?: number;
    btType?: string;
    originX?: number;
    originY?: number;
    xaxisX?: number;
    xaxisY?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchInvalid1601Writable = BtmSketchEntity3Writable & {
    btType?: 'BTMSketchInvalid-1601Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchPoint158Writable = BtmSketchGeomEntity5Writable & {
    btType?: 'BTMSketchPoint-158Writable';
} & {
    btType?: string;
    isUserPoint?: boolean;
    x?: number;
    y?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSketchTextEntity1761Writable = BtmSketchGeomEntity5Writable & {
    btType?: 'BTMSketchTextEntity-1761Writable';
} & {
    ascent?: number;
    baselineDirectionX?: number;
    baselineDirectionY?: number;
    baselineStartX?: number;
    baselineStartY?: number;
    btType?: string;
    fontName?: string;
    text?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSuppressionState1924Writable = BtmNode19Writable & {
    btType?: 'BTMSuppressionState-1924Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSuppressionStateConfigured2598Writable = BtmSuppressionState1924Writable & {
    btType?: 'BTMSuppressionStateConfigured-2598Writable';
} & {
    btType?: string;
    configurationParameterId?: string;
    configurationParameterIdFieldIndex?: number;
    values?: Array<BtmConfiguredValue1341Writable>;
    valuesFieldIndex?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmSuppressionStateExpression1811Writable = BtmSuppressionState1924Writable & {
    btType?: 'BTMSuppressionStateExpression-1811Writable';
} & {
    btType?: string;
    value?: BtmParameterQuantity147Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmUnitsDefault160Writable = BtmNode19Writable & {
    btType?: 'BTMUnitsDefault-160Writable';
} & {
    btType?: string;
    units?: {
        [key: string]: string;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmUserCode161Writable = BtmNode19Writable & {
    btType?: 'BTMUserCode-161Writable';
} & {
    btType?: string;
    parsed?: BtpStatement269;
    statement?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmVariableStudioReference2764Writable = BtmFeature134Writable & {
    btType?: 'BTMVariableStudioReference-2764Writable';
} & {
    apiConfiguration?: BtApiConfiguration;
    btType?: string;
    configuration?: Array<BtmParameter1Writable>;
    documentId?: string;
    elementId?: string;
    entireVariableStudio?: boolean;
    isAutomatic?: boolean;
    microversionId?: BtMicroversionId366;
    partialReference?: boolean;
    referenceId?: string;
    referenceNamespace?: string;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    referencingAnything?: boolean;
    unsetAutomaticEdit?: BtTreeEdit13;
    validRevisionReference?: boolean;
    variableNames?: Array<string>;
    versionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtmWidthMate1011Writable = BtmAssemblyFeature887Writable & {
    btType?: 'BTMWidthMate-1011Writable';
} & {
    btType?: string;
    mateConnectorsNotUsedInQuery?: Array<BtmMateConnector66Writable>;
    tabMateConnectorQueryList?: BtmParameterQueryWithOccurrenceList67Writable;
    widthMateConnectorQueryList?: BtmParameterQueryWithOccurrenceList67Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtModelAnnotations3945Writable = BtmNode19Writable & {
    btType?: 'BTModelAnnotations-3945Writable';
} & {
    annotations?: Array<BtmAnnotation4664Writable>;
    btType?: string;
    toleranceSchemaForParts?: BtmParameterArray2025Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtModelProperties1258Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    nodeId?: string;
    subPartProperties?: Array<BtOnePartProperties230Writable>;
};

export type BtNamedPositionValuesColumnInfo816Writable = BtTableColumnInfo1222Writable & {
    btType?: 'BTNamedPositionValuesColumnInfo-816Writable';
} & {
    btType?: string;
    columnHasError?: boolean;
    parameterId?: string;
    parentId?: string;
    parentName?: string;
    tooltip?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtNodeWithReferenceWritable = {
    configuration?: Array<BtmParameter1Writable>;
    documentId?: string;
    elementId?: string;
    microversionId?: BtMicroversionId366;
    nodeId?: string;
    referenceParameter?: BtmParameterReferenceWithConfiguration3028Writable;
    validRevisionReference?: boolean;
    versionId?: string;
};

export type BtOneConfigurationPartProperties1661Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuration?: {
        [key: string]: BtfsValue1888;
    };
    merged?: BtOnePartProperties230Writable;
    nodeId?: string;
    properties?: Array<BtOnePartProperties230Writable>;
    propertyIds?: Array<string>;
};

export type BtOnePartProperties230Writable = {
    appearance?: BtGraphicsAppearance1152;
    appearanceForNewCell?: BtGraphicsAppearance1152;
    /**
     * Type of JSON object.
     */
    btType?: string;
    changedPropertiesSet?: Array<string>;
    customProperties?: BtPartCustomProperties1338;
    material?: BtPartMaterial1445;
    materialForNewCell?: BtPartMaterial1445;
    name?: string;
    nameForNewCell?: string;
    nameIfNotNull?: BtOnePartProperties230Writable;
    nodeId?: string;
    parsedQuery?: BtpFunctionDeclaration246Writable;
    query?: string;
    queryListParameter?: BtmParameterQueryList148Writable;
    sheetMetalBendOrder?: Array<string>;
    sheetMetalBendOrderIfNotNull?: BtOnePartProperties230Writable;
    visibility?: GbtPartVisibility;
};

export type BtpArgumentDeclaration232Writable = BtpNode7 & {
    btType?: 'BTPArgumentDeclaration-232Writable';
} & {
    btType?: string;
    identifier?: BtpIdentifier8Writable;
    name?: BtpIdentifier8Writable;
    standardType?: GbtpType;
    type?: BtpTypeName290;
    typeName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpConversionFunction1362Writable = BtpProcedureDeclarationBase266Writable & {
    btType?: 'BTPConversionFunction-1362Writable';
} & {
    btType?: string;
    from?: BtpLiteralNumber258;
    spaceAfterType?: BtpSpace10;
    to?: BtpLiteralNumber258;
    typeName?: BtpIdentifier8Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionCall240Writable = BtpExpression9 & {
    btType?: 'BTPExpressionCall-240Writable';
} & {
    btType?: string;
    functionExpression?: BtpExpression9;
    functionName?: BtpName261Writable;
    functionNameString?: string;
    isArrowCall?: boolean;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionFunction1325Writable = BtpExpression9 & {
    btType?: 'BTPExpressionFunction-1325Writable';
} & {
    arguments?: Array<BtpArgumentDeclaration232Writable>;
    body?: BtpStatementBlock271;
    btType?: string;
    expression?: BtpExpression9;
    isLambda?: boolean;
    isLambdaWithNoParens?: boolean;
    precondition?: BtpStatement269;
    returnType?: BtpTypeName290;
    spaceAfterArglist?: BtpSpace10;
    spaceAfterFunction?: BtpSpace10;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionOperator244Writable = BtpExpression9 & {
    btType?: 'BTPExpressionOperator-244Writable';
} & {
    btType?: string;
    forExport?: boolean;
    globalNamespace?: boolean;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    namespace?: Array<BtpIdentifier8Writable>;
    operand1?: BtpExpression9;
    operand2?: BtpExpression9;
    operand3?: BtpExpression9;
    operator?: GbtpOperator;
    spaceAfterNamespace?: BtpSpace10;
    spaceAfterOperator?: BtpSpace10;
    spaceBeforeOperator?: BtpSpace10;
    writtenAsFunctionCall?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpExpressionVarReference245Writable = BtpExpression9 & {
    btType?: 'BTPExpressionVarReference-245Writable';
} & {
    btType?: string;
    name?: BtpName261Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpFunctionDeclaration246Writable = {
    annotation?: BtpAnnotation231;
    arguments?: Array<BtpArgumentDeclaration232Writable>;
    argumentsToDocument?: Array<BtpArgumentDeclaration232Writable>;
    atomic?: boolean;
    body?: BtpStatementBlock271;
    /**
     * Type of JSON object.
     */
    btType?: string;
    deprecated?: boolean;
    deprecatedExplanation?: string;
    documentationType?: GbtpDefinitionType;
    endSourceLocation?: number;
    forExport?: boolean;
    name?: BtpIdentifier8Writable;
    nodeId?: string;
    precondition?: BtpStatement269;
    returnType?: BtpTypeName290;
    shortDescriptor?: string;
    spaceAfter?: BtpSpace10;
    spaceAfterArglist?: BtpSpace10;
    spaceAfterExport?: BtpSpace10;
    spaceBefore?: BtpSpace10;
    spaceDefault?: boolean;
    spaceInEmptyList?: BtpSpace10;
    startSourceLocation?: number;
    symbolName?: BtpIdentifier8Writable;
};

export type BtpFunctionOrPredicateDeclaration247Writable = BtpProcedureDeclarationBase266Writable & {
    btType?: 'BTPFunctionOrPredicateDeclaration-247Writable';
} & {
    btType?: string;
    name?: BtpIdentifier8Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpIdentifier8Writable = BtpPropertyAccessor23 & {
    btType?: 'BTPIdentifier-8Writable';
} & {
    btType?: string;
    identifier?: string;
    invalidIdentifierForTest?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtplValueVarReference252Writable = BtplValue249 & {
    btType?: 'BTPLValueVarReference-252Writable';
} & {
    btType?: string;
    name?: BtpIdentifier8Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpModule234Writable = BtpNode7 & {
    btType?: 'BTPModule-234Writable';
} & {
    btType?: string;
    deepImports?: {
        [key: string]: Array<BtImportWritable>;
    };
    fullyParsed?: boolean;
    imports?: Array<BtpTopLevelImport285Writable>;
    isBlob?: boolean;
    isInternalModule?: boolean;
    mayHaveImplicitImports?: boolean;
    pathMap?: {
        [key: string]: BtMicroversionId366;
    };
    toBeParsed?: BtLazilyParsedFeatureScriptWritable;
    topLevel?: Array<BtpTopLevelNode286Writable>;
    version?: BtpLiteralNumber258;
    versionNumber?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpName261Writable = BtpNode7 & {
    btType?: 'BTPName-261Writable';
} & {
    btType?: string;
    forExport?: boolean;
    globalNamespace?: boolean;
    identifier?: BtpIdentifier8Writable;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    namespace?: Array<BtpIdentifier8Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpOperatorDeclaration264Writable = BtpProcedureDeclarationBase266Writable & {
    btType?: 'BTPOperatorDeclaration-264Writable';
} & {
    btType?: string;
    operator?: GbtpOperator;
    spaceAfterOperator?: BtpSpace10;
    spaceBeforeOperator?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpPredicateDeclaration265Writable = BtpFunctionOrPredicateDeclaration247Writable & {
    btType?: 'BTPPredicateDeclaration-265Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpProcedureDeclarationBase266Writable = BtpTopLevelNode286Writable & {
    btType?: 'BTPProcedureDeclarationBase-266Writable';
} & {
    arguments?: Array<BtpArgumentDeclaration232Writable>;
    body?: BtpStatementBlock271;
    btType?: string;
    precondition?: BtpStatement269;
    returnType?: BtpTypeName290;
    spaceAfterArglist?: BtpSpace10;
    spaceInEmptyList?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementConstantDeclaration273Writable = BtpStatement269 & {
    btType?: 'BTPStatementConstantDeclaration-273Writable';
} & {
    btType?: string;
    identifier?: BtpIdentifier8Writable;
    name?: BtpIdentifier8Writable;
    standardType?: GbtpType;
    type?: BtpTypeName290;
    typeName?: string;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementLoopForIn279Writable = BtpStatementLoop277 & {
    btType?: 'BTPStatementLoopForIn-279Writable';
} & {
    btType?: string;
    container?: BtpExpression9;
    identifiers?: Array<BtpIdentifier8Writable>;
    isVarDeclaredHere?: boolean;
    keyVar?: BtpIdentifier8Writable;
    spaceBeforeVar?: BtpSpace10;
    standardTypes?: Array<GbtpType>;
    typeNames?: Array<string>;
    var?: BtpIdentifier8Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementTry1523Writable = BtpStatement269 & {
    btType?: 'BTPStatementTry-1523Writable';
} & {
    body?: BtpStatementBlock271;
    btType?: string;
    catchBlock?: BtpStatementBlock271;
    catchVariable?: BtpIdentifier8Writable;
    identifier?: BtpIdentifier8Writable;
    silent?: boolean;
    spaceAfterCatch?: BtpSpace10;
    spaceBeforeSilent?: BtpSpace10;
    standardType?: GbtpType;
    typeName?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpStatementVarDeclaration282Writable = BtpStatement269 & {
    btType?: 'BTPStatementVarDeclaration-282Writable';
} & {
    btType?: string;
    identifier?: BtpIdentifier8Writable;
    name?: BtpIdentifier8Writable;
    standardType?: GbtpType;
    type?: BtpTypeName290;
    typeName?: string;
    value?: BtpExpression9;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelConstantDeclaration283Writable = BtpTopLevelNode286Writable & {
    btType?: 'BTPTopLevelConstantDeclaration-283Writable';
} & {
    btType?: string;
    declaration?: BtpStatementConstantDeclaration273Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelEnumDeclaration284Writable = BtpTopLevelTypeDeclaration287Writable & {
    btType?: 'BTPTopLevelEnumDeclaration-284Writable';
} & {
    annotations?: Array<BtpAnnotation231>;
    btType?: string;
    spaceInEmptyList?: BtpSpace10;
    trailingComma?: boolean;
    values?: Array<BtpIdentifier8Writable>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelImport285Writable = BtpTopLevelNode286Writable & {
    btType?: 'BTPTopLevelImport-285Writable';
} & {
    btType?: string;
    combinedNamespacePathAndVersion?: string;
    /**
     * Element microversion that is being imported.
     */
    importMicroversion?: string;
    moduleId?: BtpModuleId235;
    namespace?: Array<BtpIdentifier8Writable>;
    namespaceString?: string;
    spaceBeforeImport?: BtpSpace10;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelNode286Writable = BtpNode7 & {
    btType?: 'BTPTopLevelNode-286Writable';
} & {
    annotation?: BtpAnnotation231;
    argumentsToDocument?: Array<BtpArgumentDeclaration232Writable>;
    btType?: string;
    deprecated?: boolean;
    deprecatedExplanation?: string;
    forExport?: boolean;
    spaceAfterExport?: BtpSpace10;
    symbolName?: BtpIdentifier8Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelTypeDeclaration287Writable = BtpTopLevelNode286Writable & {
    btType?: 'BTPTopLevelTypeDeclaration-287Writable';
} & {
    btType?: string;
    name?: BtpIdentifier8Writable;
    spaceAfterVersion?: BtpSpace10;
    version?: BtpLiteralNumber258;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTopLevelUserTypeDeclaration288Writable = BtpTopLevelTypeDeclaration287Writable & {
    btType?: 'BTPTopLevelUserTypeDeclaration-288Writable';
} & {
    btType?: string;
    typecheck?: BtpName261Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtpTypeNameUser292Writable = BtpTypeName290 & {
    btType?: 'BTPTypeNameUser-292Writable';
} & {
    btType?: string;
    type?: BtpName261Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterGroupSpec3469Writable = {
    additionalLocalizedStrings?: number;
    /**
     * Type of JSON object.
     */
    btType?: string;
    collapsedByDefault?: boolean;
    drivingParameterId?: string;
    groupId?: string;
    groupName?: string;
    groupOrParameterIds?: Array<string>;
    localizableName?: string;
    localizedName?: string;
    stringsToLocalize?: Array<string>;
};

export type BtParameterLookupTableEntry1667Writable = {
    additionalLocalizedStrings?: number;
    /**
     * Type of JSON object.
     */
    btType?: string;
    label?: string;
    localizableName?: string;
    localizedLabel?: string;
    localizedName?: string;
    stringsToLocalize?: Array<string>;
};

export type BtParameterLookupTableListEntry1916Writable = {
    additionalLocalizedStrings?: number;
    /**
     * Type of JSON object.
     */
    btType?: string;
    defaultIndex?: number;
    displayName?: string;
    entries?: Array<BtParameterLookupTableEntry1667Writable>;
    label?: string;
    localizableName?: string;
    localizedLabel?: string;
    localizedName?: string;
    name?: string;
    stringsToLocalize?: Array<string>;
};

export type BtParameterSpec6Writable = {
    additionalLocalizedStrings?: number;
    /**
     * Type of JSON object.
     */
    btType?: string;
    columnName?: string;
    defaultValue?: BtmParameter1Writable;
    enumOptions?: Array<string>;
    iconUri?: string;
    localizableName?: string;
    localizedName?: string;
    parameterDescription?: string;
    parameterId?: string;
    parameterName?: string;
    quantityType?: GbtQuantityType;
    stringsToLocalize?: Array<string>;
    uiHint?: string;
    uiHints?: Array<GbtuiHint>;
    visibilityCondition?: BtParameterVisibilityCondition177;
};

export type BtParameterSpecAppearance1740Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecAppearance-1740Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecArray2600Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecArray-2600Writable';
} & {
    btType?: string;
    dialogId?: string;
    drivenQuery?: string;
    icon?: string;
    itemLabelTemplate?: string;
    itemName?: string;
    maxNumberOfPicks?: number;
    showLabelsOnly?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecBoolean170Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecBoolean-170Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecButton4111Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecButton-4111Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecCategories4083Writable = BtParameterSpecMultiEnum3118Writable & {
    btType?: 'BTParameterSpecCategories-4083Writable';
} & {
    btType?: string;
    categoryIdToMetadataTypes?: {
        [key: string]: Array<number>;
    };
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecDatabase1071Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecDatabase-1071Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecDerived736Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecDerived-736Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecEnum171Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecEnum-171Writable';
} & {
    btType?: string;
    enumName?: string;
    enumOptionVisibilityConditions?: BtEnumOptionVisibilityConditionList2936;
    enumValueToVisibilityCondition?: {
        [key: string]: BtParameterVisibilityCondition177;
    };
    namespace?: string;
    optionIconUris?: Array<string>;
    optionNames?: Array<string>;
    options?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecFeatureList703Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecFeatureList-703Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecForeignId172Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecForeignId-172Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecIcon4779Writable = BtReadOnlyParameterSpec1889Writable & {
    btType?: 'BTParameterSpecIcon-4779Writable';
} & {
    allowLink?: boolean;
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecLookupTablePath761Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecLookupTablePath-761Writable';
} & {
    btType?: string;
    lookupTable?: BtParameterLookupTableListEntry1916Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecMaterial2700Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecMaterial-2700Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecMultiEnum3118Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecMultiEnum-3118Writable';
} & {
    btType?: string;
    enumName?: string;
    enumValueToVisibilityCondition?: {
        [key: string]: BtParameterVisibilityCondition177;
    };
    multivalued?: boolean;
    namespace?: string;
    optionNames?: Array<string>;
    options?: Array<string>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecNotice3132Writable = BtReadOnlyParameterSpec1889Writable & {
    btType?: 'BTParameterSpecNotice-3132Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecNullableQuantity715Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecNullableQuantity-715Writable';
} & {
    btType?: string;
    ranges?: Array<BtNullableQuantityRange1340>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecProgress3078Writable = BtReadOnlyParameterSpec1889Writable & {
    btType?: 'BTParameterSpecProgress-3078Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecQuantity173Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecQuantity-173Writable';
} & {
    btType?: string;
    ranges?: Array<BtQuantityRange181>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecQuery174Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecQuery-174Writable';
} & {
    additionalBoxSelectFilter?: BtQueryFilter183;
    btType?: string;
    filter?: BtQueryFilter183;
    maxNumberOfPicks?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReference2789Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecReference-2789Writable';
} & {
    btType?: string;
    libraryDefinitionId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceAssembly2821Writable = BtParameterSpecReference2789Writable & {
    btType?: 'BTParameterSpecReferenceAssembly-2821Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceBlob1367Writable = BtParameterSpecReference2789Writable & {
    btType?: 'BTParameterSpecReferenceBlob-1367Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceCadImport1792Writable = BtParameterSpecReferenceBlob1367Writable & {
    btType?: 'BTParameterSpecReferenceCADImport-1792Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceImage1722Writable = BtParameterSpecReferenceBlob1367Writable & {
    btType?: 'BTParameterSpecReferenceImage-1722Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceJson1816Writable = BtParameterSpecReferenceBlob1367Writable & {
    btType?: 'BTParameterSpecReferenceJSON-1816Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferencePartStudio1256Writable = BtParameterSpecReference2789Writable & {
    btType?: 'BTParameterSpecReferencePartStudio-1256Writable';
} & {
    allowedInsertableTypes?: Array<GbtPartStudioItemType>;
    btType?: string;
    computedConfigurationInputs?: Array<BtComputedConfigurationInputSpec2525>;
    maxNumberOfPicks?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceTable1520Writable = BtParameterSpecReferenceBlob1367Writable & {
    btType?: 'BTParameterSpecReferenceTable-1520Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceText4945Writable = BtParameterSpecReferenceBlob1367Writable & {
    btType?: 'BTParameterSpecReferenceText-4945Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceVariableStudio1060Writable = BtParameterSpecReference2789Writable & {
    btType?: 'BTParameterSpecReferenceVariableStudio-1060Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecReferenceWithConfiguration2950Writable = BtParameterSpecReference2789Writable & {
    btType?: 'BTParameterSpecReferenceWithConfiguration-2950Writable';
} & {
    allowAssemblies?: boolean;
    allowedInsertableTypes?: Array<GbtPartStudioItemType>;
    btType?: string;
    maxNumberOfPicks?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecString175Writable = BtParameterSpec6Writable & {
    btType?: 'BTParameterSpecString-175Writable';
} & {
    btType?: string;
    disallowsEmptyStrings?: string;
    disallowsHtml?: string;
    formatConditions?: Array<BtStringFormatCondition683>;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParameterSpecStringWithTolerances2535Writable = BtReadOnlyParameterSpec1889Writable & {
    btType?: 'BTParameterSpecStringWithTolerances-2535Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricInstance2641Writable = BtInstanceBase2263Writable & {
    btType?: 'BTParametricInstance-2641Writable';
} & {
    btType?: string;
    feature?: BtmAssemblyFeature887Writable;
    featureId?: string;
    instanceControlNodes?: Array<BtInstanceControlNode750Writable>;
    seedBasedParametricInstance?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricOutputInstance2288Writable = BtInstanceBase2263Writable & {
    btType?: 'BTParametricOutputInstance-2288Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricPartStudioChildInstance3696Writable = BtParametricOutputInstance2288Writable & {
    btType?: 'BTParametricPartStudioChildInstance-3696Writable';
} & {
    btType?: string;
    partIdentity?: BtpsoIdentity2741;
    sketchFeatureId?: string;
    type?: GbtPartStudioInstanceType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtParametricPartStudioInstance4374Writable = BtParametricInstance2641Writable & {
    btType?: 'BTParametricPartStudioInstance-4374Writable';
} & {
    btType?: string;
    configuration?: Array<BtmParameter1Writable>;
    documentId?: string;
    elementId?: string;
    elementReference?: BtElementReference725;
    externalDocumentWithVersion?: BtDocumentWithVersionId;
    externalDocumentWithVersionAndElementId?: BtDocumentWithVersionAndElementId;
    lockedState?: boolean;
    microversionId?: BtMicroversionId366;
    nodeWithReferenceList?: Array<BtNodeWithReferenceWritable>;
    parametricPartStudioFeature?: BtmParametricPartStudioFeature3883Writable;
    referenceParameter?: BtmParameterReferencePartStudio3302Writable;
    versionId?: string;
    versionIdIfExternal?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPartInstance81Writable = BtInstance642Writable & {
    btType?: 'BTPartInstance-81Writable';
} & {
    btType?: string;
    partIdentity?: BtpsoIdentity2741;
    partQuery?: string;
    partReference?: BtmParameterReferencePartStudio3302Writable;
    type?: GbtPartStudioInstanceType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtPartProperties293Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configuredParts?: BtConfiguredPartProperties2645Writable;
    identityIdToQueryIndex?: {
        [key: string]: number;
    };
    nodeId?: string;
    parts?: Array<BtOnePartProperties230Writable>;
    roughBytesEstimate?: number;
    tessellationProperties?: BtTessellationProperties927;
};

export type BtPartWithConfiguredProperties2163Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    configurationProperties?: Array<BtOneConfigurationPartProperties1661Writable>;
    forSubPartProperties?: boolean;
    nodeId?: string;
    parsedQuery?: BtpFunctionDeclaration246Writable;
    propertyNodeId?: string;
    query?: string;
};

export type BtPropertyTableColumnInfo2161Writable = BtTableColumnInfo1222Writable & {
    btType?: 'BTPropertyTableColumnInfo-2161Writable';
} & {
    btType?: string;
    isComputedAssemblyProperty?: boolean;
    isComputedProperty?: boolean;
    propertyValueType?: number;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtReadOnlyParameterSpec1889Writable = BtParameterSpec6Writable & {
    btType?: 'BTReadOnlyParameterSpec-1889Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtReleasePackageInfoWritable = {
    addAllDrawingsActive?: boolean;
    changeOrderId?: string;
    columnNames?: {
        [key: string]: string;
    };
    comments?: Array<BtCommentInfo>;
    companyId?: string;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    detailed?: boolean;
    documentId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    isObsoletion?: boolean;
    items?: Array<BtReleasePackageItemInfo>;
    linkedVersionIds?: Array<string>;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    originalWorkspaceId?: string;
    packageThumbnail?: string;
    parentComments?: Array<BtReleaseCommentListInfo>;
    parentPackages?: Array<string>;
    properties?: Array<BtWorkflowPropertyInfoWritable>;
    /**
     * Indicates whether the release is still in setup state and saved as a draft.
     */
    retainedAsDraft?: boolean;
    revisionRuleId?: string;
    rootItemsToRebuild?: Array<string>;
    updatedItemIds?: Array<string>;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workflow?: BtWorkflowSnapshotInfo;
    workflowError?: string;
    workflowId?: BtPublishedWorkflowId;
    workspaceId?: string;
};

export type BtSimulationInstance3093Writable = BtmNode19Writable & {
    btType?: 'BTSimulationInstance-3093Writable';
} & {
    btType?: string;
    isModal?: boolean;
    simulationId?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtSimulationTableColumnInfo1785Writable = BtTableColumnInfo1222Writable & {
    btType?: 'BTSimulationTableColumnInfo-1785Writable';
} & {
    btType?: string;
    crossHighlightData?: BtTableAssemblyCrossHighlightData2675;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTable1825Writable = {
    allRowValues?: Array<Array<string>>;
    /**
     * Type of JSON object.
     */
    btType?: string;
    columnCount?: number;
    frozenColumns?: number;
    isFailed?: boolean;
    nodeId?: string;
    readOnly?: boolean;
    rowCount?: number;
    sortOrder?: BtTableSortOrder4371;
    statusMessage?: string;
    statusType?: GbtNodeStatusType;
    tableColumns?: Array<BtTableColumnInfo1222Writable>;
    tableId?: string;
    tableRows?: Array<BtTableRow1054>;
    title?: string;
};

export type BtTableCellParameter2399Writable = BtTableCell1114 & {
    btType?: 'BTTableCellParameter-2399Writable';
} & {
    btType?: string;
    error?: string;
    info?: string;
    overrideSpec?: BtParameterSpec6Writable;
    parameter?: BtmParameter1Writable;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableCellParameterWithValue2122Writable = BtTableCellParameter2399Writable & {
    btType?: 'BTTableCellParameterWithValue-2122Writable';
} & {
    btType?: string;
    value?: BtfsValue1888;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableCellPropertyParameter2983Writable = BtTableCellParameter2399Writable & {
    btType?: 'BTTableCellPropertyParameter-2983Writable';
} & {
    aggregationSkippedFilteredOutValues?: boolean;
    btType?: string;
    isUnchanged?: boolean;
    overrideStatusType?: GbtMetadataOverrideStatusType;
    propertySourceType?: GbtMetadataSourceType;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTableColumnInfo1222Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    id?: string;
    nodeId?: string;
    specification?: BtTableColumnSpec1967Writable;
};

export type BtTableColumnSpec1967Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    defaultCellSpec?: BtParameterSpec6Writable;
    defaultColumnWidthUnits?: GbtTableColumnWidthUnits;
    defaultColumnWidthValue?: number;
    defaultHeaderName?: string;
    defaultTextAlignment?: GbtTableTextAlignment;
    isExpandable?: boolean;
    isRenamable?: boolean;
    readOnly?: boolean;
};

export type BtTableResponse1546Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    sourceMicroversion?: string;
    table?: BtTable1825Writable;
};

export type BtTableSpec915Writable = BtFeatureSpec129Writable & {
    btType?: 'BTTableSpec-915Writable';
} & {
    btType?: string;
    computedPropertyCategoryIds?: Array<string>;
    defaultPartCategoryId?: string;
    isComputedPropertyTable?: boolean;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtTaskInfoWritable = {
    action?: string;
    approverRole?: string;
    comments?: Array<BtCommentInfo>;
    companyId?: string;
    createdAt?: string;
    creator?: BtUserSummaryInfo;
    deletable?: boolean;
    description?: string;
    documentId?: string;
    documentName?: string;
    documentType?: number;
    editable?: boolean;
    elementId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    /**
     * Name of the resource.
     */
    name?: string;
    objectId?: string;
    properties?: Array<BtMetadataPropertyInfo>;
    publishedWorkflow?: BtPublishedWorkflowInfo;
    resolvedAt?: string;
    resolvedBy?: BtUserSummaryInfo;
    roles?: Array<BtTaskRbacRoleInfo>;
    simpleName?: string;
    sourceWorkspaceOrVersionName?: string;
    state?: string;
    status?: number;
    taskItems?: Array<BtTaskItemInfo>;
    taskType?: string;
    teams?: Array<BtTaskTeamSummaryInfo>;
    thumbnail?: BtThumbnailInfo;
    transition?: string;
    users?: Array<BtTaskUserSummaryInfo>;
    versionId?: string;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workflowInfo?: BtWorkflowableObjectInfoWritable;
    workflowableObjectType?: number;
    workspaceId?: string;
};

export type BtTaskListResponseWritable = {
    /**
     * URI for current page of resources.
     */
    href?: string;
    /**
     * Array of items in the current page.
     */
    items?: Array<BtTaskInfoWritable>;
    /**
     * URI for next page of the resources if more are available.
     */
    next?: string;
    /**
     * URI for previous page of the resources.
     */
    previous?: string;
    taskTypes?: Array<BtTaskTypeInfo>;
};

export type BtToleranceSpec3441Writable = BtFeatureSpec129Writable & {
    btType?: 'BTToleranceSpec-3441Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtToleranceString3274Writable = BtmNode19Writable & {
    btType?: 'BTToleranceString-3274Writable';
} & {
    btType?: string;
    classification?: string;
    lower?: string;
    upper?: string;
    value?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtUpdateFeaturesCall1748Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    features?: Array<BtmFeature134Writable>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
    updateSuppressionAttributes?: boolean;
};

export type BtUpdateFeaturesResponse1333Writable = {
    /**
     * Type of JSON object.
     */
    btType?: string;
    featureStates?: {
        [key: string]: BtFeatureState1688;
    };
    features?: Array<BtmFeature134Writable>;
    /**
     * FeatureScript version used in the Part Studio. Do not modify.
     */
    libraryVersion?: number;
    /**
     * On output, `true` indicates a microversion mismatch was encountered.
     */
    microversionSkew?: boolean;
    /**
     * If `true`, the call will refuse to make the addition if the current microversion for the document does not match the source microversion. If `false`, a best-effort attempt is made to re-interpret the feature addition in the context of a newer document microversion.
     */
    rejectMicroversionSkew?: boolean;
    /**
     * Version of the structure serialization rules used to encode the output. This enables incompatibility detection during software updates.
     */
    serializationVersion?: string;
    /**
     * The state from which the result was extracted. Geometry ID interpretation is dependent on this document microversion.
     */
    sourceMicroversion?: string;
};

export type BtVariableStudioReferenceSpec5278Writable = BtFeatureSpec129Writable & {
    btType?: 'BTVariableStudioReferenceSpec-5278Writable';
} & {
    btType?: string;
} & {
    /**
     * Type of JSON object.
     */
    btType?: string;
};

export type BtWorkflowPropertyInfoWritable = {
    aggregationSkippedFilteredOutValues?: boolean;
    computedAssemblyProperty?: boolean;
    computedProperty?: boolean;
    computedPropertyError?: string;
    computedPropertyEvalInfo?: string;
    dateFormat?: string;
    dirty?: boolean;
    editable?: boolean;
    editableInUi?: boolean;
    enumValues?: Array<BtMetadataEnumValueInfo>;
    hideInUi?: boolean;
    isApproverProperty?: boolean;
    isNotifierProperty?: boolean;
    multivalued?: boolean;
    name?: string;
    observers?: Array<BtWorkflowableObjectObserver>;
    propertyId?: string;
    /**
     * 0: Unknown | 1: Not computed | 2: Computed without override | 3: Computed with override | 4: Computed with subassembly overrides | 5: Overridden
     */
    propertyOverrideStatus?: number;
    propertySource?: number;
    required?: boolean;
    schemaId?: string;
    teamsOnly?: boolean;
    uiHints?: BtMetadataPropertyUiHintsInfo;
    usersOnly?: boolean;
    validator?: BtMetadataPropertyValidatorInfo;
    valueType?: string;
};

export type BtWorkflowableObjectInfoWritable = {
    companyId?: string;
    createdAt?: string;
    createdBy?: BtUserBasicSummaryInfo;
    description?: string;
    documentId?: string;
    /**
     * URI to fetch complete information of the resource.
     */
    href?: string;
    /**
     * Id of the resource.
     */
    id?: string;
    modifiedAt?: string;
    modifiedBy?: BtUserBasicSummaryInfo;
    /**
     * Name of the resource.
     */
    name?: string;
    properties?: Array<BtWorkflowPropertyInfoWritable>;
    /**
     * URI to visualize the resource in a webclient if applicable.
     */
    viewRef?: string;
    workflow?: BtWorkflowSnapshotInfo;
    workflowError?: string;
    workflowId?: BtPublishedWorkflowId;
};

export type GetPlanPurchasesData = {
    body?: never;
    path: {
        planId: string;
    };
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/accounts/plans/{planId}/purchases';
};

export type GetPlanPurchasesResponses = {
    /**
     * default response
     */
    default: BtListResponseBtPurchaseInfo;
};

export type GetPlanPurchasesResponse = GetPlanPurchasesResponses[keyof GetPlanPurchasesResponses];

export type GetPurchasesData = {
    body?: never;
    path?: never;
    query?: {
        all?: boolean;
        ownPurchaseOnly?: boolean;
    };
    url: '/accounts/purchases';
};

export type GetPurchasesResponses = {
    /**
     * default response
     */
    default: Array<BtPurchaseInfo>;
};

export type GetPurchasesResponse = GetPurchasesResponses[keyof GetPurchasesResponses];

export type ConsumePurchaseData = {
    body?: BtPurchaseIdentityParams;
    path: {
        pid: string;
    };
    query?: never;
    url: '/accounts/purchases/{pid}/consume';
};

export type ConsumePurchaseResponses = {
    /**
     * default response
     */
    default: BtPurchaseInfo;
};

export type ConsumePurchaseResponse = ConsumePurchaseResponses[keyof ConsumePurchaseResponses];

export type CancelPurchaseNewData = {
    body?: never;
    path: {
        aid: string;
        pid: string;
    };
    query?: {
        cancelImmediately?: boolean;
    };
    url: '/accounts/{aid}/purchases/{pid}';
};

export type CancelPurchaseNewResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type CancelPurchaseNewResponse = CancelPurchaseNewResponses[keyof CancelPurchaseNewResponses];

export type GetAliasesInCompanyData = {
    body?: never;
    path?: never;
    query?: {
        prefix?: string;
        sortColumn?: string;
        sortOrder?: string;
        offset?: number;
        limit?: number;
    };
    url: '/aliases';
};

export type GetAliasesInCompanyResponses = {
    /**
     * default response
     */
    default: BtListResponseBtAliasInfo;
};

export type GetAliasesInCompanyResponse = GetAliasesInCompanyResponses[keyof GetAliasesInCompanyResponses];

export type CreateAliasData = {
    body: BtAliasParams;
    path?: never;
    query?: never;
    url: '/aliases';
};

export type CreateAliasResponses = {
    /**
     * default response
     */
    default: BtAliasInfo;
};

export type CreateAliasResponse = CreateAliasResponses[keyof CreateAliasResponses];

export type DeleteAliasData = {
    body?: never;
    path: {
        aid: string;
    };
    query?: never;
    url: '/aliases/{aid}';
};

export type DeleteAliasResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteAliasResponse = DeleteAliasResponses[keyof DeleteAliasResponses];

export type GetAliasData = {
    body?: never;
    path: {
        aid: string;
    };
    query?: never;
    url: '/aliases/{aid}';
};

export type GetAliasResponses = {
    /**
     * default response
     */
    default: BtAliasInfo;
};

export type GetAliasResponse = GetAliasResponses[keyof GetAliasResponses];

export type UpdateAliasData = {
    body: BtAliasParams;
    path: {
        aid: string;
    };
    query?: never;
    url: '/aliases/{aid}';
};

export type UpdateAliasResponses = {
    /**
     * default response
     */
    default: BtAliasInfo;
};

export type UpdateAliasResponse = UpdateAliasResponses[keyof UpdateAliasResponses];

export type GetAliasMembersData = {
    body?: never;
    path: {
        aid: string;
    };
    query?: {
        prefix?: string;
        sortColumn?: string;
        sortOrder?: string;
        offset?: number;
        limit?: number;
    };
    url: '/aliases/{aid}/members';
};

export type GetAliasMembersResponses = {
    /**
     * default response
     */
    default: BtListResponseBtAliasEntryInfo;
};

export type GetAliasMembersResponse = GetAliasMembersResponses[keyof GetAliasMembersResponses];

export type CreateElementData = {
    body: BtAppElementParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/appelements/d/{did}/w/{wid}';
};

export type CreateElementResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type CreateElementResponse = CreateElementResponses[keyof CreateElementResponses];

export type BulkCreateElementData = {
    body: BtAppElementBulkCreateParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/appelements/d/{did}/w/{wid}/bulkcreate';
};

export type BulkCreateElementResponses = {
    /**
     * default response
     */
    default: BtAppElementBulkCreateInfo;
};

export type BulkCreateElementResponse = BulkCreateElementResponses[keyof BulkCreateElementResponses];

export type DeleteBlobSubelementData = {
    body?: never;
    path: {
        did: string;
        wid: string;
        eid: string;
        bid: string;
    };
    query?: {
        transactionId?: string;
        changeId?: string;
    };
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}';
};

export type DeleteBlobSubelementResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type DeleteBlobSubelementResponse = DeleteBlobSubelementResponses[keyof DeleteBlobSubelementResponses];

export type DownloadBlobSubelementWorkspaceData = {
    body?: never;
    headers?: {
        'If-None-Match'?: string;
    };
    path: {
        did: string;
        wid: string;
        eid: string;
        bid: string;
    };
    query?: {
        contentDisposition?: string;
        transactionId?: string;
        changeId?: string;
    };
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}';
};

export type DownloadBlobSubelementWorkspaceResponses = {
    /**
     * File download.
     */
    default: Blob | File;
};

export type DownloadBlobSubelementWorkspaceResponse = DownloadBlobSubelementWorkspaceResponses[keyof DownloadBlobSubelementWorkspaceResponses];

export type UploadBlobSubelementData = {
    body?: {
        transactionId?: string;
        parentChangeId?: string;
        description?: string;
        /**
         * File to upload.
         */
        file?: {
            [key: string]: unknown;
        };
        fileContentLength?: number;
    };
    path: {
        did: string;
        wid: string;
        eid: string;
        bid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}';
};

export type UploadBlobSubelementResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type UploadBlobSubelementResponse = UploadBlobSubelementResponses[keyof UploadBlobSubelementResponses];

export type CopyAssociativeDataData = {
    body?: BtAppElementParamsArrayBtCopyViewAssociativeDataParams;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/copyassociativedata';
};

export type CopyAssociativeDataResponses = {
    /**
     * default response
     */
    default: BtAppAssociativeDataArrayInfo;
};

export type CopyAssociativeDataResponse = CopyAssociativeDataResponses[keyof CopyAssociativeDataResponses];

export type GetElementTransactionsData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/transactions';
};

export type GetElementTransactionsResponses = {
    /**
     * default response
     */
    default: BtAppElementTransactionsInfo;
};

export type GetElementTransactionsResponse = GetElementTransactionsResponses[keyof GetElementTransactionsResponses];

export type StartTransactionData = {
    body: BtAppElementStartTransactionParams;
    path: {
        did: string;
        eid: string;
        wid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/transactions';
};

export type StartTransactionResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type StartTransactionResponse = StartTransactionResponses[keyof StartTransactionResponses];

export type AbortTransactionData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wid: string;
        tid: string;
    };
    query?: {
        returnError?: boolean;
    };
    url: '/appelements/d/{did}/w/{wid}/e/{eid}/transactions/{tid}';
};

export type AbortTransactionResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type AbortTransactionResponse = AbortTransactionResponses[keyof AbortTransactionResponses];

export type CommitTransactionsData = {
    body: BtAppElementCommitTransactionParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/appelements/d/{did}/w/{wid}/transactions';
};

export type CommitTransactionsResponses = {
    /**
     * default response
     */
    default: BtAppElementBulkModifyInfo;
};

export type CommitTransactionsResponse = CommitTransactionsResponses[keyof CommitTransactionsResponses];

export type DownloadBlobSubelementData = {
    body?: never;
    headers?: {
        'If-None-Match'?: string;
    };
    path: {
        did: string;
        vm: string;
        vmid: string;
        eid: string;
        bid: string;
    };
    query?: {
        contentDisposition?: string;
        transactionId?: string;
        changeId?: string;
        linkDocumentId?: string;
    };
    url: '/appelements/d/{did}/{vm}/{vmid}/e/{eid}/blob/{bid}';
};

export type DownloadBlobSubelementResponses = {
    /**
     * File download.
     */
    default: Blob | File;
};

export type DownloadBlobSubelementResponse = DownloadBlobSubelementResponses[keyof DownloadBlobSubelementResponses];

export type DeleteAssociativeDataData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: {
        transactionId?: string;
        parentChangeId?: string;
        associativeDataId?: Array<string>;
        externalDocumentId?: string;
        elementId?: string;
        viewId?: string;
        microversionId?: string;
        documentMicroversion?: string;
        deterministicId?: string;
        featureId?: string;
        entityId?: string;
        occurrenceId?: string;
        referenceId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata';
};

export type DeleteAssociativeDataResponses = {
    /**
     * default response
     */
    default: BtAppElementBasicInfo;
};

export type DeleteAssociativeDataResponse = DeleteAssociativeDataResponses[keyof DeleteAssociativeDataResponses];

export type GetAssociativeDataData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        transactionId?: string;
        changeId?: string;
        associativeDataId?: Array<string>;
        externalDocumentId?: string;
        elementId?: string;
        viewId?: string;
        microversionId?: string;
        documentMicroversion?: string;
        deterministicId?: string;
        featureId?: string;
        entityId?: string;
        occurrenceId?: string;
        returnIdTags?: boolean;
        referenceId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata';
};

export type GetAssociativeDataResponses = {
    /**
     * default response
     */
    default: BtAppAssociativeDataArrayInfo;
};

export type GetAssociativeDataResponse = GetAssociativeDataResponses[keyof GetAssociativeDataResponses];

export type PostAssociativeDataData = {
    body: string;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata';
};

export type PostAssociativeDataResponses = {
    /**
     * default response
     */
    default: BtAppAssociativeDataArrayInfo;
};

export type PostAssociativeDataResponse = PostAssociativeDataResponses[keyof PostAssociativeDataResponses];

export type GetBlobSubelementIdsData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: {
        transactionId?: string;
        changeId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/blob';
};

export type GetBlobSubelementIdsResponses = {
    /**
     * default response
     */
    default: BtAppElementIdsInfo;
};

export type GetBlobSubelementIdsResponse = GetBlobSubelementIdsResponses[keyof GetBlobSubelementIdsResponses];

export type CompareAppElementJsonData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: {
        workspaceId?: string;
        versionId?: string;
        microversionId?: string;
        linkDocumentId?: string;
        jsonDifferenceFormat?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/compare';
};

export type CompareAppElementJsonResponses = {
    /**
     * default response
     */
    default: BtDiffJsonResponse2725;
};

export type CompareAppElementJsonResponse = CompareAppElementJsonResponses[keyof CompareAppElementJsonResponses];

export type GetSubElementContentData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        transactionId?: string;
        changeId?: string;
        baseChangeId?: string;
        subelementId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content';
};

export type GetSubElementContentResponses = {
    /**
     * default response
     */
    default: BtAppElementContentInfo;
};

export type GetSubElementContentResponse = GetSubElementContentResponses[keyof GetSubElementContentResponses];

export type UpdateAppElementData = {
    body?: BtAppElementUpdateParams;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content';
};

export type UpdateAppElementResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type UpdateAppElementResponse = UpdateAppElementResponses[keyof UpdateAppElementResponses];

export type GetAppElementHistoryData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/history';
};

export type GetAppElementHistoryResponses = {
    /**
     * default response
     */
    default: BtAppElementHistoryInfo;
};

export type GetAppElementHistoryResponse = GetAppElementHistoryResponses[keyof GetAppElementHistoryResponses];

export type GetSubelementIdsData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: {
        transactionId?: string;
        changeId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/ids';
};

export type GetSubelementIdsResponses = {
    /**
     * default response
     */
    default: BtAppElementIdsInfo;
};

export type GetSubelementIdsResponse = GetSubelementIdsResponses[keyof GetSubelementIdsResponses];

export type GetJsonData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
         */
        transactionId?: string;
        /**
         * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
         */
        changeId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/json';
};

export type GetJsonResponses = {
    /**
     * default response
     */
    default: BtGetJsonResponse2137;
};

export type GetJsonResponse = GetJsonResponses[keyof GetJsonResponses];

export type GetJsonPathsData = {
    body?: BtGetJsonPaths1697;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        transactionId?: string;
        changeId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/jsonpaths';
};

export type GetJsonPathsResponses = {
    /**
     * default response
     */
    default: BtGetJsonPathsResponse1544;
};

export type GetJsonPathsResponse = GetJsonPathsResponses[keyof GetJsonPathsResponses];

export type DeleteAppElementContentBatchData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: {
        subelementIds?: Array<string>;
        transactionId?: string;
        parentChangeId?: string;
        description?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements';
};

export type DeleteAppElementContentBatchResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type DeleteAppElementContentBatchResponse = DeleteAppElementContentBatchResponses[keyof DeleteAppElementContentBatchResponses];

export type GetSubElementContentBatchData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
         */
        transactionId?: string;
        /**
         * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
         */
        changeId?: string;
        /**
         * The id of a change made prior to the specified or implied changeId. If specified, only changes made after the base changeId are returned.
         */
        baseChangeId?: string;
        /**
         * The array of subelementIds in format: `&subelementIds=ID1& &subelementIds=ID2...&subelementIds=IDn.`
         */
        subelementIds?: Array<string>;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements';
};

export type GetSubElementContentBatchResponses = {
    /**
     * default response
     */
    default: BtAppElementContentInfo;
};

export type GetSubElementContentBatchResponse = GetSubElementContentBatchResponses[keyof GetSubElementContentBatchResponses];

export type DeleteAppElementContentData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
        sid: string;
    };
    query?: {
        transactionId?: string;
        parentChangeId?: string;
        description?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements/{sid}';
};

export type DeleteAppElementContentResponses = {
    /**
     * default response
     */
    default: BtAppElementModifyInfo;
};

export type DeleteAppElementContentResponse = DeleteAppElementContentResponses[keyof DeleteAppElementContentResponses];

export type CreateReferenceData = {
    body: BtAppElementReferenceParams;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references';
};

export type CreateReferenceResponses = {
    /**
     * default response
     */
    default: BtAppElementReferenceInfo;
};

export type CreateReferenceResponse = CreateReferenceResponses[keyof CreateReferenceResponses];

export type DeleteReferenceData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
        rid: string;
    };
    query?: {
        transactionId?: string;
        parentChangeId?: string;
        description?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}';
};

export type DeleteReferenceResponses = {
    /**
     * default response
     */
    default: BtAppElementReferenceInfo;
};

export type DeleteReferenceResponse = DeleteReferenceResponses[keyof DeleteReferenceResponses];

export type ResolveReferenceData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
        rid: string;
    };
    query?: {
        transactionId?: string;
        parentChangeId?: string;
        includeInternal?: boolean;
        linkDocumentId?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}';
};

export type ResolveReferenceResponses = {
    /**
     * default response
     */
    default: BtAppElementReferenceResolveInfo;
};

export type ResolveReferenceResponse = ResolveReferenceResponses[keyof ResolveReferenceResponses];

export type UpdateReferenceData = {
    body: BtAppElementReferenceParams;
    path: {
        did: string;
        eid: string;
        wvm: string;
        wvmid: string;
        rid: string;
    };
    query?: never;
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}';
};

export type UpdateReferenceResponses = {
    /**
     * default response
     */
    default: BtAppElementReferenceInfo;
};

export type UpdateReferenceResponse = UpdateReferenceResponses[keyof UpdateReferenceResponses];

export type ResolveReferencesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        transactionId?: string;
        parentChangeId?: string;
        includeInternal?: boolean;
        referenceIds?: string;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/resolvereferences';
};

export type ResolveReferencesResponses = {
    /**
     * default response
     */
    default: BtAppElementReferencesResolveInfo;
};

export type ResolveReferencesResponse = ResolveReferencesResponses[keyof ResolveReferencesResponses];

export type ResolveAllElementReferencesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
         */
        transactionId?: string;
        /**
         * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
         */
        parentChangeId?: string;
        /**
         * Whether to include references that have been deleted or inactivated.
         */
        includeInternal?: boolean;
        /**
         * Comma separated string of reference ids find.
         */
        referenceIds?: string;
        /**
         * Comma separated string of element ids to search for references in.
         */
        elementIds?: string;
        /**
         * Whether to find references for only Onshape drawing app elements.
         */
        drawingsOnly?: boolean;
    };
    url: '/appelements/d/{did}/{wvm}/{wvmid}/resolvereferences';
};

export type ResolveAllElementReferencesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: BtAppElementReferencesResolveInfo;
    };
};

export type ResolveAllElementReferencesResponse = ResolveAllElementReferencesResponses[keyof ResolveAllElementReferencesResponses];

export type DeleteCompanyAppSettingsData = {
    body?: never;
    path: {
        cpid: string;
        cid: string;
    };
    query?: {
        key?: Array<string>;
    };
    url: '/applications/clients/{cid}/settings/companies/{cpid}';
};

export type DeleteCompanyAppSettingsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteCompanyAppSettingsResponse = DeleteCompanyAppSettingsResponses[keyof DeleteCompanyAppSettingsResponses];

export type GetCompanyAppSettingsData = {
    body?: never;
    path: {
        cpid: string;
        cid: string;
    };
    query?: {
        /**
         * A document owned by the company. Read access to this document allows read access to its owning company's settings.
         */
        documentId?: string;
        key?: Array<string>;
    };
    url: '/applications/clients/{cid}/settings/companies/{cpid}';
};

export type GetCompanyAppSettingsResponses = {
    /**
     * default response
     */
    default: BtUserAppSettingsInfo;
};

export type GetCompanyAppSettingsResponse = GetCompanyAppSettingsResponses[keyof GetCompanyAppSettingsResponses];

export type UpdateAppCompanySettingsData = {
    body: BtUserAppSettingsParams;
    path: {
        cpid: string;
        cid: string;
    };
    query?: never;
    url: '/applications/clients/{cid}/settings/companies/{cpid}';
};

export type UpdateAppCompanySettingsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateAppCompanySettingsResponse = UpdateAppCompanySettingsResponses[keyof UpdateAppCompanySettingsResponses];

export type DeleteAppSettingsData = {
    body?: never;
    path: {
        uid: string;
        cid: string;
    };
    query?: {
        key?: Array<string>;
    };
    url: '/applications/clients/{cid}/settings/users/{uid}';
};

export type DeleteAppSettingsResponses = {
    /**
     * Success!
     */
    200: unknown;
};

export type GetUserAppSettingsData = {
    body?: never;
    path: {
        uid: string;
        cid: string;
    };
    query?: {
        key?: Array<string>;
    };
    url: '/applications/clients/{cid}/settings/users/{uid}';
};

export type GetUserAppSettingsResponses = {
    /**
     * default response
     */
    default: BtUserAppSettingsInfo;
};

export type GetUserAppSettingsResponse = GetUserAppSettingsResponses[keyof GetUserAppSettingsResponses];

export type UpdateAppSettingsData = {
    body: BtUserAppSettingsParams;
    path: {
        uid: string;
        cid: string;
    };
    query?: never;
    url: '/applications/clients/{cid}/settings/users/{uid}';
};

export type UpdateAppSettingsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateAppSettingsResponse = UpdateAppSettingsResponses[keyof UpdateAppSettingsResponses];

export type GetApplicableExtensionsForClientData = {
    body?: never;
    path: {
        uid: string;
        cid: string;
    };
    query?: {
        validPurchases?: boolean;
    };
    url: '/applications/extensions/user/{uid}/client/{cid}';
};

export type GetApplicableExtensionsForClientResponses = {
    /**
     * default response
     */
    default: Array<BtapiApplicationExtensionInfo>;
};

export type GetApplicableExtensionsForClientResponse = GetApplicableExtensionsForClientResponses[keyof GetApplicableExtensionsForClientResponses];

export type GetNamedViewsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        skipPerspective?: boolean;
        includeSectionCutViews?: boolean;
    };
    url: '/assemblies/d/{did}/e/{eid}/namedViews';
};

export type GetNamedViewsResponses = {
    /**
     * default response
     */
    default: BtNamedViewsInfo;
};

export type GetNamedViewsResponse = GetNamedViewsResponses[keyof GetNamedViewsResponses];

export type CreateAssemblyData = {
    body: BtModelElementParams;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}';
};

export type CreateAssemblyResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type CreateAssemblyResponse = CreateAssemblyResponses[keyof CreateAssemblyResponses];

export type GetOrCreateBillOfMaterialsElementData = {
    body?: never;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/bomelement';
};

export type GetOrCreateBillOfMaterialsElementResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type GetOrCreateBillOfMaterialsElementResponse = GetOrCreateBillOfMaterialsElementResponses[keyof GetOrCreateBillOfMaterialsElementResponses];

export type DeleteFeatureData = {
    body?: never;
    path: {
        did: string;
        wid: string;
        eid: string;
        fid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}';
};

export type DeleteFeatureResponses = {
    /**
     * Success!
     */
    200: BtFeatureApiBase1430;
};

export type DeleteFeatureResponse = DeleteFeatureResponses[keyof DeleteFeatureResponses];

export type UpdateFeatureData = {
    body?: BtFeatureDefinitionCall1406Writable;
    path: {
        did: string;
        wid: string;
        eid: string;
        fid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}';
};

export type UpdateFeatureResponses = {
    /**
     * default response
     */
    default: BtFeatureDefinitionResponse1617;
};

export type UpdateFeatureResponse = UpdateFeatureResponses[keyof UpdateFeatureResponses];

export type DeleteInstanceData = {
    body?: never;
    path: {
        did: string;
        eid: string;
        wid: string;
        nid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/instance/nodeid/{nid}';
};

export type DeleteInstanceResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteInstanceResponse = DeleteInstanceResponses[keyof DeleteInstanceResponses];

export type CreateInstanceData = {
    body?: BtAssemblyInstanceDefinitionParams;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/instances';
};

export type CreateInstanceResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type CreateInstanceResponse = CreateInstanceResponses[keyof CreateInstanceResponses];

export type UpdateMateValuesData = {
    body: BtAssemblyMateValuesInfo;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/matevalues';
};

export type UpdateMateValuesResponses = {
    /**
     * default response
     */
    default: BtAssemblyMateValuesInfo;
};

export type UpdateMateValuesResponse = UpdateMateValuesResponses[keyof UpdateMateValuesResponses];

export type ModifyData = {
    body?: BtAssemblyModificationParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/modify';
};

export type ModifyResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type ModifyResponse = ModifyResponses[keyof ModifyResponses];

export type TransformOccurrencesData = {
    body?: BtAssemblyTransformDefinitionParams;
    path: {
        did: string;
        eid: string;
        wid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/occurrencetransforms';
};

export type TransformOccurrencesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type TransformOccurrencesResponse = TransformOccurrencesResponses[keyof TransformOccurrencesResponses];

export type InsertTransformedInstancesData = {
    body: BtAssemblyTransformedInstancesDefinitionParams;
    path: {
        did: string;
        eid: string;
        wid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/w/{wid}/e/{eid}/transformedinstances';
};

export type InsertTransformedInstancesResponses = {
    /**
     * default response
     */
    default: BtAssemblyInsertTransformedInstancesResponse;
};

export type InsertTransformedInstancesResponse = InsertTransformedInstancesResponses[keyof InsertTransformedInstancesResponses];

export type GetAssemblyDefinitionData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        explodedViewId?: string;
        includeMateFeatures?: boolean;
        includeNonSolids?: boolean;
        includeMateConnectors?: boolean;
        /**
         * Whether or not to exclude suppressed instances/mate features in response
         */
        excludeSuppressed?: boolean;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}';
};

export type GetAssemblyDefinitionResponses = {
    /**
     * default response
     */
    default: BtAssemblyDefinitionInfo;
};

export type GetAssemblyDefinitionResponse = GetAssemblyDefinitionResponses[keyof GetAssemblyDefinitionResponses];

export type GetBillOfMaterialsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Ids of the columns to include, or all columns if empty. BOM column ids correspond to metadata property ids.
         */
        bomColumnIds?: Array<string>;
        /**
         * Return the Structured BOM table with all rows collapsed, otherwise returns the Flattened BOM.
         */
        indented?: boolean;
        /**
         * Return the Structured BOM table with all rows expanded. Ignored if indented is false.
         */
        multiLevel?: boolean;
        /**
         * Return the BOM table data even if the BOM does not exist. If this is false and the BOM does not exist, a 404 status code will be returned. This option is highly recommended.
         */
        generateIfAbsent?: boolean;
        /**
         * The id of the BOM table template to use when generating the table.
         */
        templateId?: string;
        /**
         * Include items that have been excluded from the BOM table.
         */
        includeExcluded?: boolean;
        /**
         * Only return data for visible columns, instead of all possible columns.
         */
        onlyVisibleColumns?: boolean;
        /**
         * Ignore the 'Subassembly BOM behavior' property when constructing the BOM table.
         */
        ignoreSubassemblyBomBehavior?: boolean;
        /**
         * Include element microversions and version metadata microversions in the JSON.
         */
        includeItemMicroversions?: boolean;
        /**
         * Include top-level assembly row when constructing the BOM table.
         */
        includeTopLevelAssemblyRow?: boolean;
        /**
         * Return thumbnail info
         */
        thumbnail?: boolean;
        /**
         * Force respect subassembly BOM Behavior Property
         */
        respectSubassemblyBomBehavior?: boolean;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/bom';
};

export type GetBillOfMaterialsResponses = {
    /**
     * default response
     */
    default: BtBillOfMaterialsInfo;
};

export type GetBillOfMaterialsResponse = GetBillOfMaterialsResponses[keyof GetBillOfMaterialsResponses];

export type GetAssemblyBoundingBoxesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        explodedViewId?: string;
        includeHidden?: boolean;
        /**
         * Call the [getDisplayStates](#/Assembly/getDisplayStates) endpoint to get display state ID(s).
         */
        displayStateId?: string;
        namedPositionId?: string;
        includeSketches?: boolean;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes';
};

export type GetAssemblyBoundingBoxesResponses = {
    /**
     * default response
     */
    default: BtBoundingBoxInfo;
};

export type GetAssemblyBoundingBoxesResponse = GetAssemblyBoundingBoxesResponses[keyof GetAssemblyBoundingBoxesResponses];

export type GetDisplayStatesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/displaystates';
};

export type GetDisplayStatesResponses = {
    /**
     * Success!
     */
    200: Array<BtDisplayStateInfo>;
};

export type GetDisplayStatesResponse = GetDisplayStatesResponses[keyof GetDisplayStatesResponses];

export type GetExplodedViewsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        explodedViewId?: string;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/explodedviews';
};

export type GetExplodedViewsResponses = {
    /**
     * default response
     */
    default: Array<BtViewFeatureBaseInfo>;
};

export type GetExplodedViewsResponse = GetExplodedViewsResponses[keyof GetExplodedViewsResponses];

export type GetFeaturesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        explodedViewId?: string;
        featureId?: Array<string>;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features';
};

export type GetFeaturesResponses = {
    /**
     * Success!
     */
    200: BtAssemblyFeatureListResponse1174;
};

export type GetFeaturesResponse = GetFeaturesResponses[keyof GetFeaturesResponses];

export type AddFeatureData = {
    body?: BtFeatureDefinitionCall1406Writable;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features';
};

export type AddFeatureResponses = {
    /**
     * default response
     */
    default: BtFeatureDefinitionResponse1617;
};

export type AddFeatureResponse = AddFeatureResponses[keyof AddFeatureResponses];

export type GetFeatureSpecsData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs';
};

export type GetFeatureSpecsResponses = {
    /**
     * default response
     */
    default: BtFeatureSpecsResponse664;
};

export type GetFeatureSpecsResponse = GetFeatureSpecsResponses[keyof GetFeatureSpecsResponses];

export type GetAssemblyMassPropertiesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties';
};

export type GetAssemblyMassPropertiesResponses = {
    /**
     * default response
     */
    default: BtMassPropertiesInfo;
};

export type GetAssemblyMassPropertiesResponse = GetAssemblyMassPropertiesResponses[keyof GetAssemblyMassPropertiesResponses];

export type GetNamedPositionsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        explodedViewId?: string;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/namedpositions';
};

export type GetNamedPositionsResponses = {
    /**
     * default response
     */
    default: Array<BtViewFeatureBaseInfo>;
};

export type GetNamedPositionsResponse = GetNamedPositionsResponses[keyof GetNamedPositionsResponses];

export type GetAssemblyShadedViewsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        explodedViewId?: string;
        viewMatrix?: string;
        outputHeight?: number;
        outputWidth?: number;
        pixelSize?: number;
        edges?: string;
        showAllParts?: boolean;
        includeSurfaces?: boolean;
        useAntiAliasing?: boolean;
        includeWires?: boolean;
        /**
         * Call the [getDisplayStates](#/Assembly/getDisplayStates) endpoint to get display state ID(s).
         */
        displayStateId?: string;
        namedPositionId?: string;
    };
    url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews';
};

export type GetAssemblyShadedViewsResponses = {
    /**
     * default response
     */
    default: BtShadedViewsInfo;
};

export type GetAssemblyShadedViewsResponse = GetAssemblyShadedViewsResponses[keyof GetAssemblyShadedViewsResponses];

export type CreateAssemblyExportGltfData = {
    body: BtbGltfExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/gltf';
};

export type CreateAssemblyExportGltfResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreateAssemblyExportGltfResponse = CreateAssemblyExportGltfResponses[keyof CreateAssemblyExportGltfResponses];

export type CreateAssemblyExportObjData = {
    body: BtbObjExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/obj';
};

export type CreateAssemblyExportObjResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreateAssemblyExportObjResponse = CreateAssemblyExportObjResponses[keyof CreateAssemblyExportObjResponses];

export type CreateAssemblyExportSolidworksData = {
    body: BtbSolidworksExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/solidworks';
};

export type CreateAssemblyExportSolidworksResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreateAssemblyExportSolidworksResponse = CreateAssemblyExportSolidworksResponses[keyof CreateAssemblyExportSolidworksResponses];

export type CreateAssemblyExportStepData = {
    body: BtbStepExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/step';
};

export type CreateAssemblyExportStepResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreateAssemblyExportStepResponse = CreateAssemblyExportStepResponses[keyof CreateAssemblyExportStepResponses];

export type GetMateValuesData = {
    body?: never;
    path: {
        did: string;
        wv: string;
        wvid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/matevalues';
};

export type GetMateValuesResponses = {
    /**
     * default response
     */
    default: BtAssemblyMateValuesInfo;
};

export type GetMateValuesResponse = GetMateValuesResponses[keyof GetMateValuesResponses];

export type TranslateFormatData = {
    body: BtTranslateFormatParams;
    path: {
        did: string;
        wv: string;
        wvid: string;
        eid: string;
    };
    query?: never;
    url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations';
};

export type TranslateFormatResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type TranslateFormatResponse = TranslateFormatResponses[keyof TranslateFormatResponses];

export type GetClientPlansData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/billing/plans/client/{cid}';
};

export type GetClientPlansResponses = {
    /**
     * Success!
     */
    200: unknown;
};

export type UploadFileCreateElementData = {
    body?: {
        /**
         * The file to upload.
         */
        file?: {
            [key: string]: unknown;
        };
        /**
         * If true, and a part doesn't pass Onshape validation, it will be imported with faults.
         */
        allowFaultyParts?: boolean;
        /**
         * Not supported for importing into a single part studio.
         */
        createComposite?: boolean;
        createDrawingIfPossible?: boolean;
        /**
         * If the filename contains non-ASCII characters. Use this field to store the filename.
         */
        encodedFilename?: string;
        extractAssemblyHierarchy?: boolean;
        /**
         * If the file is an assembly, or contains an assembly, setting this to True will import it as a Part Studio. In this case the assembly will be flattened to a set of parts in a Part Studio. There will be duplicate parts created whenever a part is instanced more than once. If False, it will be imported as an Assembly.
         */
        flattenAssemblies?: boolean;
        formatName?: string;
        joinAdjacentSurfaces?: boolean;
        locationElementId?: string;
        locationGroupId?: string;
        locationPosition?: number;
        notifyUser?: boolean;
        ownerId?: string;
        parentId?: string;
        projectId?: string;
        public?: boolean;
        onePartPerDoc?: boolean;
        splitAssembliesIntoMultipleDocuments?: boolean;
        storeInDocument?: boolean;
        translate?: boolean;
        unit?: string;
        uploadId?: string;
        versionString?: string;
        /**
         * Face appearances defined on models will be imported.
         */
        importAppearances?: boolean;
        /**
         * Material density defined on models will be imported.
         */
        importMaterialDensity?: boolean;
        /**
         * If the file was created in a system that orients with Y Axis Up, the models would by default be brought into Onshape (a Z Axis Up system) with a flipped coordinate system. Toggle this value to reorient the axis system to match Onshape and display the model with the coordinates you expect.
         */
        yAxisIsUp?: boolean;
        importWithinDocument?: boolean;
        /**
         * Try getting optimized topology from IGES model.
         */
        useIGESImportPostProcessing?: boolean;
        upgradeFeatureScriptVersion?: boolean;
        preserveSourceIds?: boolean;
        documentId?: string;
        versionId?: string;
        versionName?: string;
        versionDescription?: string;
        /**
         * Re-point the version references in APP elements to initial version in the new document
         */
        repointAppElementVersionRefs?: boolean;
    };
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/blobelements/d/{did}/w/{wid}';
};

export type UploadFileCreateElementResponses = {
    /**
     * default response
     */
    default: BtDocumentElementProcessingInfo;
};

export type UploadFileCreateElementResponse = UploadFileCreateElementResponses[keyof UploadFileCreateElementResponses];

export type DownloadFileWorkspaceData = {
    body?: never;
    headers?: {
        /**
         * Entity tag; an md5 checksum of the data in double quotes. If the data to download has the same checksum as this entity tag, a 304 'Not Modified' status will be returned. The entity tag is returned in the response headers as ETag.
         */
        'If-None-Match'?: string;
    };
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * If "attachment", includes a Content-Disposition return header with the filename.
         */
        contentDisposition?: string;
    };
    url: '/blobelements/d/{did}/w/{wid}/e/{eid}';
};

export type DownloadFileWorkspaceResponses = {
    /**
     * File download.
     */
    default: Blob | File;
};

export type DownloadFileWorkspaceResponse = DownloadFileWorkspaceResponses[keyof DownloadFileWorkspaceResponses];

export type UploadFileUpdateElementData = {
    body?: {
        /**
         * The file to upload.
         */
        file?: {
            [key: string]: unknown;
        };
        /**
         * If true, and a part doesn't pass Onshape validation, it will be imported with faults.
         */
        allowFaultyParts?: boolean;
        /**
         * Not supported for importing into a single part studio.
         */
        createComposite?: boolean;
        createDrawingIfPossible?: boolean;
        /**
         * If the filename contains non-ASCII characters. Use this field to store the filename.
         */
        encodedFilename?: string;
        extractAssemblyHierarchy?: boolean;
        /**
         * If the file is an assembly, or contains an assembly, setting this to True will import it as a Part Studio. In this case the assembly will be flattened to a set of parts in a Part Studio. There will be duplicate parts created whenever a part is instanced more than once. If False, it will be imported as an Assembly.
         */
        flattenAssemblies?: boolean;
        formatName?: string;
        joinAdjacentSurfaces?: boolean;
        locationElementId?: string;
        locationGroupId?: string;
        locationPosition?: number;
        notifyUser?: boolean;
        ownerId?: string;
        parentId?: string;
        projectId?: string;
        public?: boolean;
        onePartPerDoc?: boolean;
        splitAssembliesIntoMultipleDocuments?: boolean;
        storeInDocument?: boolean;
        translate?: boolean;
        unit?: string;
        uploadId?: string;
        versionString?: string;
        /**
         * Face appearances defined on models will be imported.
         */
        importAppearances?: boolean;
        /**
         * Material density defined on models will be imported.
         */
        importMaterialDensity?: boolean;
        /**
         * If the file was created in a system that orients with Y Axis Up, the models would by default be brought into Onshape (a Z Axis Up system) with a flipped coordinate system. Toggle this value to reorient the axis system to match Onshape and display the model with the coordinates you expect.
         */
        yAxisIsUp?: boolean;
        importWithinDocument?: boolean;
        /**
         * Try getting optimized topology from IGES model.
         */
        useIGESImportPostProcessing?: boolean;
        upgradeFeatureScriptVersion?: boolean;
        preserveSourceIds?: boolean;
        documentId?: string;
        versionId?: string;
        versionName?: string;
        versionDescription?: string;
        /**
         * Re-point the version references in APP elements to initial version in the new document
         */
        repointAppElementVersionRefs?: boolean;
    };
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
         */
        parentChangeId?: string;
    };
    url: '/blobelements/d/{did}/w/{wid}/e/{eid}';
};

export type UploadFileUpdateElementResponses = {
    /**
     * default response
     */
    default: BtDocumentElementProcessingInfo;
};

export type UploadFileUpdateElementResponse = UploadFileUpdateElementResponses[keyof UploadFileUpdateElementResponses];

export type UpdateUnitsData = {
    body: BtUpdateMeshUnitsParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/blobelements/d/{did}/w/{wid}/e/{eid}/units';
};

export type UpdateUnitsResponses = {
    /**
     * default response
     */
    default: BtDocumentElementProcessingInfo;
};

export type UpdateUnitsResponse = UpdateUnitsResponses[keyof UpdateUnitsResponses];

export type CreateBlobTranslationData = {
    body: BtTranslateFormatParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/blobelements/d/{did}/{wv}/{wvid}/e/{eid}/translations';
};

export type CreateBlobTranslationResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreateBlobTranslationResponse = CreateBlobTranslationResponses[keyof CreateBlobTranslationResponses];

export type GetCommentsData = {
    body?: never;
    path?: never;
    query?: {
        did?: string;
        objectType?: number;
        pid?: string;
        eid?: string;
        filter?: number;
        resolved?: boolean;
        sortColumn?: string;
        sortOrder?: string;
        offset?: number;
        limit?: number;
    };
    url: '/comments';
};

export type GetCommentsResponses = {
    /**
     * default response
     */
    default: BtListResponseBtCommentInfo;
};

export type GetCommentsResponse = GetCommentsResponses[keyof GetCommentsResponses];

export type CreateCommentData = {
    body: BtCommentParams;
    path?: never;
    query?: never;
    url: '/comments';
};

export type CreateCommentResponses = {
    /**
     * default response
     */
    default: BtCommentInfo;
};

export type CreateCommentResponse = CreateCommentResponses[keyof CreateCommentResponses];

export type DeleteCommentData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}';
};

export type DeleteCommentResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteCommentResponse = DeleteCommentResponses[keyof DeleteCommentResponses];

export type GetCommentData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}';
};

export type GetCommentResponses = {
    /**
     * default response
     */
    default: BtCommentInfo;
};

export type GetCommentResponse = GetCommentResponses[keyof GetCommentResponses];

export type UpdateCommentData = {
    body: BtCommentParams;
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}';
};

export type UpdateCommentResponses = {
    /**
     * default response
     */
    default: BtCommentInfo;
};

export type UpdateCommentResponse = UpdateCommentResponses[keyof UpdateCommentResponses];

export type DeleteAttachmentsData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}/attachment';
};

export type DeleteAttachmentsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteAttachmentsResponse = DeleteAttachmentsResponses[keyof DeleteAttachmentsResponses];

export type AddAttachmentData = {
    body?: {
        /**
         * The file to upload.
         */
        file: {
            [key: string]: unknown;
        };
        isMarkup: boolean;
    };
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}/attachment';
};

export type AddAttachmentResponses = {
    /**
     * default response
     */
    default: BtCommentInfo;
};

export type AddAttachmentResponse = AddAttachmentResponses[keyof AddAttachmentResponses];

export type GetAttachmentData = {
    body?: never;
    path: {
        cid: string;
        fdid: string;
        ext: string;
    };
    query?: never;
    url: '/comments/{cid}/attachment/{fdid}.{ext}';
};

export type GetAttachmentResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetAttachmentResponse = GetAttachmentResponses[keyof GetAttachmentResponses];

export type ReopenData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}/reopen';
};

export type ReopenResponses = {
    /**
     * default response
     */
    default: BtCommentInfo;
};

export type ReopenResponse = ReopenResponses[keyof ReopenResponses];

export type ResolveData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/comments/{cid}/resolve';
};

export type ResolveResponses = {
    /**
     * default response
     */
    default: BtCommentInfo;
};

export type ResolveResponse = ResolveResponses[keyof ResolveResponses];

export type FindCompanyData = {
    body?: never;
    path?: never;
    query?: {
        uid?: string;
        activeOnly?: boolean;
        includeAll?: boolean;
    };
    url: '/companies';
};

export type FindCompanyResponses = {
    /**
     * default response
     */
    default: BtListResponseBtCompanyInfo;
};

export type FindCompanyResponse = FindCompanyResponses[keyof FindCompanyResponses];

export type GetCompanyData = {
    body?: never;
    path: {
        cid: string;
    };
    query?: never;
    url: '/companies/{cid}';
};

export type GetCompanyResponses = {
    /**
     * default response
     */
    default: BtCompanyInfo;
};

export type GetCompanyResponse = GetCompanyResponses[keyof GetCompanyResponses];

export type GetDocumentsByNameData = {
    body?: never;
    path: {
        cid: string;
    };
    query: {
        name: string;
    };
    url: '/companies/{cid}/documentsbyname';
};

export type GetDocumentsByNameResponses = {
    /**
     * default response
     */
    default: Array<BtGlobalTreeNodeSummaryInfo>;
};

export type GetDocumentsByNameResponse = GetDocumentsByNameResponses[keyof GetDocumentsByNameResponses];

export type ClearGlobalPermissionsData = {
    body?: never;
    path: {
        /**
         * Company ID
         */
        cid: string;
        /**
         * `0`: USER | `1`: TEAM
         */
        type: number;
        /**
         * User ID or Team ID, depending on `type`
         */
        id: string;
    };
    query?: {
        /**
         * List of global permissions to grant. See [Onshape Help: Global Permissions](https://cad.onshape.com/help/Content/Plans/global_permissions.htm#Assignin) for details on each of the available permissions.
         * * `0`: Manage role based access control
         * * `1`: Manage users, teams, and aliases
         * * `2`: Enterprise administrator
         * * `3`: Permanently delete
         * * `4`: Analytics administrator
         * * `5`: Invite guest users
         * * `6`: Create projects
         * * `7`: Approve releases
         * * `8`: Enable link sharing
         * * `9`: Create releases
         * * `10`: Allow access to the App Store
         * * `11`: Create documents and folders in the Enterprise root
         * * `12`: Allow access to public documents
         * * `17`: Manage non-geometric items
         * * `18`: Manage workflows
         * * `19`: Transfer documents out of Enterprise
         * * `20`: Sync to Arena
         * * `21`: Create tasks
         * * `22`: Manage standard content metadata
         * * `23`: Workspace protection permissions
         * * `24`: Import files
         * * `25`: Use revision tools  * `26`: Export files
         *
         */
        permission?: Array<number>;
    };
    url: '/companies/{cid}/globalpermission/{type}/{id}';
};

export type ClearGlobalPermissionsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type ClearGlobalPermissionsResponse = ClearGlobalPermissionsResponses[keyof ClearGlobalPermissionsResponses];

export type AddGlobalPermissionsForIdentityData = {
    body: Array<number>;
    path: {
        /**
         * Company ID
         */
        cid: string;
        /**
         * `0`: USER | `1`: TEAM
         */
        type: number;
        /**
         * User ID or Team ID, depending on `type`
         */
        id: string;
    };
    query?: never;
    url: '/companies/{cid}/globalpermission/{type}/{id}';
};

export type AddGlobalPermissionsForIdentityResponses = {
    /**
     * default response
     */
    default: BtGlobalPermissionInfo;
};

export type AddGlobalPermissionsForIdentityResponse = AddGlobalPermissionsForIdentityResponses[keyof AddGlobalPermissionsForIdentityResponses];

export type AddUserToCompanyData = {
    body: BtCompanyUserParams;
    path: {
        cid: string;
    };
    query?: never;
    url: '/companies/{cid}/users';
};

export type AddUserToCompanyResponses = {
    /**
     * default response
     */
    default: BtCompanyUserInfo;
};

export type AddUserToCompanyResponse = AddUserToCompanyResponses[keyof AddUserToCompanyResponses];

export type RemoveUserFromCompanyData = {
    body?: never;
    path: {
        cid: string;
        uid: string;
    };
    query?: {
        removeFromTeams?: boolean;
        removeDirectShares?: boolean;
    };
    url: '/companies/{cid}/users/{uid}';
};

export type RemoveUserFromCompanyResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type RemoveUserFromCompanyResponse = RemoveUserFromCompanyResponses[keyof RemoveUserFromCompanyResponses];

export type UpdateCompanyUserData = {
    body: BtCompanyUserParams;
    path: {
        /**
         * Company ID
         */
        cid: string;
        /**
         * User ID
         */
        uid: string;
    };
    query?: never;
    url: '/companies/{cid}/users/{uid}';
};

export type UpdateCompanyUserResponses = {
    /**
     * default response
     */
    default: BtCompanyUserInfo;
};

export type UpdateCompanyUserResponse = UpdateCompanyUserResponses[keyof UpdateCompanyUserResponses];

export type GetDocumentsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search for documents that contain the given string in the name. Search is not case-sensitive.
         */
        q?: string;
        /**
         * Type of documents to search: `0: My Documents | 1: Created | 2: Shared | 3: Trash | 4: Public | 5: Recent | 6: By Owner | 7: By Company | 9: By Team`
         */
        filter?: number;
        /**
         * Owner ID. Can be a user ID, company ID, or team ID, depending on `ownerType`.
         */
        owner?: string;
        /**
         * Type of owner. `0: User | 1: Company | 2: Onshape`. If the owner is a teamId, leave this unspecified.
         */
        ownerType?: number;
        /**
         * Column by which to sort search results. `name | modifiedAt | createdAt (default) | email | modifiedBy | promotedAt`
         */
        sortColumn?: string;
        /**
         * Sort order. `desc` (descending, default), or `asc` (ascending).
         */
        sortOrder?: string;
        /**
         * Label
         */
        label?: string;
        /**
         * Project
         */
        project?: string;
        /**
         * Parent Id
         */
        parentId?: string;
        /**
         * Offset. Determines where search results begin. Default value is 0.
         */
        offset?: number;
        /**
         * Maximum number of results to return per page. Default value is 20 (also the maximum). Number of results returned can be less than this value. Use the `next` URL in the response to fetch the next page.
         */
        limit?: number;
    };
    url: '/documents';
};

export type GetDocumentsResponses = {
    /**
     * Success!
     */
    200: BtGlobalTreeNodeListResponse;
};

export type GetDocumentsResponse = GetDocumentsResponses[keyof GetDocumentsResponses];

export type CreateDocumentData = {
    body: BtDocumentParams;
    path?: never;
    query?: never;
    url: '/documents';
};

export type CreateDocumentResponses = {
    /**
     * default response
     */
    default: BtDocumentInfo;
};

export type CreateDocumentResponse = CreateDocumentResponses[keyof CreateDocumentResponses];

export type DownloadExternalDataData = {
    body?: never;
    headers?: {
        'If-None-Match'?: string;
    };
    path: {
        did: string;
        fid: string;
    };
    query?: never;
    url: '/documents/d/{did}/externaldata/{fid}';
};

export type DownloadExternalDataResponses = {
    /**
     * Success!
     */
    200: Blob | File;
};

export type DownloadExternalDataResponse = DownloadExternalDataResponses[keyof DownloadExternalDataResponses];

export type GetDocumentVersionsData = {
    body?: never;
    path: {
        did: string;
    };
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/documents/d/{did}/versions';
};

export type GetDocumentVersionsResponses = {
    /**
     * default response
     */
    default: Array<BtVersionInfo>;
};

export type GetDocumentVersionsResponse = GetDocumentVersionsResponses[keyof GetDocumentVersionsResponses];

export type CreateVersionData = {
    body: BtVersionOrWorkspaceParams;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/d/{did}/versions';
};

export type CreateVersionResponses = {
    /**
     * default response
     */
    default: BtVersionInfo;
};

export type CreateVersionResponse = CreateVersionResponses[keyof CreateVersionResponses];

export type GetVersionData = {
    body?: never;
    path: {
        did: string;
        vid: string;
    };
    query?: {
        parents?: boolean;
        linkDocumentId?: string;
    };
    url: '/documents/d/{did}/versions/{vid}';
};

export type GetVersionResponses = {
    /**
     * Success!
     */
    200: BtVersionInfo;
};

export type GetVersionResponse = GetVersionResponses[keyof GetVersionResponses];

export type UpdateExternalReferencesToLatestDocumentsData = {
    body?: BtLinkToLatestDocumentParams;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/documents/d/{did}/w/{wid}/e/{eid}/latestdocumentreferences';
};

export type UpdateExternalReferencesToLatestDocumentsResponses = {
    /**
     * Success!
     */
    200: BtLinkToLatestDocumentInfo;
};

export type UpdateExternalReferencesToLatestDocumentsResponse = UpdateExternalReferencesToLatestDocumentsResponses[keyof UpdateExternalReferencesToLatestDocumentsResponses];

export type MoveElementsToDocumentData = {
    body: BtMoveElementParams;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/documents/d/{did}/w/{wid}/moveelement';
};

export type MoveElementsToDocumentResponses = {
    /**
     * default response
     */
    default: BtMoveElementInfo;
};

export type MoveElementsToDocumentResponse = MoveElementsToDocumentResponses[keyof MoveElementsToDocumentResponses];

export type RevertUnchangedToRevisionsData = {
    body?: BtRevertUnchangedParams;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/documents/d/{did}/w/{wid}/revertunchangedtorevisions';
};

export type RevertUnchangedToRevisionsResponses = {
    /**
     * default response
     */
    default: Array<BtUnchangedElementInfo>;
};

export type RevertUnchangedToRevisionsResponse = RevertUnchangedToRevisionsResponses[keyof RevertUnchangedToRevisionsResponses];

export type SyncAppElementsData = {
    body: BtSyncAppElementParams;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/documents/d/{did}/w/{wid}/syncAppElements';
};

export type SyncAppElementsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SyncAppElementsResponse = SyncAppElementsResponses[keyof SyncAppElementsResponses];

export type GetDocumentWorkspacesData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/d/{did}/workspaces';
};

export type GetDocumentWorkspacesResponses = {
    /**
     * default response
     */
    default: Array<BtWorkspaceInfo>;
};

export type GetDocumentWorkspacesResponse = GetDocumentWorkspacesResponses[keyof GetDocumentWorkspacesResponses];

export type CreateWorkspaceData = {
    body?: BtVersionOrWorkspaceParams;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/d/{did}/workspaces';
};

export type CreateWorkspaceResponses = {
    /**
     * default response
     */
    default: BtWorkspaceInfo;
};

export type CreateWorkspaceResponse = CreateWorkspaceResponses[keyof CreateWorkspaceResponses];

export type DeleteWorkspaceData = {
    body?: never;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/documents/d/{did}/workspaces/{wid}';
};

export type DeleteWorkspaceResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteWorkspaceResponse = DeleteWorkspaceResponses[keyof DeleteWorkspaceResponses];

export type GetDocumentHistoryData = {
    body?: never;
    path: {
        did: string;
        wm: string;
        wmid: string;
    };
    query?: never;
    url: '/documents/d/{did}/{wm}/{wmid}/documenthistory';
};

export type GetDocumentHistoryResponses = {
    /**
     * default response
     */
    default: Array<BtDocumentHistoryInfo>;
};

export type GetDocumentHistoryResponse = GetDocumentHistoryResponses[keyof GetDocumentHistoryResponses];

export type GetDocumentContentsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * If specified, information for elements of this type are returned. Note, the folder structure is not affected by this filter.
         */
        elementType?: GbtElementType;
        /**
         * If specified, only the element with this id is returned. Note, the folder structure is not affected by this filter.
         */
        elementId?: string;
        /**
         * Returns the names of the files inside a zip file tab.
         */
        withZipContents?: boolean;
    };
    url: '/documents/d/{did}/{wvm}/{wvmid}/contents';
};

export type GetDocumentContentsResponses = {
    /**
     * default response
     */
    default: BtDocumentContentsInfo;
};

export type GetDocumentContentsResponse = GetDocumentContentsResponses[keyof GetDocumentContentsResponses];

export type GetElementsInDocumentData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        elementType?: string;
        elementId?: string;
        withThumbnails?: boolean;
        /**
         * Returns the names of the files inside a zip file tab.
         */
        withZipContents?: boolean;
    };
    url: '/documents/d/{did}/{wvm}/{wvmid}/elements';
};

export type GetElementsInDocumentResponses = {
    /**
     * Success!
     */
    200: Array<BtDocumentElementInfo>;
};

export type GetElementsInDocumentResponse = GetElementsInDocumentResponses[keyof GetElementsInDocumentResponses];

export type GetUnitInfoData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/documents/d/{did}/{wvm}/{wvmid}/unitinfo';
};

export type GetUnitInfoResponses = {
    /**
     * default response
     */
    default: BtUnitInfo;
};

export type GetUnitInfoResponse = GetUnitInfoResponses[keyof GetUnitInfoResponses];

export type GetCurrentMicroversionData = {
    body?: never;
    path: {
        did: string;
        wv: string;
        wvid: string;
    };
    query?: never;
    url: '/documents/d/{did}/{wv}/{wvid}/currentmicroversion';
};

export type GetCurrentMicroversionResponses = {
    /**
     * default response
     */
    default: BtMicroversionInfo;
};

export type GetCurrentMicroversionResponse = GetCurrentMicroversionResponses[keyof GetCurrentMicroversionResponses];

export type Export2JsonData = {
    body?: BtbExportModelParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/documents/d/{did}/{wv}/{wvid}/e/{eid}/export';
};

export type Export2JsonResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type Export2JsonResponse = Export2JsonResponses[keyof Export2JsonResponses];

export type GetInsertablesData = {
    body?: never;
    path: {
        did: string;
        wv: string;
        wvid: string;
    };
    query?: {
        elementId?: string;
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
        includeParts?: boolean;
        includeSurfaces?: boolean;
        includeSketches?: boolean;
        includeReferenceFeatures?: boolean;
        includeAssemblies?: boolean;
        includeFeatureStudios?: boolean;
        includeBlobs?: boolean;
        allowedBlobMimeTypes?: string;
        excludeNewerFSVersions?: boolean;
        maxFeatureScriptVersion?: number;
        includePartStudios?: boolean;
        includeFeatures?: boolean;
        includeMeshes?: boolean;
        includeWires?: boolean;
        includeFlattenedBodies?: boolean;
        includeApplications?: boolean;
        allowedApplicationMimeTypes?: string;
        includeCompositeParts?: boolean;
        includeFSTables?: boolean;
        includeFSComputedPartPropertyFunctions?: boolean;
        includeVariables?: boolean;
        includeVariableStudios?: boolean;
        allowedBlobExtensions?: string;
        isObsoletion?: boolean;
    };
    url: '/documents/d/{did}/{wv}/{wvid}/insertables';
};

export type GetInsertablesResponses = {
    /**
     * default response
     */
    default: BtInsertablesListResponse;
};

export type GetInsertablesResponse = GetInsertablesResponses[keyof GetInsertablesResponses];

export type SearchData = {
    body: BtDocumentSearchParams;
    path?: never;
    query?: never;
    url: '/documents/search';
};

export type SearchResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SearchResponse = SearchResponses[keyof SearchResponses];

export type DeleteDocumentData = {
    body?: never;
    path: {
        did: string;
    };
    query?: {
        forever?: boolean;
    };
    url: '/documents/{did}';
};

export type DeleteDocumentResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteDocumentResponse = DeleteDocumentResponses[keyof DeleteDocumentResponses];

export type GetDocumentData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}';
};

export type GetDocumentResponses = {
    /**
     * Success!
     */
    200: BtDocumentInfo;
};

export type GetDocumentResponse = GetDocumentResponses[keyof GetDocumentResponses];

export type UpdateDocumentAttributesData = {
    body: BtDocumentParams;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}';
};

export type UpdateDocumentAttributesResponses = {
    /**
     * default response
     */
    default: BtGlobalTreeNodeSummaryInfo;
};

export type UpdateDocumentAttributesResponse = UpdateDocumentAttributesResponses[keyof UpdateDocumentAttributesResponses];

export type GetDocumentAclData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}/acl';
};

export type GetDocumentAclResponses = {
    /**
     * default response
     */
    default: BtAclInfo;
};

export type GetDocumentAclResponse = GetDocumentAclResponses[keyof GetDocumentAclResponses];

export type UpdateAnonymousAccessData = {
    body: BtAclParams;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}/acl/anonymousAccess';
};

export type UpdateAnonymousAccessResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateAnonymousAccessResponse = UpdateAnonymousAccessResponses[keyof UpdateAnonymousAccessResponses];

export type UpdatePublicAccessData = {
    body?: BtAclParams;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}/acl/public';
};

export type UpdatePublicAccessResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdatePublicAccessResponse = UpdatePublicAccessResponses[keyof UpdatePublicAccessResponses];

export type GetDocumentPermissionSetData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}/permissionset';
};

export type GetDocumentPermissionSetResponses = {
    /**
     * Success!
     */
    200: Array<string>;
};

export type GetDocumentPermissionSetResponse = GetDocumentPermissionSetResponses[keyof GetDocumentPermissionSetResponses];

export type ShareDocumentData = {
    body: BtShareParams;
    path: {
        did: string;
    };
    query?: never;
    url: '/documents/{did}/share';
};

export type ShareDocumentResponses = {
    /**
     * default response
     */
    default: BtAclInfo;
};

export type ShareDocumentResponse = ShareDocumentResponses[keyof ShareDocumentResponses];

export type UnShareDocumentData = {
    body?: never;
    path: {
        /**
         * ID of the document to unshare.
         */
        did: string;
        /**
         * ID of the entity to remove permissions for. Uses `userId`, `companyId`, `teamId`, `documentId`, or `applicationId`, depending on the `entryType` value.
         */
        eid: string;
    };
    query?: {
        /**
         * `0` (user) | `1` (company) | `2` (team) | `3` (document) | `4` (application) | `5` (connection_user)
         */
        entryType?: number;
    };
    url: '/documents/{did}/share/{eid}';
};

export type UnShareDocumentResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UnShareDocumentResponse = UnShareDocumentResponses[keyof UnShareDocumentResponses];

export type UnshareFromSupportData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
    };
    query?: never;
    url: '/documents/{did}/shareWithSupport';
};

export type UnshareFromSupportResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UnshareFromSupportResponse = UnshareFromSupportResponses[keyof UnshareFromSupportResponses];

export type ShareWithSupportData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
    };
    query?: never;
    url: '/documents/{did}/shareWithSupport';
};

export type ShareWithSupportResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type ShareWithSupportResponse = ShareWithSupportResponses[keyof ShareWithSupportResponses];

export type MergePreviewData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
    };
    query: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        sourceType: string;
        sourceId: string;
    };
    url: '/documents/{did}/w/{wid}/mergePreview';
};

export type MergePreviewResponses = {
    /**
     * default response
     */
    default: BtMergePreviewInfo;
};

export type MergePreviewResponse = MergePreviewResponses[keyof MergePreviewResponses];

export type RestoreFromHistoryData = {
    body?: BtRestoreInfo;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        vm: string;
        vmid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/documents/{did}/w/{wid}/restore/{vm}/{vmid}';
};

export type RestoreFromHistoryResponses = {
    /**
     * default response
     */
    default: BtRestoreFromHistoryInfo;
};

export type RestoreFromHistoryResponse = RestoreFromHistoryResponses[keyof RestoreFromHistoryResponses];

export type CopyWorkspaceData = {
    body: BtCopyDocumentParams;
    path: {
        /**
         * ID of the document to copy.
         */
        did: string;
        /**
         * ID of the workspace to copy.
         */
        wid: string;
    };
    query?: never;
    url: '/documents/{did}/workspaces/{wid}/copy';
};

export type CopyWorkspaceResponses = {
    /**
     * Success!
     */
    200: BtCopyDocumentInfo;
};

export type CopyWorkspaceResponse = CopyWorkspaceResponses[keyof CopyWorkspaceResponses];

export type MergeIntoWorkspaceData = {
    body: BtVersionOrWorkspaceMergeInfo;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/documents/{did}/workspaces/{wid}/merge';
};

export type MergeIntoWorkspaceResponses = {
    /**
     * default response
     */
    default: BtDocumentMergeInfo;
};

export type MergeIntoWorkspaceResponse = MergeIntoWorkspaceResponses[keyof MergeIntoWorkspaceResponses];

export type CreateDrawingAppElementData = {
    body: BtDrawingParams;
    path: {
        /**
         * ID of the document in which to create the drawing.
         */
        did: string;
        /**
         * ID of the workspace in which to create the drawing.
         */
        wid: string;
    };
    query?: never;
    url: '/drawings/d/{did}/w/{wid}/create';
};

export type CreateDrawingAppElementResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type CreateDrawingAppElementResponse = CreateDrawingAppElementResponses[keyof CreateDrawingAppElementResponses];

export type ModifyDrawingData = {
    body: BtDrawingModificationParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/drawings/d/{did}/w/{wid}/e/{eid}/modify';
};

export type ModifyDrawingResponses = {
    /**
     * default response
     */
    default: BtAppModificationRequestInfo;
};

export type ModifyDrawingResponse = ModifyDrawingResponses[keyof ModifyDrawingResponses];

export type GetDrawingTranslatorFormatsData = {
    body?: never;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/drawings/d/{did}/w/{wid}/e/{eid}/translationformats';
};

export type GetDrawingTranslatorFormatsResponses = {
    /**
     * default response
     */
    default: Array<BtModelFormatInfo>;
};

export type GetDrawingTranslatorFormatsResponse = GetDrawingTranslatorFormatsResponses[keyof GetDrawingTranslatorFormatsResponses];

export type GetDrawingViews1Data = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
         */
        transactionId?: string;
        /**
         * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
         */
        changeId?: string;
    };
    url: '/drawings/d/{did}/{wvm}/{wvmid}/e/{eid}/views';
};

export type GetDrawingViews1Responses = {
    /**
     * default response
     */
    default: BtAppArrayInfoBtAppDrawingViewInfo;
};

export type GetDrawingViews1Response = GetDrawingViews1Responses[keyof GetDrawingViews1Responses];

export type GetDrawingViewJsonGeometry1Data = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        /**
         * The id of the view in which to perform the operation.
         */
        viewid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the transaction in which this operation should take place. Transaction ids can be generated through the AppElement startTransaction API.
         */
        transactionId?: string;
        /**
         * The id of the last change made to this application element. This can be retrieved from the response for any app element modification endpoint.
         */
        changeId?: string;
        /**
         * Scale for measurements.
         */
        scale?: number;
    };
    url: '/drawings/d/{did}/{wvm}/{wvmid}/e/{eid}/views/{viewid}/jsongeometry';
};

export type GetDrawingViewJsonGeometry1Responses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetDrawingViewJsonGeometry1Response = GetDrawingViewJsonGeometry1Responses[keyof GetDrawingViewJsonGeometry1Responses];

export type CreateDrawingTranslationData = {
    body: BtTranslateFormatParams;
    path: {
        did: string;
        wv: string;
        wvid: string;
        eid: string;
    };
    query?: never;
    url: '/drawings/d/{did}/{wv}/{wvid}/e/{eid}/translations';
};

export type CreateDrawingTranslationResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreateDrawingTranslationResponse = CreateDrawingTranslationResponses[keyof CreateDrawingTranslationResponses];

export type GetModificationStatusData = {
    body?: never;
    path: {
        mrid: string;
    };
    query?: never;
    url: '/drawings/modify/status/{mrid}';
};

export type GetModificationStatusResponses = {
    /**
     * default response
     */
    default: BtAppModificationRequestInfo;
};

export type GetModificationStatusResponse = GetModificationStatusResponses[keyof GetModificationStatusResponses];

export type CopyElementFromSourceDocumentData = {
    body: BtCopyElementParams;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/elements/copyelement/{did}/workspace/{wid}';
};

export type CopyElementFromSourceDocumentResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type CopyElementFromSourceDocumentResponse = CopyElementFromSourceDocumentResponses[keyof CopyElementFromSourceDocumentResponses];

export type EncodeConfigurationMapData = {
    body: BtConfigurationParams;
    path: {
        did: string;
        eid: string;
    };
    query?: {
        versionId?: string;
        linkDocumentId?: string;
    };
    url: '/elements/d/{did}/e/{eid}/configurationencodings';
};

export type EncodeConfigurationMapResponses = {
    /**
     * default response
     */
    default: BtEncodedConfigurationInfo;
};

export type EncodeConfigurationMapResponse = EncodeConfigurationMapResponses[keyof EncodeConfigurationMapResponses];

export type DeleteElementData = {
    body?: never;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/elements/d/{did}/w/{wid}/e/{eid}';
};

export type DeleteElementResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteElementResponse = DeleteElementResponses[keyof DeleteElementResponses];

export type UpdateReferencesData = {
    body: BtUpdateReferenceParams;
    path: {
        did: string;
        wid: string;
        eid: string;
    };
    query?: never;
    url: '/elements/d/{did}/w/{wid}/e/{eid}/updatereferences';
};

export type UpdateReferencesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateReferencesResponse = UpdateReferencesResponses[keyof UpdateReferencesResponses];

export type GetConfigurationData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration';
};

export type GetConfigurationResponses = {
    /**
     * default response
     */
    default: BtConfigurationResponse2019;
};

export type GetConfigurationResponse = GetConfigurationResponses[keyof GetConfigurationResponses];

export type UpdateConfigurationData = {
    body?: BtConfigurationUpdateCall2933Writable;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration';
};

export type UpdateConfigurationResponses = {
    /**
     * default response
     */
    default: BtConfigurationResponse2019;
};

export type UpdateConfigurationResponse = UpdateConfigurationResponses[keyof UpdateConfigurationResponses];

export type DecodeConfigurationData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        cid: string;
    };
    query?: {
        linkDocumentId?: string;
        includeDisplay?: boolean;
        configurationIsId?: boolean;
    };
    url: '/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configurationencodings/{cid}';
};

export type DecodeConfigurationResponses = {
    /**
     * default response
     */
    default: BtConfigurationInfo;
};

export type DecodeConfigurationResponse = DecodeConfigurationResponses[keyof DecodeConfigurationResponses];

export type GetElementTranslatorFormatsByVersionOrWorkspaceData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        checkContent?: boolean;
        configuration?: string;
    };
    url: '/elements/translatorFormats/{did}/{wv}/{wvid}/{eid}';
};

export type GetElementTranslatorFormatsByVersionOrWorkspaceResponses = {
    /**
     * default response
     */
    default: Array<BtModelFormatInfo>;
};

export type GetElementTranslatorFormatsByVersionOrWorkspaceResponse = GetElementTranslatorFormatsByVersionOrWorkspaceResponses[keyof GetElementTranslatorFormatsByVersionOrWorkspaceResponses];

export type GetValidRuleOptionsData = {
    body?: never;
    path: {
        /**
         * Indicates which of company (c) or user (u) id is specified below.
         */
        cu: 'c' | 'u';
        /**
         * The id of the company or user in which the operation should be performed.
         */
        cuid: string;
    };
    query?: never;
    url: '/exportrules/options/{cu}/{cuid}';
};

export type GetValidRuleOptionsResponses = {
    /**
     * default response
     */
    default: BtExportRuleValidOptionsInfo;
};

export type GetValidRuleOptionsResponse = GetValidRuleOptionsResponses[keyof GetValidRuleOptionsResponses];

export type CreateFeatureStudioData = {
    body: BtModelElementParams;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/featurestudios/d/{did}/w/{wid}';
};

export type CreateFeatureStudioResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type CreateFeatureStudioResponse = CreateFeatureStudioResponses[keyof CreateFeatureStudioResponses];

export type GetFeatureStudioContentsData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}';
};

export type GetFeatureStudioContentsResponses = {
    /**
     * default response
     */
    default: BtFeatureStudioContents2239;
};

export type GetFeatureStudioContentsResponse = GetFeatureStudioContentsResponses[keyof GetFeatureStudioContentsResponses];

export type UpdateFeatureStudioContentsData = {
    body?: BtFeatureStudioContents2239;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}';
};

export type UpdateFeatureStudioContentsResponses = {
    /**
     * default response
     */
    default: BtFeatureStudioContents2239;
};

export type UpdateFeatureStudioContentsResponse = UpdateFeatureStudioContentsResponses[keyof UpdateFeatureStudioContentsResponses];

export type GetFeatureStudioSpecsData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs';
};

export type GetFeatureStudioSpecsResponses = {
    /**
     * default response
     */
    default: BtFeatureSpecsResponse664;
};

export type GetFeatureStudioSpecsResponse = GetFeatureStudioSpecsResponses[keyof GetFeatureStudioSpecsResponses];

export type GetFolderAclData = {
    body?: never;
    path: {
        fid: string;
    };
    query?: never;
    url: '/folders/{fid}/acl';
};

export type GetFolderAclResponses = {
    /**
     * default response
     */
    default: BtAclInfo;
};

export type GetFolderAclResponse = GetFolderAclResponses[keyof GetFolderAclResponses];

export type ShareData = {
    body: BtShareParams;
    path: {
        fid: string;
    };
    query?: never;
    url: '/folders/{fid}/share';
};

export type ShareResponses = {
    /**
     * default response
     */
    default: BtAclInfo;
};

export type ShareResponse = ShareResponses[keyof ShareResponses];

export type UnShareData = {
    body?: never;
    path: {
        fid: string;
        eid: string;
    };
    query?: {
        entryType?: number;
    };
    url: '/folders/{fid}/share/{eid}';
};

export type UnShareResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UnShareResponse = UnShareResponses[keyof UnShareResponses];

export type GetLatestInDocumentData = {
    body?: never;
    path: {
        did: string;
    };
    query?: {
        includeParts?: boolean;
        includeSurfaces?: boolean;
        includeSketches?: boolean;
        includeReferenceFeatures?: boolean;
        includeAssemblies?: boolean;
        includeFeatureStudios?: boolean;
        includeBlobs?: boolean;
        allowedBlobMimeTypes?: string;
        excludeNewerFSVersions?: boolean;
        maxFeatureScriptVersion?: number;
        includePartStudios?: boolean;
        includeFeatures?: boolean;
        includeMeshes?: boolean;
        includeWires?: boolean;
        includeFlattenedBodies?: boolean;
        includeApplications?: boolean;
        allowedApplicationMimeTypes?: string;
        includeCompositeParts?: boolean;
        includeFSTables?: boolean;
        includeFSComputedPartPropertyFunctions?: boolean;
        includeVariables?: boolean;
        includeVariableStudios?: boolean;
        allowedBlobExtensions?: string;
        isObsoletion?: boolean;
    };
    url: '/insertables/d/{did}/latest';
};

export type GetLatestInDocumentResponses = {
    /**
     * default response
     */
    default: BtListResponseBtInsertableInfo;
};

export type GetLatestInDocumentResponse = GetLatestInDocumentResponses[keyof GetLatestInDocumentResponses];

export type GetItemsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID of any document owned by the company/classroom/enterprise.
         */
        documentId?: string;
        /**
         * Company/classroom/enterprise ID.
         */
        companyId?: string;
        /**
         * Optional search string.
         */
        q?: string;
        /**
         * Refine returned items by publish states: `0: PENDING | 1: ACTIVE | 2: INACTIVE`
         */
        publishStates?: string;
        /**
         * Refine returned items by classification. Classifications are managed in company/classroom/enterprise [Properties settings](https://cad.onshape.com/help/Content/Plans/items.htm#item-class).
         */
        classification?: string;
        /**
         * Number of entries to skip in the returned list.
         */
        offset?: number;
        /**
         * The number of list entries to return in a single API call.
         */
        limit?: number;
    };
    url: '/items';
};

export type GetItemsResponses = {
    /**
     * default response
     */
    default: BtListResponseBtItemInfo;
};

export type GetItemsResponse = GetItemsResponses[keyof GetItemsResponses];

export type CreateItemData = {
    body: BtItemParams;
    path?: never;
    query?: never;
    url: '/items';
};

export type CreateItemResponses = {
    /**
     * default response
     */
    default: BtItemInfo;
};

export type CreateItemResponse = CreateItemResponses[keyof CreateItemResponses];

export type DeleteItemData = {
    body?: never;
    path: {
        /**
         * ID of the item to delete.
         */
        iid: string;
    };
    query?: never;
    url: '/items/{iid}';
};

export type DeleteItemResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteItemResponse = DeleteItemResponses[keyof DeleteItemResponses];

export type GetItemData = {
    body?: never;
    path: {
        /**
         * Item ID.
         */
        iid: string;
    };
    query?: {
        /**
         * ID of any document owned by the company/classroom/enterprise.
         */
        documentId?: string;
        /**
         * Company/classroom/enterprise ID.
         */
        companyId?: string;
    };
    url: '/items/{iid}';
};

export type GetItemResponses = {
    /**
     * default response
     */
    default: BtItemInfo;
};

export type GetItemResponse = GetItemResponses[keyof GetItemResponses];

export type UpdateItemData = {
    body: BtItemParams;
    path: {
        /**
         * ID of the item to update.
         */
        iid: string;
    };
    query?: never;
    url: '/items/{iid}';
};

export type UpdateItemResponses = {
    /**
     * default response
     */
    default: BtItemInfo;
};

export type UpdateItemResponse = UpdateItemResponses[keyof UpdateItemResponses];

export type GetWmvesMetadataData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
    };
    query?: {
        linkDocumentId?: string;
        inferMetadataOwner?: boolean;
        depth?: string;
        includeComputedProperties?: boolean;
        includeComputedAssemblyProperties?: boolean;
        thumbnail?: boolean;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e';
};

export type GetWmvesMetadataResponses = {
    /**
     * default response
     */
    default: BtMetadataObjectListInfoBtMetadataElementInfo;
};

export type GetWmvesMetadataResponse = GetWmvesMetadataResponses[keyof GetWmvesMetadataResponses];

export type GetWmveMetadataData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        configuration?: string;
        inferMetadataOwner?: boolean;
        depth?: string;
        includeComputedProperties?: boolean;
        includeComputedAssemblyProperties?: boolean;
        thumbnail?: boolean;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}';
};

export type GetWmveMetadataResponses = {
    /**
     * default response
     */
    default: BtMetadataObjectInfo;
};

export type GetWmveMetadataResponse = GetWmveMetadataResponses[keyof GetWmveMetadataResponses];

export type UpdateWveMetadataData = {
    body: string;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: {
        configuration?: string;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}';
};

export type UpdateWveMetadataResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateWveMetadataResponse = UpdateWveMetadataResponses[keyof UpdateWveMetadataResponses];

export type GetFullAssemblyMetadataData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        configuration?: string;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/assembly-debug';
};

export type GetFullAssemblyMetadataResponses = {
    /**
     * default response
     */
    default: BtAssemblyItemMetadataInfo;
};

export type GetFullAssemblyMetadataResponse = GetFullAssemblyMetadataResponses[keyof GetFullAssemblyMetadataResponses];

export type GetWmvepsMetadataData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        inferMetadataOwner?: boolean;
        includeComputedProperties?: boolean;
        includeComputedAssemblyProperties?: boolean;
        thumbnail?: boolean;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p';
};

export type GetWmvepsMetadataResponses = {
    /**
     * default response
     */
    default: BtMetadataObjectListInfoBtMetadataPartInfo;
};

export type GetWmvepsMetadataResponse = GetWmvepsMetadataResponses[keyof GetWmvepsMetadataResponses];

export type GetWmvepMetadataData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        /**
         * Denotes whether the pid specified is a part id (p) or a part identity (pi).
         */
        iden: 'p' | 'pi';
        pid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        inferMetadataOwner?: boolean;
        includeComputedProperties?: boolean;
        includeComputedAssemblyProperties?: boolean;
        thumbnail?: boolean;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}';
};

export type GetWmvepMetadataResponses = {
    /**
     * default response
     */
    default: BtMetadataObjectInfo;
};

export type GetWmvepMetadataResponse = GetWmvepMetadataResponses[keyof GetWmvepMetadataResponses];

export type UpdateWvepMetadataData = {
    body: string;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        /**
         * Denotes whether the pid specified is a part id (p) or a part identity (pi).
         */
        iden: 'p' | 'pi';
        pid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
    };
    url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}';
};

export type UpdateWvepMetadataResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateWvepMetadataResponse = UpdateWvepMetadataResponses[keyof UpdateWvepMetadataResponses];

export type GetWvMetadataData = {
    body?: never;
    path: {
        did: string;
        wv: string;
        wvid: string;
    };
    query?: {
        linkDocumentId?: string;
        inferMetadataOwner?: boolean;
        depth?: string;
        includeComputedProperties?: boolean;
        includeComputedAssemblyProperties?: boolean;
        thumbnail?: boolean;
    };
    url: '/metadata/d/{did}/{wv}/{wvid}';
};

export type GetWvMetadataResponses = {
    /**
     * default response
     */
    default: BtMetadataObjectInfo;
};

export type GetWvMetadataResponse = GetWvMetadataResponses[keyof GetWvMetadataResponses];

export type UpdateWvMetadataData = {
    body: string;
    path: {
        did: string;
        wv: string;
        wvid: string;
    };
    query?: never;
    url: '/metadata/d/{did}/{wv}/{wvid}';
};

export type UpdateWvMetadataResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateWvMetadataResponse = UpdateWvMetadataResponses[keyof UpdateWvMetadataResponses];

export type UpdateVeopStandardContentPartMetadataData = {
    body: string;
    path: {
        did: string;
    };
    query: {
        linkDocumentId: string;
    };
    url: '/metadata/standardcontent/d/{did}';
};

export type UpdateVeopStandardContentPartMetadataResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdateVeopStandardContentPartMetadataResponse = UpdateVeopStandardContentPartMetadataResponses[keyof UpdateVeopStandardContentPartMetadataResponses];

export type GetVeopStandardContentMetadataData = {
    body?: never;
    path: {
        did: string;
        vid: string;
        eid: string;
        pid: string;
    };
    query?: {
        configuration?: string;
        linkDocumentId?: string;
        includeComputedProperties?: boolean;
        includeComputedAssemblyProperties?: boolean;
        thumbnail?: boolean;
    };
    url: '/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/p/{pid}';
};

export type GetVeopStandardContentMetadataResponses = {
    /**
     * default response
     */
    default: BtMetadataObjectInfo;
};

export type GetVeopStandardContentMetadataResponse = GetVeopStandardContentMetadataResponses[keyof GetVeopStandardContentMetadataResponses];

export type GetCategoryPropertiesData = {
    body?: never;
    path?: never;
    query?: {
        ownerId?: string;
        ownerType?: number;
        documentId?: string;
        categoryIds?: Array<string>;
        objectType?: number;
        strict?: boolean;
        includeObjectTypeDefaults?: boolean;
        includeComputedProperties?: boolean;
        includePartPropertiesTableOnlyProperties?: boolean;
        onlyActive?: boolean;
        onlyObjectTypeDefaults?: boolean;
    };
    url: '/metadatacategory/categoryproperties';
};

export type GetCategoryPropertiesResponses = {
    /**
     * default response
     */
    default: BtListResponseBtCategoryPropertyInfo;
};

export type GetCategoryPropertiesResponse = GetCategoryPropertiesResponses[keyof GetCategoryPropertiesResponses];

export type NextNumbersData = {
    body: BtNextPartNumbersParam;
    path?: never;
    query?: {
        cid?: string;
        did?: string;
    };
    url: '/numberingscheme/nextnumbers';
};

export type NextNumbersResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: Array<BtNextPartNumber>;
    };
};

export type NextNumbersResponse = NextNumbersResponses[keyof NextNumbersResponses];

export type GetOpenApiData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Force reload the OpenApi definition. Only works when asking for the latest version.
         */
        forceReload?: boolean;
        /**
         * Specify a version of Onshape from which the OpenAPI is generated. If '*' is specified in any of the version fields, that indicates any version if acceptable.
         */
        version?: string;
        /**
         * Version aliases based on the currently released version.
         */
        versionAlias?: VersionAlias;
        /**
         * Do not filter the specification at all.
         */
        noFilter?: boolean;
        /**
         * Return only operations with tags included in includedTags.
         */
        includedTags?: Array<string>;
        /**
         * If an operation contains an excluded tag, it is not returned from this endpoint.
         */
        excludedTags?: Array<string>;
        /**
         * Include deprecated endpoints.
         */
        includeDeprecated?: boolean;
        /**
         * Only include deprecated endpoints.
         */
        onlyDeprecated?: boolean;
        /**
         * Only return endpoints that have the specified documentation status. Default is to return all the endpoints the user should have access to.
         */
        documentationStatuses?: Array<Status>;
        /**
         * The REST user role for which this spec is requested.
         */
        restUserRole?: BtRestUserRole;
        /**
         * Only return operations with specified ids.
         */
        operationIds?: Array<string>;
        /**
         * Do not return operations with specified ids.
         */
        excludedOperationIds?: Array<string>;
    };
    url: '/openapi';
};

export type GetOpenApiResponses = {
    /**
     * default response
     */
    default: OpenApi;
};

export type GetOpenApiResponse = GetOpenApiResponses[keyof GetOpenApiResponses];

export type GetTagsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi/tags';
};

export type GetTagsResponses = {
    /**
     * default response
     */
    default: Array<Tag>;
};

export type GetTagsResponse = GetTagsResponses[keyof GetTagsResponses];

export type UpdateNextNumbersData = {
    body: BtNextPartNumbersParam;
    path?: never;
    query?: {
        /**
         * The ID of the company or enterprise that owns this resource and/or is making the request to Onshape.
         */
        cid?: string;
        /**
         * Document ID.
         */
        did?: string;
    };
    url: '/partnumber/nextnumbers';
};

export type UpdateNextNumbersResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: Array<BtNextPartNumber>;
    };
};

export type UpdateNextNumbersResponse = UpdateNextNumbersResponses[keyof UpdateNextNumbersResponses];

export type GetPartsWmvData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
    };
    query: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * The id of the element in which to perform the operation.
         */
        elementId: string;
        configuration?: string;
        /**
         * Whether or not to include thumbnails (not supported for microversion)
         */
        withThumbnails?: boolean;
        /**
         * If true, include metadata schema property defaults in response
         */
        includePropertyDefaults?: boolean;
        includeFlatParts?: boolean;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}';
};

export type GetPartsWmvResponses = {
    /**
     * default response
     */
    default: Array<BtPartMetadataInfo>;
};

export type GetPartsWmvResponse = GetPartsWmvResponses[keyof GetPartsWmvResponses];

export type GetPartsWmveData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: {
        /**
         * Whether or not to include thumbnails (not supported for microversion)
         */
        withThumbnails?: boolean;
        /**
         * If true, include metadata schema property defaults in response
         */
        includePropertyDefaults?: boolean;
        includeFlatParts?: boolean;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}';
};

export type GetPartsWmveResponses = {
    /**
     * default response
     */
    default: Array<BtPartMetadataInfo>;
};

export type GetPartsWmveResponse = GetPartsWmveResponses[keyof GetPartsWmveResponses];

export type GetBodyDetailsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        partid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        /**
         * Whether or not geometric data should be included in the response.
         */
        includeGeometricData?: boolean;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/bodydetails';
};

export type GetBodyDetailsResponses = {
    /**
     * default response
     */
    default: BtExportModelBodiesResponse734;
};

export type GetBodyDetailsResponse = GetBodyDetailsResponses[keyof GetBodyDetailsResponses];

export type GetBoundingBoxesData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        partid: string;
    };
    query?: {
        includeHidden?: boolean;
        configuration?: string;
        linkDocumentId?: string;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/boundingboxes';
};

export type GetBoundingBoxesResponses = {
    /**
     * default response
     */
    default: BtBoundingBoxInfo;
};

export type GetBoundingBoxesResponse = GetBoundingBoxesResponses[keyof GetBoundingBoxesResponses];

export type ExportPartGltfData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        partid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        angleTolerance?: number;
        chordTolerance?: number;
        precomputedLevelOfDetail?: string;
        outputSeparateFaceNodes?: boolean;
        faceId?: Array<string>;
        outputFaceAppearances?: boolean;
        maxFacetWidth?: number;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/gltf';
};

export type ExportPartGltfResponses = {
    /**
     * Success!
     */
    200: GlTf;
};

export type ExportPartGltfResponse = ExportPartGltfResponses[keyof ExportPartGltfResponses];

export type GetMassPropertiesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        partid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        inferMetadataOwner?: boolean;
        /**
         * If true, use the user mass property overrides when calculated mass properties
         */
        useMassPropertyOverrides?: boolean;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/massproperties';
};

export type GetMassPropertiesResponses = {
    /**
     * default response
     */
    default: BtMassPropertiesBulkInfo;
};

export type GetMassPropertiesResponse = GetMassPropertiesResponses[keyof GetMassPropertiesResponses];

export type ExportPsData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        partid: string;
    };
    query?: {
        version?: string;
        configuration?: string;
        linkDocumentId?: string;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/parasolid';
};

export type GetPartShadedViewsData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        partid: string;
    };
    query?: {
        viewMatrix?: string;
        outputHeight?: number;
        outputWidth?: number;
        pixelSize?: number;
        edges?: string;
        useAntiAliasing?: boolean;
        configuration?: string;
        linkDocumentId?: string;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/shadedviews';
};

export type GetPartShadedViewsResponses = {
    /**
     * default response
     */
    default: BtShadedViewsInfo;
};

export type GetPartShadedViewsResponse = GetPartShadedViewsResponses[keyof GetPartShadedViewsResponses];

export type GetBendTableData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        partid: string;
    };
    query?: {
        linkDocumentId?: string;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/sheetmetal/bendtable';
};

export type GetBendTableResponses = {
    /**
     * default response
     */
    default: BtTableResponse1546;
};

export type GetBendTableResponse = GetBendTableResponses[keyof GetBendTableResponses];

export type ExportStlData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        partid: string;
    };
    query?: {
        mode?: string;
        grouping?: boolean;
        scale?: number;
        units?: string;
        angleTolerance?: number;
        chordTolerance?: number;
        maxFacetWidth?: number;
        minFacetWidth?: number;
        configuration?: string;
        linkDocumentId?: string;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/stl';
};

export type ExportStlResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type ExportStlResponse = ExportStlResponses[keyof ExportStlResponses];

export type GetEdgesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        partid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        angleTolerance?: number;
        chordTolerance?: number;
        precomputedLevelOfDetail?: string;
        edgeId?: Array<string>;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatededges';
};

export type GetEdgesResponses = {
    /**
     * default response
     */
    default: BtExportTessellatedEdgesResponse327;
};

export type GetEdgesResponse = GetEdgesResponses[keyof GetEdgesResponses];

export type GetFaces1Data = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        partid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        angleTolerance?: number;
        chordTolerance?: number;
        precomputedLevelOfDetail?: string;
        faceId?: Array<string>;
        outputFaceAppearances?: boolean;
        maxFacetWidth?: number;
        outputVertexNormals?: boolean;
        outputFacetNormals?: boolean;
        outputTextureCoordinates?: boolean;
        outputIndexTable?: boolean;
        outputErrorFaces?: boolean;
        combineCompositePartConstituents?: boolean;
    };
    url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatedfaces';
};

export type GetFaces1Responses = {
    /**
     * default response
     */
    default: BtExportTessellatedFacesResponse898;
};

export type GetFaces1Response = GetFaces1Responses[keyof GetFaces1Responses];

export type GetPartStudioNamedViewsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        skipPerspective?: boolean;
        includeSectionCutViews?: boolean;
    };
    url: '/partstudios/d/{did}/e/{eid}/namedViews';
};

export type GetPartStudioNamedViewsResponses = {
    /**
     * default response
     */
    default: BtNamedViewsInfo;
};

export type GetPartStudioNamedViewsResponse = GetPartStudioNamedViewsResponses[keyof GetPartStudioNamedViewsResponses];

export type CreatePartStudioData = {
    body: BtModelElementParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * Workspace ID.
         */
        wid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/w/{wid}';
};

export type CreatePartStudioResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type CreatePartStudioResponse = CreatePartStudioResponses[keyof CreatePartStudioResponses];

export type DeletePartStudioFeatureData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * Workspace ID.
         */
        wid: string;
        /**
         * Element ID.
         */
        eid: string;
        /**
         * The id of the feature being updated. This id should be URL encoded and must match the featureId found in the serialized structure
         */
        fid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}';
};

export type DeletePartStudioFeatureResponses = {
    /**
     * default response
     */
    default: BtFeatureApiBase1430;
};

export type DeletePartStudioFeatureResponse = DeletePartStudioFeatureResponses[keyof DeletePartStudioFeatureResponses];

export type UpdatePartStudioFeatureData = {
    /**
     * feature The serialized feature definition
     */
    body?: BtFeatureDefinitionCall1406Writable;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * Workspace ID.
         */
        wid: string;
        /**
         * Element ID.
         */
        eid: string;
        /**
         * The id of the feature being updated. This id should be URL encoded and must match the featureId found in the serialized structure
         */
        fid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}';
};

export type UpdatePartStudioFeatureResponses = {
    /**
     * default response
     */
    default: BtFeatureDefinitionResponse1617;
};

export type UpdatePartStudioFeatureResponse = UpdatePartStudioFeatureResponses[keyof UpdatePartStudioFeatureResponses];

export type UpdateRollbackData = {
    /**
     * The index at which the rollback index should be placed. Features
     * with entry index (0-based) higher than or equal to the value are rolled back. Value of -1 is treated
     * as an alias for "end of feature list". Otherwise the value must be in the range 0 to the number of
     * entries in the feature list
     */
    body: string;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * Workspace ID.
         */
        wid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback';
};

export type UpdateRollbackResponses = {
    /**
     * default response
     */
    default: BtSetFeatureRollbackResponse1042;
};

export type UpdateRollbackResponse = UpdateRollbackResponses[keyof UpdateRollbackResponses];

export type UpdateFeaturesData = {
    /**
     * feature The serialized feature definition
     */
    body?: BtUpdateFeaturesCall1748Writable;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * Workspace ID.
         */
        wid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates';
};

export type UpdateFeaturesResponses = {
    /**
     * default response
     */
    default: BtUpdateFeaturesResponse1333;
};

export type UpdateFeaturesResponse = UpdateFeaturesResponses[keyof UpdateFeaturesResponses];

export type GetPartStudioBodyDetailsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        /**
         * If specified, the response will only include body details for the specific parts as indicated here by their corresponding Id
         */
        partIds?: Array<string>;
        /**
         * Whether or not surfaces should be included in the response.
         */
        includeSurfaces?: boolean;
        /**
         * Whether or not composite parts should be included in the response.
         */
        includeCompositeParts?: boolean;
        /**
         * Whether or not geometric data should be included in the response.
         */
        includeGeometricData?: boolean;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/bodydetails';
};

export type GetPartStudioBodyDetailsResponses = {
    /**
     * default response
     */
    default: BtExportModelBodiesResponse734;
};

export type GetPartStudioBodyDetailsResponse = GetPartStudioBodyDetailsResponses[keyof GetPartStudioBodyDetailsResponses];

export type GetPartStudioBoundingBoxesData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: {
        /**
         * Whether or not to include bounding boxes for hidden parts.
         */
        includeHidden?: boolean;
        /**
         * Whether to include wire bodies in the bounding box.
         */
        includeWireBodies?: boolean;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes';
};

export type GetPartStudioBoundingBoxesResponses = {
    /**
     * default response
     */
    default: BtBoundingBoxInfo;
};

export type GetPartStudioBoundingBoxesResponse = GetPartStudioBoundingBoxesResponses[keyof GetPartStudioBoundingBoxesResponses];

export type ComparePartStudiosData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: {
        workspaceId?: string;
        versionId?: string;
        microversionId?: string;
        sourceConfiguration?: string;
        targetConfiguration?: string;
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/compare';
};

export type ComparePartStudiosResponses = {
    /**
     * default response
     */
    default: BtRootDiffInfo;
};

export type ComparePartStudiosResponse = ComparePartStudiosResponses[keyof ComparePartStudiosResponses];

export type GetPartStudioFeaturesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        /**
         * If true, include the underlying geometry IDs in the feature definition.
         */
        includeGeometryIds?: boolean;
        /**
         * ID of a feature; repeat query param to add more than one
         */
        featureId?: Array<string>;
        /**
         * Whether or not to output simple sketch info without geometry
         */
        noSketchGeometry?: boolean;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features';
};

export type GetPartStudioFeaturesResponses = {
    /**
     * default response
     */
    default: BtFeatureListResponse2457;
};

export type GetPartStudioFeaturesResponse = GetPartStudioFeaturesResponses[keyof GetPartStudioFeaturesResponses];

export type AddPartStudioFeatureData = {
    body?: BtFeatureDefinitionCall1406Writable;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features';
};

export type AddPartStudioFeatureResponses = {
    /**
     * default response
     */
    default: BtFeatureDefinitionResponse1617;
};

export type AddPartStudioFeatureResponse = AddPartStudioFeatureResponses[keyof AddPartStudioFeatureResponses];

export type EvalFeatureScriptData = {
    body?: BtFeatureScriptEvalCall2377;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescript';
};

export type EvalFeatureScriptResponses = {
    /**
     * default response
     */
    default: BtFeatureScriptEvalResponse1859;
};

export type EvalFeatureScriptResponse = EvalFeatureScriptResponses[keyof EvalFeatureScriptResponses];

export type GetFeatureScriptRepresentationData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescriptrepresentation';
};

export type GetFeatureScriptRepresentationResponses = {
    /**
     * default response
     */
    default: BtpModule234;
};

export type GetFeatureScriptRepresentationResponse = GetFeatureScriptRepresentationResponses[keyof GetFeatureScriptRepresentationResponses];

export type GetPartStudioFeatureSpecsData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs';
};

export type GetPartStudioFeatureSpecsResponses = {
    /**
     * default response
     */
    default: BtFeatureSpecsResponse664;
};

export type GetPartStudioFeatureSpecsResponse = GetPartStudioFeatureSpecsResponses[keyof GetPartStudioFeatureSpecsResponses];

export type GetFeatureScriptTableData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query: {
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Namespace of the custom table in FS. Must be in the form of:
         * * `e{eid}::m{mid}` if the FS and PS tabs are in the same workspace.
         * * `d{did}::v{vid}::e{eid}::m{mid}` if the tabs are in different workspaces.
         *
         * Obtain the microversion id (`{mid}`) with [this endpoint](#/Document/getElementsInDocument) called on the FS tab.
         *
         * Leave blank if using a standard table. Required if using a custom `tableType`.
         */
        tableNamespace?: string;
        /**
         * May be any standard table type (i.e., `holeTable` or `cutlistTable`) or custom table type name defined in FeatureScript.
         *
         * If using a custom table type, `tableNamespace` must also be specified.
         */
        tableType: string;
        /**
         * Include all parameters for the table. i.e., `customBool=false`
         */
        tableParameters?: string;
        /**
         * ID of the part to retrieve.
         */
        partId?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/fstable';
};

export type GetFeatureScriptTableResponses = {
    /**
     * default response
     */
    default: BtApiTableList1223;
};

export type GetFeatureScriptTableResponse = GetFeatureScriptTableResponses[keyof GetFeatureScriptTableResponses];

export type ExportPartStudioGltfData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        partId?: Array<string>;
        angleTolerance?: number;
        chordTolerance?: number;
        precomputedLevelOfDetail?: string;
        outputSeparateFaceNodes?: boolean;
        faceId?: Array<string>;
        outputFaceAppearances?: boolean;
        maxFacetWidth?: number;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/gltf';
};

export type ExportPartStudioGltfResponses = {
    /**
     * Success!
     */
    200: GlTf;
};

export type ExportPartStudioGltfResponse = ExportPartStudioGltfResponses[keyof ExportPartStudioGltfResponses];

export type TranslateIdsData = {
    body: BtIdTranslationParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/idtranslations';
};

export type TranslateIdsResponses = {
    /**
     * default response
     */
    default: BtIdTranslationInfo;
};

export type TranslateIdsResponse = TranslateIdsResponses[keyof TranslateIdsResponses];

export type GetPartStudioMassPropertiesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        partId?: Array<string>;
        /**
         * If true, specified parts will be evaluated as a single object instead of individually
         */
        massAsGroup?: boolean;
        /**
         * If true, use the user mass property overrides when calculated mass properties
         */
        useMassPropertyOverrides?: boolean;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties';
};

export type GetPartStudioMassPropertiesResponses = {
    /**
     * default response
     */
    default: BtMassPropertiesBulkInfo;
};

export type GetPartStudioMassPropertiesResponse = GetPartStudioMassPropertiesResponses[keyof GetPartStudioMassPropertiesResponses];

export type ExportParasolidData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: {
        /**
         * IDs of the parts to retrieve. Use comma-separated IDs for multiple parts (example: partIds=JHK,JHD).
         */
        partIds?: string;
        /**
         * Parasolid version
         */
        version?: string;
        /**
         * Whether topology ids should be exported as parasolid attributes
         */
        includeExportIds?: boolean;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
        /**
         * Whether to use binary parasolid format instead of text
         */
        binaryExport?: boolean;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/parasolid';
};

export type GetPartStudioShadedViewsData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: {
        /**
         * 12-number view matrix (comma-separated), or one of the following named views:
         * top, bottom, front, back, left, right
         * The 12 entries in the view matrix form three rows and four columns, which is a linear transformation applied to the model itself.
         * The matrix's first three columns maps the coordinate axes of the model to the coordinate axes of the view, and the fourth column translates the origin (in meters).
         * The view coordinates have x pointing right, y pointing up, and z pointing towards the viewer, while a front view of the model has x pointing right, y pointing away from the viewer, and z pointing up.
         * For example, the identity matrix viewMatrix=1,0,0,0,0,1,0,0,0,0,1,0 corresponds to the top view, and viewMatrix=0.612,0.612,0,0,-0.354,0.354,0.707,0,0.707,-0.707,0.707,0 corresponds (approximately) to the isometric view.
         * The first three columns of the view matrix should be orthonormal and have a positive determinant.  If this is not the case, view behavior may be undefined.
         */
        viewMatrix?: string;
        /**
         * Output image height (in pixels)
         */
        outputHeight?: number;
        /**
         * Output image width (in pixels)
         */
        outputWidth?: number;
        /**
         * Height and width represented by each pixel (in meters). If the value is 0, the display will be sized to fit the output image dimensions.
         */
        pixelSize?: number;
        /**
         * The treatment to be applied to edges in the display. Options are show: show visible edges, hide: hide visible edges.
         */
        edges?: string;
        /**
         * Whether or not all parts should be shown in the element,
         * regardless of user setting. If false, the visibility setting made by the user will be reflected in the
         * image. If true, all parts will be shown.
         */
        showAllParts?: boolean;
        /**
         * Whether or not surfaces should be shown in the element.
         * It is applicable only when showAllParts is true. If false, surfaces will be excluded.
         * If true, all surfaces will be shown.
         */
        includeSurfaces?: boolean;
        /**
         * If true, an anti-aliasing factor will be used to smooth
         * model boundaries in the final image result. If false, the image will be rasterized at the given
         * resolution. Setting to true can have negative performance implications with respect to rendering time
         * and memory usage. If a high-resolution image is requested and anti-aliasing is turned on, the server
         * may not be able to fulfill the request.
         */
        useAntiAliasing?: boolean;
        includeWires?: boolean;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews';
};

export type GetPartStudioShadedViewsResponses = {
    /**
     * default response
     */
    default: BtShadedViewsInfo;
};

export type GetPartStudioShadedViewsResponse = GetPartStudioShadedViewsResponses[keyof GetPartStudioShadedViewsResponses];

export type GetSketchInfoData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
    };
    query?: {
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        sketchId?: Array<string>;
        output3D?: boolean;
        curvePoints?: boolean;
        includeGeometry?: boolean;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches';
};

export type GetSketchInfoResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetSketchInfoResponse = GetSketchInfoResponses[keyof GetSketchInfoResponses];

export type GetSketchBoundingBoxesData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        sid: string;
    };
    query?: {
        configuration?: string;
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/boundingboxes';
};

export type GetSketchBoundingBoxesResponses = {
    /**
     * default response
     */
    default: BtBoundingBoxInfo;
};

export type GetSketchBoundingBoxesResponse = GetSketchBoundingBoxesResponses[keyof GetSketchBoundingBoxesResponses];

export type GetTessellatedEntitiesData = {
    body?: never;
    path: {
        did: string;
        wvm: string;
        wvmid: string;
        eid: string;
        sid: string;
    };
    query?: {
        configuration?: string;
        entityId?: Array<string>;
        angleTolerance?: number;
        chordTolerance?: number;
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/tessellatedentities';
};

export type GetTessellatedEntitiesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetTessellatedEntitiesResponse = GetTessellatedEntitiesResponses[keyof GetTessellatedEntitiesResponses];

export type ExportPartStudioStlData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v or m corresponding to whether a workspace or version or microversion was entered.
         */
        wvm: string;
        /**
         * Workspace (w), Version (v) or Microversion (m) ID.
         */
        wvmid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: {
        /**
         * IDs of the parts to retrieve. Use comma-separated IDs for multiple parts (example: partIds=JHK,JHD).
         */
        partIds?: string;
        /**
         * Type of file: text, binary
         */
        mode?: string;
        /**
         * Whether parts should be exported as a group or individually in a .zip file
         */
        grouping?: boolean;
        /**
         * Scale for measurements.
         */
        scale?: number;
        /**
         * Units for the element: `METER` | `CENTIMETER` | `MILLIMETER` | `INCH` | `FOOT` | `YARD`
         */
        units?: string;
        /**
         * Angle tolerance (in radians). This specifies the limit on the sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints. The specified value must be less than PI/2. This parameter currently has a default value chosen based on the complexity of the parts being tessellated.
         */
        angleTolerance?: number;
        /**
         * Chord tolerance (in meters). This specifies the limit on the maximum deviation of a tessellation chord from the true surface/edge. This parameter currently has a default value chosen based on the size and complexity of the parts being tessellated.
         */
        chordTolerance?: number;
        /**
         * Max facet width. This specifies the limit on the size of any side of a tessellation facet.
         */
        maxFacetWidth?: number;
        /**
         * Max facet width. This specifies the limit on the size of any side of a tessellation facet.
         */
        minFacetWidth?: number;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/stl';
};

export type GetPartStudioEdgesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        partId?: Array<string>;
        angleTolerance?: number;
        chordTolerance?: number;
        precomputedLevelOfDetail?: string;
        edgeId?: Array<string>;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatededges';
};

export type GetPartStudioEdgesResponses = {
    /**
     * default response
     */
    default: BtExportTessellatedEdgesResponse327;
};

export type GetPartStudioEdgesResponse = GetPartStudioEdgesResponses[keyof GetPartStudioEdgesResponses];

export type GetPartStudioFacesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w), version (v), or document microversion (m) id is specified below.
         */
        wvm: 'w' | 'v' | 'm';
        /**
         * The id of the workspace, version or document microversion in which the operation should be performed.
         */
        wvmid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Index specifying the location of the rollback bar when the call is evaluated. A -1 indicates that it should be at the end of the featurelist.
         */
        rollbackBarIndex?: number;
        /**
         * A specific element microversion in which to evaluate the request.
         */
        elementMicroversionId?: string;
        partId?: Array<string>;
        angleTolerance?: number;
        chordTolerance?: number;
        precomputedLevelOfDetail?: string;
        faceId?: Array<string>;
        outputFaceAppearances?: boolean;
        maxFacetWidth?: number;
        outputVertexNormals?: boolean;
        outputFacetNormals?: boolean;
        outputTextureCoordinates?: boolean;
        outputIndexTable?: boolean;
        outputErrorFaces?: boolean;
        combineCompositePartConstituents?: boolean;
    };
    url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatedfaces';
};

export type GetPartStudioFacesResponses = {
    /**
     * default response
     */
    default: BtExportTessellatedFacesResponse898;
};

export type GetPartStudioFacesResponse = GetPartStudioFacesResponses[keyof GetPartStudioFacesResponses];

export type CreatePartStudioExportGltfData = {
    body: BtbGltfExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/gltf';
};

export type CreatePartStudioExportGltfResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreatePartStudioExportGltfResponse = CreatePartStudioExportGltfResponses[keyof CreatePartStudioExportGltfResponses];

export type CreatePartStudioExportObjData = {
    body: BtbObjExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/obj';
};

export type CreatePartStudioExportObjResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreatePartStudioExportObjResponse = CreatePartStudioExportObjResponses[keyof CreatePartStudioExportObjResponses];

export type CreatePartStudioExportSolidworksData = {
    body: BtbSolidworksExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/solidworks';
};

export type CreatePartStudioExportSolidworksResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreatePartStudioExportSolidworksResponse = CreatePartStudioExportSolidworksResponses[keyof CreatePartStudioExportSolidworksResponses];

export type CreatePartStudioExportStepData = {
    body: BtbStepExportParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/step';
};

export type CreatePartStudioExportStepResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreatePartStudioExportStepResponse = CreatePartStudioExportStepResponses[keyof CreatePartStudioExportStepResponses];

export type CreatePartStudioTranslationData = {
    body: BtTranslateFormatParams;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
    };
    query?: never;
    url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations';
};

export type CreatePartStudioTranslationResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type CreatePartStudioTranslationResponse = CreatePartStudioTranslationResponses[keyof CreatePartStudioTranslationResponses];

export type CreatePublicationData = {
    body: BtPublicationParams;
    path?: never;
    query?: never;
    url: '/publications';
};

export type CreatePublicationResponses = {
    /**
     * default response
     */
    default: BtPublicationInfo;
};

export type CreatePublicationResponse = CreatePublicationResponses[keyof CreatePublicationResponses];

export type DeletePublicationData = {
    body?: never;
    path: {
        /**
         * Publication ID.
         */
        pid: string;
    };
    query?: {
        /**
         * If true, publication is deleted forever.
         */
        forever?: boolean;
    };
    url: '/publications/{pid}';
};

export type DeletePublicationResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeletePublicationResponse = DeletePublicationResponses[keyof DeletePublicationResponses];

export type UpdatePublicationAttributesData = {
    body: BtPublicationParams;
    path: {
        /**
         * Publication ID.
         */
        pid: string;
    };
    query?: never;
    url: '/publications/{pid}';
};

export type UpdatePublicationAttributesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UpdatePublicationAttributesResponse = UpdatePublicationAttributesResponses[keyof UpdatePublicationAttributesResponses];

export type AddItemToPublicationData = {
    body: BtPublicationItemParams;
    path: {
        /**
         * Publication ID.
         */
        pid: string;
    };
    query?: never;
    url: '/publications/{pid}/item';
};

export type AddItemToPublicationResponses = {
    /**
     * default response
     */
    default: BtPublicationInfo;
};

export type AddItemToPublicationResponse = AddItemToPublicationResponses[keyof AddItemToPublicationResponses];

export type DeletePublicationItemData = {
    body?: never;
    path: {
        /**
         * Publication ID.
         */
        pid: string;
        /**
         * Publication item ID.
         */
        iid: string;
    };
    query?: never;
    url: '/publications/{pid}/item/{iid}';
};

export type DeletePublicationItemResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeletePublicationItemResponse = DeletePublicationItemResponses[keyof DeletePublicationItemResponses];

export type GetPublicationItemsData = {
    body?: never;
    path: {
        /**
         * Publication ID.
         */
        pid: string;
    };
    query?: never;
    url: '/publications/{pid}/items';
};

export type GetPublicationItemsResponses = {
    /**
     * default response
     */
    default: BtPublicationInfo;
};

export type GetPublicationItemsResponse = GetPublicationItemsResponses[keyof GetPublicationItemsResponses];

export type AddItemsToPublicationData = {
    body: BtPublicationBulkItemParams;
    path: {
        /**
         * Publication ID.
         */
        pid: string;
    };
    query?: never;
    url: '/publications/{pid}/items';
};

export type AddItemsToPublicationResponses = {
    /**
     * default response
     */
    default: BtPublicationInfo;
};

export type AddItemsToPublicationResponse = AddItemsToPublicationResponses[keyof AddItemsToPublicationResponses];

export type CreateObsoletionPackageData = {
    body?: never;
    path: {
        wfid: string;
    };
    query: {
        revisionId: string;
        debugMode?: boolean;
    };
    url: '/releasepackages/obsoletion/{wfid}';
};

export type CreateObsoletionPackageResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type CreateObsoletionPackageResponse = CreateObsoletionPackageResponses[keyof CreateObsoletionPackageResponses];

export type CreateReleasePackageData = {
    body: BtReleasePackageParams;
    path: {
        wfid: string;
    };
    query?: {
        debugMode?: boolean;
    };
    url: '/releasepackages/release/{wfid}';
};

export type CreateReleasePackageResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type CreateReleasePackageResponse = CreateReleasePackageResponses[keyof CreateReleasePackageResponses];

export type GetReleasePackageData = {
    body?: never;
    path: {
        rpid: string;
    };
    query?: {
        detailed?: boolean;
    };
    url: '/releasepackages/{rpid}';
};

export type GetReleasePackageResponses = {
    /**
     * default response
     */
    default: BtReleasePackageInfo;
};

export type GetReleasePackageResponse = GetReleasePackageResponses[keyof GetReleasePackageResponses];

export type UpdateReleasePackageData = {
    body: BtUpdateReleasePackageParams;
    path: {
        rpid: string;
    };
    query?: {
        action?: string;
        wfaction?: string;
    };
    url: '/releasepackages/{rpid}';
};

export type UpdateReleasePackageResponses = {
    /**
     * default response
     */
    default: BtReleasePackageInfo;
};

export type UpdateReleasePackageResponse = UpdateReleasePackageResponses[keyof UpdateReleasePackageResponses];

export type GetRevisionByPartNumberData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
        /**
         * Part number.
         */
        pnum: string;
    };
    query?: {
        /**
         * ID of the revision to get
         */
        revision?: string;
        /**
         * Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
         */
        elementType?: number;
    };
    url: '/revisions/c/{cid}/partnumber/{pnum}';
};

export type GetRevisionByPartNumberResponses = {
    /**
     * default response
     */
    default: BtRevisionInfo;
};

export type GetRevisionByPartNumberResponse = GetRevisionByPartNumberResponses[keyof GetRevisionByPartNumberResponses];

export type EnumerateRevisionsData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
    };
    query?: {
        /**
         * Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
         */
        elementType?: number;
        /**
         * The number of list entries to return in a single API call.
         */
        limit?: number;
        /**
         * Whether to limit search to only latest revisions.
         */
        latestOnly?: boolean;
        /**
         * The earliest creation date of the revision to find.
         */
        after?: string;
    };
    url: '/revisions/companies/{cid}';
};

export type EnumerateRevisionsResponses = {
    /**
     * default response
     */
    default: BtListResponseBtRevisionInfo;
};

export type EnumerateRevisionsResponse = EnumerateRevisionsResponses[keyof EnumerateRevisionsResponses];

export type GetRevisionHistoryInCompanyByElementIdData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
         */
        elementType: string;
        /**
         * Set to `true` to return a list of approvers. Default is `false` and will return `null`.
         */
        fillApprovers?: boolean;
        /**
         * Set to `true` to return a list of export permissions. Default is `false` and will return `null`.
         */
        fillExportPermission?: boolean;
        /**
         * Whether the revision can change object type. Used in reuse part number flow.
         */
        supportChangeType?: boolean;
    };
    url: '/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}';
};

export type GetRevisionHistoryInCompanyByElementIdResponses = {
    /**
     * default response
     */
    default: BtRevisionListResponse;
};

export type GetRevisionHistoryInCompanyByElementIdResponse = GetRevisionHistoryInCompanyByElementIdResponses[keyof GetRevisionHistoryInCompanyByElementIdResponses];

export type GetRevisionHistoryInCompanyByPartIdData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
        /**
         * Document ID.
         */
        did: string;
        /**
         * One of w or v corresponding to whether a workspace or version was specified.
         */
        wv: string;
        /**
         * Workspace (w) or Version (v) ID.
         */
        wvid: string;
        /**
         * Element ID.
         */
        eid: string;
        /**
         * Part ID.
         */
        pid: string;
    };
    query?: {
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        /**
         * Id of document that links to the document being accessed. This may provide additional access rights to the document. Allowed only with version (v) path parameter.
         */
        linkDocumentId?: string;
        /**
         * Set to `true` to return a list of approvers. Default is `false` and will return `null`.
         */
        fillApprovers?: boolean;
        /**
         * Set to `true` to return a list of export permissions. Default is `false` and will return `null`.
         */
        fillExportPermission?: boolean;
        /**
         * Whether the revision can change object type. Used in reuse part number flow.
         */
        supportChangeType?: boolean;
    };
    url: '/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}/p/{pid}';
};

export type GetRevisionHistoryInCompanyByPartIdResponses = {
    /**
     * default response
     */
    default: BtRevisionListResponse;
};

export type GetRevisionHistoryInCompanyByPartIdResponse = GetRevisionHistoryInCompanyByPartIdResponses[keyof GetRevisionHistoryInCompanyByPartIdResponses];

export type GetRevisionHistoryInCompanyByPartNumberData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
        /**
         * Part number.
         */
        pnum: string;
    };
    query: {
        /**
         * Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
         */
        elementType: string;
        /**
         * Set to `true` to return a list of approvers. Default is `false` and will return `null`.
         */
        fillApprovers?: boolean;
        /**
         * Set to `true` to return a list of export permissions. Default is `false` and will return `null`.
         */
        fillExportPermission?: boolean;
        /**
         * Whether the revision can change object type. Used in reuse part number flow.
         */
        supportChangeType?: boolean;
    };
    url: '/revisions/companies/{cid}/partnumber/{pnum}';
};

export type GetRevisionHistoryInCompanyByPartNumberResponses = {
    /**
     * default response
     */
    default: BtRevisionListResponse;
};

export type GetRevisionHistoryInCompanyByPartNumberResponse = GetRevisionHistoryInCompanyByPartNumberResponses[keyof GetRevisionHistoryInCompanyByPartNumberResponses];

export type DeleteRevisionHistoryData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
        /**
         * Part number.
         */
        pnum: string;
        /**
         * Element Type. Must be one of: `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob
         */
        et: string;
    };
    query?: {
        /**
         * By default, revisions will be deleted for the part number in the specified, and all linked documents. Set to `true` to only delete revisions in the specified document.
         */
        ignoreLinkedDocuments?: boolean;
    };
    url: '/revisions/companies/{cid}/partnumber/{pnum}/elementType/{et}';
};

export type DeleteRevisionHistoryResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteRevisionHistoryResponse = DeleteRevisionHistoryResponses[keyof DeleteRevisionHistoryResponses];

export type GetAllInDocumentData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/revisions/d/{did}';
};

export type GetAllInDocumentResponses = {
    /**
     * default response
     */
    default: BtListResponseBtRevisionInfo;
};

export type GetAllInDocumentResponse = GetAllInDocumentResponses[keyof GetAllInDocumentResponses];

export type GetAllInDocumentVersionData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
        /**
         * Version ID.
         */
        vid: string;
    };
    query?: never;
    url: '/revisions/d/{did}/v/{vid}';
};

export type GetAllInDocumentVersionResponses = {
    /**
     * default response
     */
    default: BtListResponseBtRevisionInfo;
};

export type GetAllInDocumentVersionResponse = GetAllInDocumentVersionResponses[keyof GetAllInDocumentVersionResponses];

export type GetLatestInDocumentOrCompanyData = {
    body?: never;
    path: {
        /**
         * Use `c` to specify a company ID or `d` to specify a document ID.
         */
        cd: string;
        /**
         * Company ID or document ID
         */
        cdid: string;
        /**
         * Part number.
         */
        pnum: string;
    };
    query: {
        /**
         * Element Type. Must be one of: `-1`: Unknown, `0`: Part Studio, `1`: Assembly, `2`: Drawing. `4` : Blob, `8`: Variable Studio
         */
        et: string;
    };
    url: '/revisions/{cd}/{cdid}/p/{pnum}/latest';
};

export type GetLatestInDocumentOrCompanyResponses = {
    /**
     * default response
     */
    default: BtRevisionInfo;
};

export type GetLatestInDocumentOrCompanyResponse = GetLatestInDocumentOrCompanyResponses[keyof GetLatestInDocumentOrCompanyResponses];

export type SetCustomParametersData = {
    body?: BtStandardContentSetCustomParametersBatchRequest;
    path: {
        /**
         * Document ID.
         */
        did: string;
    };
    query?: {
        /**
         * The id of the company that owns the metadata to be modified.
         */
        companyId?: string;
    };
    url: '/standardcontent/d/{did}/customparameters';
};

export type SetCustomParametersResponses = {
    /**
     * default response
     */
    default: BtStandardContentSetCustomParametersBatchResponse;
};

export type SetCustomParametersResponse = SetCustomParametersResponses[keyof SetCustomParametersResponses];

export type GetParameterValuesForIdData = {
    body?: never;
    path: {
        /**
         * Document ID.
         */
        did: string;
    };
    query?: never;
    url: '/standardcontent/d/{did}/parametervalues';
};

export type GetParameterValuesForIdResponses = {
    /**
     * default response
     */
    default: Array<BtStandardContentParameterDescriptor>;
};

export type GetParameterValuesForIdResponse = GetParameterValuesForIdResponses[keyof GetParameterValuesForIdResponses];

export type GetStandardContentListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * If provided, list only standard content corresponding to this standard.
         */
        standard?: string;
    };
    url: '/standardcontent/list';
};

export type GetStandardContentListResponses = {
    /**
     * default response
     */
    default: Array<BtStandardContentHierarchyItem>;
};

export type GetStandardContentListResponse = GetStandardContentListResponses[keyof GetStandardContentListResponses];

export type CreateTableTemplateData = {
    body: BtPropertiesTableTemplateParams;
    path?: never;
    query?: {
        templateGroupId?: string;
    };
    url: '/tabletemplates';
};

export type CreateTableTemplateResponses = {
    /**
     * default response
     */
    default: BtPropertiesTableTemplateInfo;
};

export type CreateTableTemplateResponse = CreateTableTemplateResponses[keyof CreateTableTemplateResponses];

export type GetByCompanyIdData = {
    body?: never;
    path: {
        /**
         * The id of the company in which to perform the operation.
         */
        cid: string;
    };
    query?: {
        /**
         * Indicates filter for table templates: 0 (BOM) or 1 (Revision Table).
         */
        templateType?: BtPropertiesTableTemplateType;
        onlyActive?: boolean;
        includeDefaults?: boolean;
    };
    url: '/tabletemplates/companies/{cid}';
};

export type GetByCompanyIdResponses = {
    /**
     * default response
     */
    default: Array<BtPropertiesTableTemplateInfo>;
};

export type GetByCompanyIdResponse = GetByCompanyIdResponses[keyof GetByCompanyIdResponses];

export type GetByDocumentIdData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
    };
    query?: {
        /**
         * Indicates filter for table templates: 0 (BOM) or 1 (Revision Table).
         */
        templateType?: BtPropertiesTableTemplateType;
        onlyActive?: boolean;
        includeDefaults?: boolean;
    };
    url: '/tabletemplates/d/{did}';
};

export type GetByDocumentIdResponses = {
    /**
     * default response
     */
    default: Array<BtPropertiesTableTemplateInfo>;
};

export type GetByDocumentIdResponse = GetByDocumentIdResponses[keyof GetByDocumentIdResponses];

export type DeleteTableTemplateData = {
    body?: never;
    path: {
        /**
         * The id of the template in which to perform the operation.
         */
        tid: string;
    };
    query?: never;
    url: '/tabletemplates/{tid}';
};

export type DeleteTableTemplateResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteTableTemplateResponse = DeleteTableTemplateResponses[keyof DeleteTableTemplateResponses];

export type GetTableTemplateData = {
    body?: never;
    path: {
        /**
         * The id of the template in which to perform the operation.
         */
        tid: string;
    };
    query?: never;
    url: '/tabletemplates/{tid}';
};

export type GetTableTemplateResponses = {
    /**
     * default response
     */
    default: BtPropertiesTableTemplateInfo;
};

export type GetTableTemplateResponse = GetTableTemplateResponses[keyof GetTableTemplateResponses];

export type GetActionItemsData = {
    body?: never;
    path?: never;
    query?: {
        userId?: string;
        status?: number;
        role?: number;
        order?: number;
        type?: Array<string>;
        documentId?: string;
        offset?: number;
        limit?: number;
    };
    url: '/tasks';
};

export type GetActionItemsResponses = {
    /**
     * default response
     */
    default: BtTaskListResponse;
};

export type GetActionItemsResponse = GetActionItemsResponses[keyof GetActionItemsResponses];

export type CreateTaskData = {
    body: BtCreateTaskParams;
    path?: never;
    query?: never;
    url: '/tasks';
};

export type CreateTaskResponses = {
    /**
     * default response
     */
    default: BtTaskInfo;
};

export type CreateTaskResponse = CreateTaskResponses[keyof CreateTaskResponses];

export type GetTaskData = {
    body?: never;
    path: {
        tid: string;
    };
    query?: never;
    url: '/tasks/{tid}';
};

export type GetTaskResponses = {
    /**
     * default response
     */
    default: BtTaskInfo;
};

export type GetTaskResponse = GetTaskResponses[keyof GetTaskResponses];

export type UpdateTaskData = {
    body: BtUpdateTaskParams;
    path: {
        tid: string;
    };
    query?: never;
    url: '/tasks/{tid}';
};

export type UpdateTaskResponses = {
    /**
     * default response
     */
    default: BtTaskInfo;
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type TransitionTaskData = {
    body?: never;
    path: {
        tid: string;
        transition: string;
    };
    query?: never;
    url: '/tasks/{tid}/{transition}';
};

export type TransitionTaskResponses = {
    /**
     * default response
     */
    default: BtTaskInfo;
};

export type TransitionTaskResponse = TransitionTaskResponses[keyof TransitionTaskResponses];

export type FindData = {
    body?: never;
    path?: never;
    query?: {
        query?: string;
        filter?: number;
        uid?: string;
        companyId?: string;
        sortColumn?: string;
        sortOrder?: string;
        includeCompanyOwnedTeams?: boolean;
        offset?: number;
        limit?: number;
    };
    url: '/teams';
};

export type FindResponses = {
    /**
     * default response
     */
    default: BtGlobalTreeNodeListResponseBtTeamInfo;
};

export type FindResponse = FindResponses[keyof FindResponses];

export type GetTeamData = {
    body?: never;
    path: {
        tid: string;
    };
    query?: never;
    url: '/teams/{tid}';
};

export type GetTeamResponses = {
    /**
     * default response
     */
    default: BtTeamInfo;
};

export type GetTeamResponse = GetTeamResponses[keyof GetTeamResponses];

export type GetMembersData = {
    body?: never;
    path: {
        tid: string;
    };
    query?: {
        sortColumn?: string;
        sortOrder?: string;
        q?: string;
        offset?: number;
        limit?: number;
    };
    url: '/teams/{tid}/members';
};

export type GetMembersResponses = {
    /**
     * default response
     */
    default: BtListResponseBtTeamMemberInfo;
};

export type GetMembersResponse = GetMembersResponses[keyof GetMembersResponses];

export type GetThumbnailForDocumentData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/thumbnails/d/{did}';
};

export type GetThumbnailForDocumentResponses = {
    /**
     * default response
     */
    default: BtThumbnailInfo;
};

export type GetThumbnailForDocumentResponse = GetThumbnailForDocumentResponses[keyof GetThumbnailForDocumentResponses];

export type GetThumbnailForDocumentAndVersionData = {
    body?: never;
    path: {
        did: string;
        vid: string;
    };
    query?: {
        linkDocumentId?: string;
    };
    url: '/thumbnails/d/{did}/v/{vid}';
};

export type GetThumbnailForDocumentAndVersionResponses = {
    /**
     * default response
     */
    default: BtThumbnailInfo;
};

export type GetThumbnailForDocumentAndVersionResponse = GetThumbnailForDocumentAndVersionResponses[keyof GetThumbnailForDocumentAndVersionResponses];

export type GetDocumentThumbnailData = {
    body?: never;
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/thumbnails/d/{did}/w/{wid}';
};

export type GetDocumentThumbnailResponses = {
    /**
     * default response
     */
    default: BtThumbnailInfo;
};

export type GetDocumentThumbnailResponse = GetDocumentThumbnailResponses[keyof GetDocumentThumbnailResponses];

export type GetElementThumbnailWithApiConfigurationData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        cid: string;
        /**
         * the generated thumbnail size in pixels, widthxheigth
         */
        sz: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * Cache Control key. If specified, the response header returned will tell the client to use cached thumbnails.
         */
        t?: string;
        /**
         * Controls the return of the default image, if thumbnail is not available
         */
        skipDefaultImage?: string;
        rejectEmpty?: boolean;
        requireConfigMatch?: boolean;
    };
    url: '/thumbnails/d/{did}/w/{wid}/e/{eid}/ac/{cid}/s/{sz}';
};

export type GetElementThumbnailWithApiConfigurationResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetElementThumbnailWithApiConfigurationResponse = GetElementThumbnailWithApiConfigurationResponses[keyof GetElementThumbnailWithApiConfigurationResponses];

export type GetDocumentThumbnailWithSizeData = {
    body?: never;
    path: {
        did: string;
        wid: string;
        /**
         * the generated thumbnail size in pixels, widthxheigth
         */
        sz: string;
    };
    query?: {
        /**
         * Cache Control key. If specified, the response header returned will tell the client to use cached thumbnails.
         */
        t?: string;
        /**
         * Controls the return of the default image, if thumbnail is not available
         */
        skipDefaultImage?: string;
    };
    url: '/thumbnails/d/{did}/w/{wid}/s/{sz}';
};

export type GetDocumentThumbnailWithSizeResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetDocumentThumbnailWithSizeResponse = GetDocumentThumbnailWithSizeResponses[keyof GetDocumentThumbnailWithSizeResponses];

export type DeleteApplicationThumbnailsData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}';
};

export type DeleteApplicationThumbnailsResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteApplicationThumbnailsResponse = DeleteApplicationThumbnailsResponses[keyof DeleteApplicationThumbnailsResponses];

export type GetElementThumbnailData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}';
};

export type GetElementThumbnailResponses = {
    /**
     * default response
     */
    default: BtThumbnailInfo;
};

export type GetElementThumbnailResponse = GetElementThumbnailResponses[keyof GetElementThumbnailResponses];

export type SetApplicationElementThumbnailData = {
    body: BtApplicationElementThumbnailParamsArray;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        overwrite?: boolean;
    };
    url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}';
};

export type SetApplicationElementThumbnailResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SetApplicationElementThumbnailResponse = SetApplicationElementThumbnailResponses[keyof SetApplicationElementThumbnailResponses];

export type GetElementThumbnailWithSizeData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
        /**
         * the generated thumbnail size in pixels, widthxheigth
         */
        sz: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * Cache Control key. If specified, the response header returned will tell the client to use cached thumbnails.
         */
        t?: string;
        /**
         * Controls the return of the default image, if thumbnail is not available
         */
        skipDefaultImage?: string;
        rejectEmpty?: boolean;
    };
    url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}/s/{sz}';
};

export type GetElementThumbnailWithSizeResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type GetElementThumbnailWithSizeResponse = GetElementThumbnailWithSizeResponses[keyof GetElementThumbnailWithSizeResponses];

export type GetThumbnailForDocumentOldData = {
    body?: never;
    path: {
        did: string;
    };
    query?: never;
    url: '/thumbnails/document/{did}';
};

export type GetThumbnailForDocumentOldResponses = {
    /**
     * default response
     */
    default: BtThumbnailInfo;
};

export type GetThumbnailForDocumentOldResponse = GetThumbnailForDocumentOldResponses[keyof GetThumbnailForDocumentOldResponses];

export type GetThumbnailForDocumentAndVersionOldData = {
    body?: never;
    path: {
        did: string;
        vid: string;
    };
    query?: never;
    url: '/thumbnails/document/{did}/version/{vid}';
};

export type GetThumbnailForDocumentAndVersionOldResponses = {
    /**
     * default response
     */
    default: BtThumbnailInfo;
};

export type GetThumbnailForDocumentAndVersionOldResponse = GetThumbnailForDocumentAndVersionOldResponses[keyof GetThumbnailForDocumentAndVersionOldResponses];

export type GetDocumentTranslationsData = {
    body?: never;
    path: {
        did: string;
    };
    query?: {
        offset?: number;
        limit?: number;
    };
    url: '/translations/d/{did}';
};

export type GetDocumentTranslationsResponses = {
    /**
     * default response
     */
    default: BtListResponseBtTranslationRequestInfo;
};

export type GetDocumentTranslationsResponse = GetDocumentTranslationsResponses[keyof GetDocumentTranslationsResponses];

export type CreateTranslationData = {
    body?: {
        /**
         * The file to upload.
         */
        file?: {
            [key: string]: unknown;
        };
        /**
         * If true, and a part doesn't pass Onshape validation, it will be imported with faults.
         */
        allowFaultyParts?: boolean;
        /**
         * Not supported for importing into a single part studio.
         */
        createComposite?: boolean;
        createDrawingIfPossible?: boolean;
        /**
         * If the filename contains non-ASCII characters. Use this field to store the filename.
         */
        encodedFilename?: string;
        extractAssemblyHierarchy?: boolean;
        /**
         * If the file is an assembly, or contains an assembly, setting this to True will import it as a Part Studio. In this case the assembly will be flattened to a set of parts in a Part Studio. There will be duplicate parts created whenever a part is instanced more than once. If False, it will be imported as an Assembly.
         */
        flattenAssemblies?: boolean;
        formatName?: string;
        joinAdjacentSurfaces?: boolean;
        locationElementId?: string;
        locationGroupId?: string;
        locationPosition?: number;
        notifyUser?: boolean;
        ownerId?: string;
        parentId?: string;
        projectId?: string;
        public?: boolean;
        onePartPerDoc?: boolean;
        splitAssembliesIntoMultipleDocuments?: boolean;
        storeInDocument?: boolean;
        translate?: boolean;
        unit?: string;
        uploadId?: string;
        versionString?: string;
        /**
         * Face appearances defined on models will be imported.
         */
        importAppearances?: boolean;
        /**
         * Material density defined on models will be imported.
         */
        importMaterialDensity?: boolean;
        /**
         * If the file was created in a system that orients with Y Axis Up, the models would by default be brought into Onshape (a Z Axis Up system) with a flipped coordinate system. Toggle this value to reorient the axis system to match Onshape and display the model with the coordinates you expect.
         */
        yAxisIsUp?: boolean;
        importWithinDocument?: boolean;
        /**
         * Try getting optimized topology from IGES model.
         */
        useIGESImportPostProcessing?: boolean;
        upgradeFeatureScriptVersion?: boolean;
        preserveSourceIds?: boolean;
        documentId?: string;
        versionId?: string;
        versionName?: string;
        versionDescription?: string;
        /**
         * Re-point the version references in APP elements to initial version in the new document
         */
        repointAppElementVersionRefs?: boolean;
    };
    path: {
        did: string;
        wid: string;
    };
    query?: never;
    url: '/translations/d/{did}/w/{wid}';
};

export type CreateTranslationResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestImportInfo;
};

export type CreateTranslationResponse = CreateTranslationResponses[keyof CreateTranslationResponses];

export type GetAllTranslatorFormatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/translations/translationformats';
};

export type GetAllTranslatorFormatsResponses = {
    /**
     * default response
     */
    default: Array<BtModelFormatFullInfo>;
};

export type GetAllTranslatorFormatsResponse = GetAllTranslatorFormatsResponses[keyof GetAllTranslatorFormatsResponses];

export type DeleteTranslationData = {
    body?: never;
    path: {
        tid: string;
    };
    query?: never;
    url: '/translations/{tid}';
};

export type DeleteTranslationResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type DeleteTranslationResponse = DeleteTranslationResponses[keyof DeleteTranslationResponses];

export type GetTranslationData = {
    body?: never;
    path: {
        tid: string;
    };
    query?: never;
    url: '/translations/{tid}';
};

export type GetTranslationResponses = {
    /**
     * default response
     */
    default: BtTranslationRequestInfo;
};

export type GetTranslationResponse = GetTranslationResponses[keyof GetTranslationResponses];

export type SessionData = {
    body: BtLoginParams;
    path?: never;
    query?: never;
    url: '/users/session';
};

export type SessionResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SessionResponse = SessionResponses[keyof SessionResponses];

export type SessionInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/sessioninfo';
};

export type SessionInfoResponses = {
    /**
     * default response
     */
    default: BtUserOAuth2SummaryInfo;
};

export type SessionInfoResponse = SessionInfoResponses[keyof SessionInfoResponses];

export type GetUserSettingsCurrentLoggedInUserData = {
    body?: never;
    path?: never;
    query?: {
        includematerials?: boolean;
    };
    url: '/users/settings';
};

export type GetUserSettingsCurrentLoggedInUserResponses = {
    /**
     * default response
     */
    default: BtUserSettingsInfo;
};

export type GetUserSettingsCurrentLoggedInUserResponse = GetUserSettingsCurrentLoggedInUserResponses[keyof GetUserSettingsCurrentLoggedInUserResponses];

export type GetUserSettingsData = {
    body?: never;
    path: {
        uid: string;
    };
    query?: {
        includematerials?: boolean;
    };
    url: '/users/{uid}/settings';
};

export type GetUserSettingsResponses = {
    /**
     * default response
     */
    default: BtUserSettingsInfo;
};

export type GetUserSettingsResponse = GetUserSettingsResponses[keyof GetUserSettingsResponses];

export type SetVariablesData = {
    body: Array<BtVariableParams>;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/variables/d/{did}/w/{wid}/e/{eid}/variables';
};

export type SetVariablesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SetVariablesResponse = SetVariablesResponses[keyof SetVariablesResponses];

export type SetVariableStudioReferencesData = {
    body: BtVariableStudioReferenceListInfo;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/variables/d/{did}/w/{wid}/e/{eid}/variablestudioreferences';
};

export type SetVariableStudioReferencesResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SetVariableStudioReferencesResponse = SetVariableStudioReferencesResponses[keyof SetVariableStudioReferencesResponses];

export type SetVariableStudioScopeData = {
    body: BtVariableStudioScopeInfo;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/variables/d/{did}/w/{wid}/e/{eid}/variablestudioscope';
};

export type SetVariableStudioScopeResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type SetVariableStudioScopeResponse = SetVariableStudioScopeResponses[keyof SetVariableStudioScopeResponses];

export type CreateVariableStudioData = {
    body: BtModelElementParams;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * The id of the workspace in which to perform the operation.
         */
        wid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/variables/d/{did}/w/{wid}/variablestudio';
};

export type CreateVariableStudioResponses = {
    /**
     * default response
     */
    default: BtDocumentElementInfo;
};

export type CreateVariableStudioResponse = CreateVariableStudioResponses[keyof CreateVariableStudioResponses];

export type GetVariablesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
        /**
         * URL-encoded string of configuration values (separated by `;`). See the [Configurations API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for details.
         */
        configuration?: string;
        includeValuesAndReferencedVariables?: boolean;
    };
    url: '/variables/d/{did}/{wv}/{wvid}/e/{eid}/variables';
};

export type GetVariablesResponses = {
    /**
     * default response
     */
    default: Array<BtVariableTableInfo>;
};

export type GetVariablesResponse = GetVariablesResponses[keyof GetVariablesResponses];

export type GetVariableStudioReferencesData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioreferences';
};

export type GetVariableStudioReferencesResponses = {
    /**
     * default response
     */
    default: BtVariableStudioReferenceListInfo;
};

export type GetVariableStudioReferencesResponse = GetVariableStudioReferencesResponses[keyof GetVariableStudioReferencesResponses];

export type GetVariableStudioScopeData = {
    body?: never;
    path: {
        /**
         * The id of the document in which to perform the operation.
         */
        did: string;
        /**
         * Indicates which of workspace (w) or version (v) id is specified below.
         */
        wv: 'w' | 'v';
        /**
         * The id of the workspace, version in which the operation should be performed.
         */
        wvid: string;
        /**
         * The id of the element in which to perform the operation.
         */
        eid: string;
    };
    query?: {
        /**
         * The id of the document through which the above document should be accessed; only applicable when accessing a version of the document. This allows a user who has access to document a to see data from document b, as long as document b has been linked to document a by a user who has permission to both.
         */
        linkDocumentId?: string;
    };
    url: '/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioscope';
};

export type GetVariableStudioScopeResponses = {
    /**
     * default response
     */
    default: BtVariableStudioScopeInfo;
};

export type GetVariableStudioScopeResponse = GetVariableStudioScopeResponses[keyof GetVariableStudioScopeResponses];

export type GetAllVersionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/versions';
};

export type GetAllVersionsResponses = {
    /**
     * default response
     */
    default: Versions;
};

export type GetAllVersionsResponse = GetAllVersionsResponses[keyof GetAllVersionsResponses];

export type GetWebhooksData = {
    body?: never;
    path?: never;
    query?: {
        company?: string;
        user?: string;
        offset?: number;
        limit?: number;
    };
    url: '/webhooks';
};

export type GetWebhooksResponses = {
    /**
     * default response
     */
    default: BtListResponseBtWebhookInfo;
};

export type GetWebhooksResponse = GetWebhooksResponses[keyof GetWebhooksResponses];

export type CreateWebhookData = {
    body?: BtWebhookParams;
    path?: never;
    query?: never;
    url: '/webhooks';
};

export type CreateWebhookResponses = {
    /**
     * default response
     */
    default: BtWebhookInfo;
};

export type CreateWebhookResponse = CreateWebhookResponses[keyof CreateWebhookResponses];

export type UnregisterWebhookData = {
    body?: never;
    path: {
        webhookid: string;
    };
    query?: {
        blockNotification?: boolean;
    };
    url: '/webhooks/{webhookid}';
};

export type UnregisterWebhookResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type UnregisterWebhookResponse = UnregisterWebhookResponses[keyof UnregisterWebhookResponses];

export type GetWebhookData = {
    body?: never;
    path: {
        webhookid: string;
    };
    query?: never;
    url: '/webhooks/{webhookid}';
};

export type GetWebhookResponses = {
    /**
     * default response
     */
    default: BtWebhookInfo;
};

export type GetWebhookResponse = GetWebhookResponses[keyof GetWebhookResponses];

export type UpdateWebhookData = {
    body?: BtWebhookParams;
    path: {
        webhookid: string;
    };
    query?: never;
    url: '/webhooks/{webhookid}';
};

export type UpdateWebhookResponses = {
    /**
     * default response
     */
    default: BtWebhookInfo;
};

export type UpdateWebhookResponse = UpdateWebhookResponses[keyof UpdateWebhookResponses];

export type PingWebhookData = {
    body?: never;
    path: {
        webhookid: string;
    };
    query?: never;
    url: '/webhooks/{webhookid}/ping';
};

export type PingWebhookResponses = {
    /**
     * default response
     */
    default: {
        [key: string]: unknown;
    };
};

export type PingWebhookResponse = PingWebhookResponses[keyof PingWebhookResponses];

export type GetActiveWorkflowsData = {
    body?: never;
    path?: never;
    query?: {
        documentId?: string;
    };
    url: '/workflow/active';
};

export type GetActiveWorkflowsResponses = {
    /**
     * default response
     */
    default: BtActiveWorkflowInfo;
};

export type GetActiveWorkflowsResponse = GetActiveWorkflowsResponses[keyof GetActiveWorkflowsResponses];

export type GetAllowedApproversData = {
    body?: never;
    path: {
        companyId: string;
    };
    query?: {
        q?: string;
        expandTeams?: boolean;
        includeSelf?: boolean;
        excludeConnections?: boolean;
    };
    url: '/workflow/c/{companyId}/approvers';
};

export type GetAllowedApproversResponses = {
    /**
     * default response
     */
    default: BtListResponseBtWorkflowObserverOptionInfo;
};

export type GetAllowedApproversResponse = GetAllowedApproversResponses[keyof GetAllowedApproversResponses];

export type EnumerateObjectWorkflowsData = {
    body?: never;
    path: {
        /**
         * The company or enterprise ID that owns the resource.
         */
        cid: string;
    };
    query?: {
        /**
         * Optionally filter for specific workflowable types. Defaults to RELEASE and OBSOLETION
         */
        objectTypes?: Array<BtapiWorkflowableType>;
        /**
         * Optionally filter for specific workflow states like PENDING, RELEASED
         */
        states?: Array<string>;
        /**
         * The number of list entries to return in a single API call.
         */
        limit?: number;
        /**
         * The earliest modification date of workflowable object to find.
         */
        modifiedAfter?: string;
    };
    url: '/workflow/companies/{cid}/objects';
};

export type EnumerateObjectWorkflowsResponses = {
    /**
     * default response
     */
    default: BtListResponseBtObjectWorkflowInfo;
};

export type EnumerateObjectWorkflowsResponse = EnumerateObjectWorkflowsResponses[keyof EnumerateObjectWorkflowsResponses];

export type GetWorkflowByIdData = {
    body?: never;
    path: {
        /**
         * Id of a workflowable object like release package, task etc.
         */
        objectId: string;
    };
    query?: never;
    url: '/workflow/obj/{objectId}';
};

export type GetWorkflowByIdResponses = {
    /**
     * default response
     */
    default: BtObjectWorkflowInfo;
};

export type GetWorkflowByIdResponse = GetWorkflowByIdResponses[keyof GetWorkflowByIdResponses];

export type GetAuditLogData = {
    body?: never;
    path: {
        /**
         * Id of a workflowable object like release package, task etc.
         */
        objectId: string;
    };
    query?: never;
    url: '/workflow/obj/{objectId}/auditlog';
};

export type GetAuditLogResponses = {
    /**
     * default response
     */
    default: BtWorkflowAuditLogInfo;
};

export type GetAuditLogResponse = GetAuditLogResponses[keyof GetAuditLogResponses];
