// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { AbortTransactionData, AbortTransactionResponses, AddAttachmentData, AddAttachmentResponses, AddFeatureData, AddFeatureResponses, AddGlobalPermissionsForIdentityData, AddGlobalPermissionsForIdentityResponses, AddItemsToPublicationData, AddItemsToPublicationResponses, AddItemToPublicationData, AddItemToPublicationResponses, AddPartStudioFeatureData, AddPartStudioFeatureResponses, AddUserToCompanyData, AddUserToCompanyResponses, BulkCreateElementData, BulkCreateElementResponses, CancelPurchaseNewData, CancelPurchaseNewResponses, ClearGlobalPermissionsData, ClearGlobalPermissionsResponses, CommitTransactionsData, CommitTransactionsResponses, CompareAppElementJsonData, CompareAppElementJsonResponses, ComparePartStudiosData, ComparePartStudiosResponses, ConsumePurchaseData, ConsumePurchaseResponses, CopyAssociativeDataData, CopyAssociativeDataResponses, CopyElementFromSourceDocumentData, CopyElementFromSourceDocumentResponses, CopyWorkspaceData, CopyWorkspaceResponses, CreateAliasData, CreateAliasResponses, CreateAssemblyData, CreateAssemblyExportGltfData, CreateAssemblyExportGltfResponses, CreateAssemblyExportObjData, CreateAssemblyExportObjResponses, CreateAssemblyExportSolidworksData, CreateAssemblyExportSolidworksResponses, CreateAssemblyExportStepData, CreateAssemblyExportStepResponses, CreateAssemblyResponses, CreateBlobTranslationData, CreateBlobTranslationResponses, CreateCommentData, CreateCommentResponses, CreateDocumentData, CreateDocumentResponses, CreateDrawingAppElementData, CreateDrawingAppElementResponses, CreateDrawingTranslationData, CreateDrawingTranslationResponses, CreateElementData, CreateElementResponses, CreateFeatureStudioData, CreateFeatureStudioResponses, CreateInstanceData, CreateInstanceResponses, CreateItemData, CreateItemResponses, CreateObsoletionPackageData, CreateObsoletionPackageResponses, CreatePartStudioData, CreatePartStudioExportGltfData, CreatePartStudioExportGltfResponses, CreatePartStudioExportObjData, CreatePartStudioExportObjResponses, CreatePartStudioExportSolidworksData, CreatePartStudioExportSolidworksResponses, CreatePartStudioExportStepData, CreatePartStudioExportStepResponses, CreatePartStudioResponses, CreatePartStudioTranslationData, CreatePartStudioTranslationResponses, CreatePublicationData, CreatePublicationResponses, CreateReferenceData, CreateReferenceResponses, CreateReleasePackageData, CreateReleasePackageResponses, CreateTableTemplateData, CreateTableTemplateResponses, CreateTaskData, CreateTaskResponses, CreateTranslationData, CreateTranslationResponses, CreateVariableStudioData, CreateVariableStudioResponses, CreateVersionData, CreateVersionResponses, CreateWebhookData, CreateWebhookResponses, CreateWorkspaceData, CreateWorkspaceResponses, DecodeConfigurationData, DecodeConfigurationResponses, DeleteAliasData, DeleteAliasResponses, DeleteAppElementContentBatchData, DeleteAppElementContentBatchResponses, DeleteAppElementContentData, DeleteAppElementContentResponses, DeleteApplicationThumbnailsData, DeleteApplicationThumbnailsResponses, DeleteAppSettingsData, DeleteAppSettingsResponses, DeleteAssociativeDataData, DeleteAssociativeDataResponses, DeleteAttachmentsData, DeleteAttachmentsResponses, DeleteBlobSubelementData, DeleteBlobSubelementResponses, DeleteCommentData, DeleteCommentResponses, DeleteCompanyAppSettingsData, DeleteCompanyAppSettingsResponses, DeleteDocumentData, DeleteDocumentResponses, DeleteElementData, DeleteElementResponses, DeleteFeatureData, DeleteFeatureResponses, DeleteInstanceData, DeleteInstanceResponses, DeleteItemData, DeleteItemResponses, DeletePartStudioFeatureData, DeletePartStudioFeatureResponses, DeletePublicationData, DeletePublicationItemData, DeletePublicationItemResponses, DeletePublicationResponses, DeleteReferenceData, DeleteReferenceResponses, DeleteRevisionHistoryData, DeleteRevisionHistoryResponses, DeleteTableTemplateData, DeleteTableTemplateResponses, DeleteTranslationData, DeleteTranslationResponses, DeleteWorkspaceData, DeleteWorkspaceResponses, DownloadBlobSubelementData, DownloadBlobSubelementResponses, DownloadBlobSubelementWorkspaceData, DownloadBlobSubelementWorkspaceResponses, DownloadExternalDataData, DownloadExternalDataResponses, DownloadFileWorkspaceData, DownloadFileWorkspaceResponses, EncodeConfigurationMapData, EncodeConfigurationMapResponses, EnumerateObjectWorkflowsData, EnumerateObjectWorkflowsResponses, EnumerateRevisionsData, EnumerateRevisionsResponses, EvalFeatureScriptData, EvalFeatureScriptResponses, Export2JsonData, Export2JsonResponses, ExportParasolidData, ExportPartGltfData, ExportPartGltfResponses, ExportPartStudioGltfData, ExportPartStudioGltfResponses, ExportPartStudioStlData, ExportPsData, ExportStlData, ExportStlResponses, FindCompanyData, FindCompanyResponses, FindData, FindResponses, GetActionItemsData, GetActionItemsResponses, GetActiveWorkflowsData, GetActiveWorkflowsResponses, GetAliasData, GetAliasesInCompanyData, GetAliasesInCompanyResponses, GetAliasMembersData, GetAliasMembersResponses, GetAliasResponses, GetAllInDocumentData, GetAllInDocumentResponses, GetAllInDocumentVersionData, GetAllInDocumentVersionResponses, GetAllowedApproversData, GetAllowedApproversResponses, GetAllTranslatorFormatsData, GetAllTranslatorFormatsResponses, GetAllVersionsData, GetAllVersionsResponses, GetAppElementHistoryData, GetAppElementHistoryResponses, GetApplicableExtensionsForClientData, GetApplicableExtensionsForClientResponses, GetAssemblyBoundingBoxesData, GetAssemblyBoundingBoxesResponses, GetAssemblyDefinitionData, GetAssemblyDefinitionResponses, GetAssemblyMassPropertiesData, GetAssemblyMassPropertiesResponses, GetAssemblyShadedViewsData, GetAssemblyShadedViewsResponses, GetAssociativeDataData, GetAssociativeDataResponses, GetAttachmentData, GetAttachmentResponses, GetAuditLogData, GetAuditLogResponses, GetBendTableData, GetBendTableResponses, GetBillOfMaterialsData, GetBillOfMaterialsResponses, GetBlobSubelementIdsData, GetBlobSubelementIdsResponses, GetBodyDetailsData, GetBodyDetailsResponses, GetBoundingBoxesData, GetBoundingBoxesResponses, GetByCompanyIdData, GetByCompanyIdResponses, GetByDocumentIdData, GetByDocumentIdResponses, GetCategoryPropertiesData, GetCategoryPropertiesResponses, GetClientPlansData, GetClientPlansResponses, GetCommentData, GetCommentResponses, GetCommentsData, GetCommentsResponses, GetCompanyAppSettingsData, GetCompanyAppSettingsResponses, GetCompanyData, GetCompanyResponses, GetConfigurationData, GetConfigurationResponses, GetCurrentMicroversionData, GetCurrentMicroversionResponses, GetDisplayStatesData, GetDisplayStatesResponses, GetDocumentAclData, GetDocumentAclResponses, GetDocumentContentsData, GetDocumentContentsResponses, GetDocumentData, GetDocumentHistoryData, GetDocumentHistoryResponses, GetDocumentPermissionSetData, GetDocumentPermissionSetResponses, GetDocumentResponses, GetDocumentsByNameData, GetDocumentsByNameResponses, GetDocumentsData, GetDocumentsResponses, GetDocumentThumbnailData, GetDocumentThumbnailResponses, GetDocumentThumbnailWithSizeData, GetDocumentThumbnailWithSizeResponses, GetDocumentTranslationsData, GetDocumentTranslationsResponses, GetDocumentVersionsData, GetDocumentVersionsResponses, GetDocumentWorkspacesData, GetDocumentWorkspacesResponses, GetDrawingTranslatorFormatsData, GetDrawingTranslatorFormatsResponses, GetDrawingViewJsonGeometry1Data, GetDrawingViewJsonGeometry1Responses, GetDrawingViews1Data, GetDrawingViews1Responses, GetEdgesData, GetEdgesResponses, GetElementsInDocumentData, GetElementsInDocumentResponses, GetElementThumbnailData, GetElementThumbnailResponses, GetElementThumbnailWithApiConfigurationData, GetElementThumbnailWithApiConfigurationResponses, GetElementThumbnailWithSizeData, GetElementThumbnailWithSizeResponses, GetElementTransactionsData, GetElementTransactionsResponses, GetElementTranslatorFormatsByVersionOrWorkspaceData, GetElementTranslatorFormatsByVersionOrWorkspaceResponses, GetExplodedViewsData, GetExplodedViewsResponses, GetFaces1Data, GetFaces1Responses, GetFeatureScriptRepresentationData, GetFeatureScriptRepresentationResponses, GetFeatureScriptTableData, GetFeatureScriptTableResponses, GetFeaturesData, GetFeatureSpecsData, GetFeatureSpecsResponses, GetFeaturesResponses, GetFeatureStudioContentsData, GetFeatureStudioContentsResponses, GetFeatureStudioSpecsData, GetFeatureStudioSpecsResponses, GetFolderAclData, GetFolderAclResponses, GetFullAssemblyMetadataData, GetFullAssemblyMetadataResponses, GetInsertablesData, GetInsertablesResponses, GetItemData, GetItemResponses, GetItemsData, GetItemsResponses, GetJsonData, GetJsonPathsData, GetJsonPathsResponses, GetJsonResponses, GetLatestInDocumentData, GetLatestInDocumentOrCompanyData, GetLatestInDocumentOrCompanyResponses, GetLatestInDocumentResponses, GetMassPropertiesData, GetMassPropertiesResponses, GetMateValuesData, GetMateValuesResponses, GetMembersData, GetMembersResponses, GetModificationStatusData, GetModificationStatusResponses, GetNamedPositionsData, GetNamedPositionsResponses, GetNamedViewsData, GetNamedViewsResponses, GetOpenApiData, GetOpenApiResponses, GetOrCreateBillOfMaterialsElementData, GetOrCreateBillOfMaterialsElementResponses, GetParameterValuesForIdData, GetParameterValuesForIdResponses, GetPartShadedViewsData, GetPartShadedViewsResponses, GetPartStudioBodyDetailsData, GetPartStudioBodyDetailsResponses, GetPartStudioBoundingBoxesData, GetPartStudioBoundingBoxesResponses, GetPartStudioEdgesData, GetPartStudioEdgesResponses, GetPartStudioFacesData, GetPartStudioFacesResponses, GetPartStudioFeaturesData, GetPartStudioFeatureSpecsData, GetPartStudioFeatureSpecsResponses, GetPartStudioFeaturesResponses, GetPartStudioMassPropertiesData, GetPartStudioMassPropertiesResponses, GetPartStudioNamedViewsData, GetPartStudioNamedViewsResponses, GetPartStudioShadedViewsData, GetPartStudioShadedViewsResponses, GetPartsWmvData, GetPartsWmveData, GetPartsWmveResponses, GetPartsWmvResponses, GetPlanPurchasesData, GetPlanPurchasesResponses, GetPublicationItemsData, GetPublicationItemsResponses, GetPurchasesData, GetPurchasesResponses, GetReleasePackageData, GetReleasePackageResponses, GetRevisionByPartNumberData, GetRevisionByPartNumberResponses, GetRevisionHistoryInCompanyByElementIdData, GetRevisionHistoryInCompanyByElementIdResponses, GetRevisionHistoryInCompanyByPartIdData, GetRevisionHistoryInCompanyByPartIdResponses, GetRevisionHistoryInCompanyByPartNumberData, GetRevisionHistoryInCompanyByPartNumberResponses, GetSketchBoundingBoxesData, GetSketchBoundingBoxesResponses, GetSketchInfoData, GetSketchInfoResponses, GetStandardContentListData, GetStandardContentListResponses, GetSubElementContentBatchData, GetSubElementContentBatchResponses, GetSubElementContentData, GetSubElementContentResponses, GetSubelementIdsData, GetSubelementIdsResponses, GetTableTemplateData, GetTableTemplateResponses, GetTagsData, GetTagsResponses, GetTaskData, GetTaskResponses, GetTeamData, GetTeamResponses, GetTessellatedEntitiesData, GetTessellatedEntitiesResponses, GetThumbnailForDocumentAndVersionData, GetThumbnailForDocumentAndVersionOldData, GetThumbnailForDocumentAndVersionOldResponses, GetThumbnailForDocumentAndVersionResponses, GetThumbnailForDocumentData, GetThumbnailForDocumentOldData, GetThumbnailForDocumentOldResponses, GetThumbnailForDocumentResponses, GetTranslationData, GetTranslationResponses, GetUnitInfoData, GetUnitInfoResponses, GetUserAppSettingsData, GetUserAppSettingsResponses, GetUserSettingsCurrentLoggedInUserData, GetUserSettingsCurrentLoggedInUserResponses, GetUserSettingsData, GetUserSettingsResponses, GetValidRuleOptionsData, GetValidRuleOptionsResponses, GetVariablesData, GetVariablesResponses, GetVariableStudioReferencesData, GetVariableStudioReferencesResponses, GetVariableStudioScopeData, GetVariableStudioScopeResponses, GetVeopStandardContentMetadataData, GetVeopStandardContentMetadataResponses, GetVersionData, GetVersionResponses, GetWebhookData, GetWebhookResponses, GetWebhooksData, GetWebhooksResponses, GetWmveMetadataData, GetWmveMetadataResponses, GetWmvepMetadataData, GetWmvepMetadataResponses, GetWmvepsMetadataData, GetWmvepsMetadataResponses, GetWmvesMetadataData, GetWmvesMetadataResponses, GetWorkflowByIdData, GetWorkflowByIdResponses, GetWvMetadataData, GetWvMetadataResponses, InsertTransformedInstancesData, InsertTransformedInstancesResponses, MergeIntoWorkspaceData, MergeIntoWorkspaceResponses, MergePreviewData, MergePreviewResponses, ModifyData, ModifyDrawingData, ModifyDrawingResponses, ModifyResponses, MoveElementsToDocumentData, MoveElementsToDocumentResponses, NextNumbersData, NextNumbersResponses, PingWebhookData, PingWebhookResponses, PostAssociativeDataData, PostAssociativeDataResponses, RemoveUserFromCompanyData, RemoveUserFromCompanyResponses, ReopenData, ReopenResponses, ResolveAllElementReferencesData, ResolveAllElementReferencesResponses, ResolveData, ResolveReferenceData, ResolveReferenceResponses, ResolveReferencesData, ResolveReferencesResponses, ResolveResponses, RestoreFromHistoryData, RestoreFromHistoryResponses, RevertUnchangedToRevisionsData, RevertUnchangedToRevisionsResponses, SearchData, SearchResponses, SessionData, SessionInfoData, SessionInfoResponses, SessionResponses, SetApplicationElementThumbnailData, SetApplicationElementThumbnailResponses, SetCustomParametersData, SetCustomParametersResponses, SetVariablesData, SetVariablesResponses, SetVariableStudioReferencesData, SetVariableStudioReferencesResponses, SetVariableStudioScopeData, SetVariableStudioScopeResponses, ShareData, ShareDocumentData, ShareDocumentResponses, ShareResponses, ShareWithSupportData, ShareWithSupportResponses, StartTransactionData, StartTransactionResponses, SyncAppElementsData, SyncAppElementsResponses, TransformOccurrencesData, TransformOccurrencesResponses, TransitionTaskData, TransitionTaskResponses, TranslateFormatData, TranslateFormatResponses, TranslateIdsData, TranslateIdsResponses, UnregisterWebhookData, UnregisterWebhookResponses, UnShareData, UnShareDocumentData, UnShareDocumentResponses, UnshareFromSupportData, UnshareFromSupportResponses, UnShareResponses, UpdateAliasData, UpdateAliasResponses, UpdateAnonymousAccessData, UpdateAnonymousAccessResponses, UpdateAppCompanySettingsData, UpdateAppCompanySettingsResponses, UpdateAppElementData, UpdateAppElementResponses, UpdateAppSettingsData, UpdateAppSettingsResponses, UpdateCommentData, UpdateCommentResponses, UpdateCompanyUserData, UpdateCompanyUserResponses, UpdateConfigurationData, UpdateConfigurationResponses, UpdateDocumentAttributesData, UpdateDocumentAttributesResponses, UpdateExternalReferencesToLatestDocumentsData, UpdateExternalReferencesToLatestDocumentsResponses, UpdateFeatureData, UpdateFeatureResponses, UpdateFeaturesData, UpdateFeaturesResponses, UpdateFeatureStudioContentsData, UpdateFeatureStudioContentsResponses, UpdateItemData, UpdateItemResponses, UpdateMateValuesData, UpdateMateValuesResponses, UpdateNextNumbersData, UpdateNextNumbersResponses, UpdatePartStudioFeatureData, UpdatePartStudioFeatureResponses, UpdatePublicAccessData, UpdatePublicAccessResponses, UpdatePublicationAttributesData, UpdatePublicationAttributesResponses, UpdateReferenceData, UpdateReferenceResponses, UpdateReferencesData, UpdateReferencesResponses, UpdateReleasePackageData, UpdateReleasePackageResponses, UpdateRollbackData, UpdateRollbackResponses, UpdateTaskData, UpdateTaskResponses, UpdateUnitsData, UpdateUnitsResponses, UpdateVeopStandardContentPartMetadataData, UpdateVeopStandardContentPartMetadataResponses, UpdateWebhookData, UpdateWebhookResponses, UpdateWveMetadataData, UpdateWveMetadataResponses, UpdateWvepMetadataData, UpdateWvepMetadataResponses, UpdateWvMetadataData, UpdateWvMetadataResponses, UploadBlobSubelementData, UploadBlobSubelementResponses, UploadFileCreateElementData, UploadFileCreateElementResponses, UploadFileUpdateElementData, UploadFileUpdateElementResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get a list of all app purchases made for the specified plan.
 */
export const getPlanPurchases = <ThrowOnError extends boolean = false>(options: Options<GetPlanPurchasesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPlanPurchasesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/accounts/plans/{planId}/purchases',
        ...options
    });
};

/**
 * Get a list of all app purchases made by the current user.
 *
 * This API should be used within the context of an OAuth-enabled application.
 */
export const getPurchases = <ThrowOnError extends boolean = false>(options?: Options<GetPurchasesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPurchasesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/accounts/purchases',
        ...options
    });
};

/**
 * Mark a purchase as consumed by the current user.
 */
export const consumePurchase = <ThrowOnError extends boolean = false>(options: Options<ConsumePurchaseData, ThrowOnError>) => {
    return (options.client ?? client).post<ConsumePurchaseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/accounts/purchases/{pid}/consume',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Cancel a recurring subscription for the specified account ID and purchase ID.
 */
export const cancelPurchaseNew = <ThrowOnError extends boolean = false>(options: Options<CancelPurchaseNewData, ThrowOnError>) => {
    return (options.client ?? client).delete<CancelPurchaseNewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/accounts/{aid}/purchases/{pid}',
        ...options
    });
};

/**
 * Get a list of all aliases that exist for your enterprise.
 */
export const getAliasesInCompany = <ThrowOnError extends boolean = false>(options?: Options<GetAliasesInCompanyData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAliasesInCompanyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/aliases',
        ...options
    });
};

/**
 * Create an alias in your enterprise.
 *
 * `Manage users and teams` global permission is required to call this API.
 */
export const createAlias = <ThrowOnError extends boolean = false>(options: Options<CreateAliasData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAliasResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/aliases',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete an alias from your enterprise.
 *
 * `Manage users and teams` global permission is required to call this API.
 */
export const deleteAlias = <ThrowOnError extends boolean = false>(options: Options<DeleteAliasData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAliasResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/aliases/{aid}',
        ...options
    });
};

/**
 * Get an alias by ID.
 *
 * Get the information for an alias ID.
 */
export const getAlias = <ThrowOnError extends boolean = false>(options: Options<GetAliasData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAliasResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/aliases/{aid}',
        ...options
    });
};

/**
 * Add, remove, replace, or rename entries in an alias list.
 *
 * `Manage users and teams` global permission is required to call this API.
 * * Add new users in the `additions` array.
 * * Remove existing users in the `removals` array. Attempts to remove a user that does not exist in the Alias list will have no effect.
 * * Replace the entire Alias list with the `entries` array.
 * * You can also update the alias' `name` and `description`.
 * For example, given an Alias with members userA and userB:
 * * `additions: [userC]` results in [userA, userB, userC]
 * * `removals: [userB]` results in [userA]
 * * `entries: [userC, user D]` results in [userC, userD]
 */
export const updateAlias = <ThrowOnError extends boolean = false>(options: Options<UpdateAliasData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateAliasResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/aliases/{aid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get all users and teams assigned to an alias.
 *
 * This is a search-like endpoint that returns a subset of the member list. Use `getAlias` to return all members every time it's called.
 */
export const getAliasMembers = <ThrowOnError extends boolean = false>(options: Options<GetAliasMembersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAliasMembersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/aliases/{aid}/members',
        ...options
    });
};

/**
 * Create a new application element.
 */
export const createElement = <ThrowOnError extends boolean = false>(options: Options<CreateElementData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateElementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Create multiple empty application elements at once.
 *
 * Call this faster API instead of creating multiple app elements one at a time or in parallel.
 */
export const bulkCreateElement = <ThrowOnError extends boolean = false>(options: Options<BulkCreateElementData, ThrowOnError>) => {
    return (options.client ?? client).post<BulkCreateElementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/bulkcreate',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete a blob subelement from an app element.
 */
export const deleteBlobSubelement = <ThrowOnError extends boolean = false>(options: Options<DeleteBlobSubelementData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteBlobSubelementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}',
        ...options
    });
};

/**
 * Download the blob element (i.e., a file) stored in an app element in a document's workspace.
 *
 * The downloaded file can be used to retrieve stored subelements.
 */
export const downloadBlobSubelementWorkspace = <ThrowOnError extends boolean = false>(options: Options<DownloadBlobSubelementWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadBlobSubelementWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}',
        ...options
    });
};

/**
 * Create a new blob subelement from an uploaded file.
 *
 * Request body parameters are multipart fields, so you must use `"Content-Type":"multipart/form-data"` in the request header.
 */
export const uploadBlobSubelement = <ThrowOnError extends boolean = false>(options: Options<UploadBlobSubelementData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadBlobSubelementResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/blob/{bid}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Copy associative data from one view to another.
 *
 * Can only be copied between tabs in the same document. You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
 */
export const copyAssociativeData = <ThrowOnError extends boolean = false>(options: Options<CopyAssociativeDataData, ThrowOnError>) => {
    return (options.client ?? client).post<CopyAssociativeDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/copyassociativedata',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of all transactions performed on an element.
 */
export const getElementTransactions = <ThrowOnError extends boolean = false>(options: Options<GetElementTransactionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetElementTransactionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/transactions',
        ...options
    });
};

/**
 * Start a transaction
 *
 * Creates a microbranch (i.e., a branch for a new microversion).
 */
export const startTransaction = <ThrowOnError extends boolean = false>(options: Options<StartTransactionData, ThrowOnError>) => {
    return (options.client ?? client).post<StartTransactionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Abort a transaction.
 *
 * Deletes a microbranch (i.e., the branch with the microversion for the transaction).
 */
export const abortTransaction = <ThrowOnError extends boolean = false>(options: Options<AbortTransactionData, ThrowOnError>) => {
    return (options.client ?? client).delete<AbortTransactionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/e/{eid}/transactions/{tid}',
        ...options
    });
};

/**
 * Merge multiple transactions into one microversion.
 *
 * If successful, all transactions will be committed to a single microversion. If the call raises an error, nothing will be committed.
 */
export const commitTransactions = <ThrowOnError extends boolean = false>(options: Options<CommitTransactionsData, ThrowOnError>) => {
    return (options.client ?? client).post<CommitTransactionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/w/{wid}/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Download a blob subelement from the specified app element.
 *
 * Download a blob subelement as a file.
 */
export const downloadBlobSubelement = <ThrowOnError extends boolean = false>(options: Options<DownloadBlobSubelementData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadBlobSubelementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{vm}/{vmid}/e/{eid}/blob/{bid}',
        ...options
    });
};

/**
 * Delete the associative data from the specified app element.
 *
 * You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
 */
export const deleteAssociativeData = <ThrowOnError extends boolean = false>(options: Options<DeleteAssociativeDataData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAssociativeDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata',
        ...options
    });
};

/**
 * Get the associative data for the specified app element.
 *
 * You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
 */
export const getAssociativeData = <ThrowOnError extends boolean = false>(options: Options<GetAssociativeDataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAssociativeDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata',
        ...options
    });
};

/**
 * Set the associative data for the specified app element.
 *
 * You can manage associativity with [translateIds](https://cad.onshape.com/glassworks/explorer/#/PartStudio/translateIds).
 */
export const postAssociativeData = <ThrowOnError extends boolean = false>(options: Options<PostAssociativeDataData, ThrowOnError>) => {
    return (options.client ?? client).post<PostAssociativeDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/associativedata',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of all blob subelement IDs for the specified workspace, version, or microversion.
 */
export const getBlobSubelementIds = <ThrowOnError extends boolean = false>(options: Options<GetBlobSubelementIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBlobSubelementIdsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/blob',
        ...options
    });
};

/**
 * Compare app element JSON trees between workspaces/versions/microversions in a document.
 *
 * Specify the source workspace/version/microversion in the URL and specify the target workspace/version/microversion in the query parameters.
 */
export const compareAppElementJson = <ThrowOnError extends boolean = false>(options: Options<CompareAppElementJsonData, ThrowOnError>) => {
    return (options.client ?? client).get<CompareAppElementJsonResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/compare',
        ...options
    });
};

/**
 * Get a list of all subelement IDs in a specified workspace/version/microversion.
 */
export const getSubElementContent = <ThrowOnError extends boolean = false>(options: Options<GetSubElementContentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSubElementContentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content',
        ...options
    });
};

/**
 * Update the content for the specified app element.
 */
export const updateAppElement = <ThrowOnError extends boolean = false>(options: Options<UpdateAppElementData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateAppElementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the history of the specified all element.
 */
export const getAppElementHistory = <ThrowOnError extends boolean = false>(options: Options<GetAppElementHistoryData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAppElementHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/history',
        ...options
    });
};

/**
 * Get a list of all subelement IDs in a specified workspace/version/microversion.
 */
export const getSubelementIds = <ThrowOnError extends boolean = false>(options: Options<GetSubelementIdsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSubelementIdsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/ids',
        ...options
    });
};

/**
 * Get the full JSON tree for the specified workspace/version/microversion.
 */
export const getJson = <ThrowOnError extends boolean = false>(options: Options<GetJsonData, ThrowOnError>) => {
    return (options.client ?? client).get<GetJsonResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/json',
        ...options
    });
};

/**
 * Get the JSON at specified paths for an element.
 *
 * Use this endpoint to return the JSON at the specified path instead of returning the entire JSON for the element. This POST endpoint does not write any information.
 */
export const getJsonPaths = <ThrowOnError extends boolean = false>(options: Options<GetJsonPathsData, ThrowOnError>) => {
    return (options.client ?? client).post<GetJsonPathsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/jsonpaths',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete multiple subelements array by document ID, workspace or version or microversion ID, tab ID, and subelement IDs.
 */
export const deleteAppElementContentBatch = <ThrowOnError extends boolean = false>(options: Options<DeleteAppElementContentBatchData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAppElementContentBatchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements',
        ...options
    });
};

/**
 * Get a list of multiple subelements by document ID, workspace or version or microversion ID, tab ID, and subelement IDs.
 */
export const getSubElementContentBatch = <ThrowOnError extends boolean = false>(options: Options<GetSubElementContentBatchData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSubElementContentBatchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements',
        ...options
    });
};

/**
 * Deletes the content from the specified app element.
 */
export const deleteAppElementContent = <ThrowOnError extends boolean = false>(options: Options<DeleteAppElementContentData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAppElementContentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/content/subelements/{sid}',
        ...options
    });
};

/**
 * Creates a reference to an app element.
 */
export const createReference = <ThrowOnError extends boolean = false>(options: Options<CreateReferenceData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateReferenceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete an app element reference.
 */
export const deleteReference = <ThrowOnError extends boolean = false>(options: Options<DeleteReferenceData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteReferenceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}',
        ...options
    });
};

/**
 * Resolves a single reference to an app element.
 *
 * For single operations only. Use `resolveReferences` for bulk operations.
 */
export const resolveReference = <ThrowOnError extends boolean = false>(options: Options<ResolveReferenceData, ThrowOnError>) => {
    return (options.client ?? client).get<ResolveReferenceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}',
        ...options
    });
};

/**
 * Update an app element reference.
 */
export const updateReference = <ThrowOnError extends boolean = false>(options: Options<UpdateReferenceData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateReferenceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/references/{rid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Resolves bulk app element references.
 *
 * For bulk operations only. Use `resolveReference` for a single operation.
 */
export const resolveReferences = <ThrowOnError extends boolean = false>(options: Options<ResolveReferencesData, ThrowOnError>) => {
    return (options.client ?? client).get<ResolveReferencesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/e/{eid}/resolvereferences',
        ...options
    });
};

/**
 * Resolves bulk app element references.
 *
 * Resolve all references for all workspace elements. For bulk operations  only. Use `resolveReferences` for a single element.
 */
export const resolveAllElementReferences = <ThrowOnError extends boolean = false>(options: Options<ResolveAllElementReferencesData, ThrowOnError>) => {
    return (options.client ?? client).get<ResolveAllElementReferencesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/appelements/d/{did}/{wvm}/{wvmid}/resolvereferences',
        ...options
    });
};

/**
 * Delete a company's application preference settings.
 *
 * This API is only usable with an OAuth token and only by the current user or admin.
 */
export const deleteCompanyAppSettings = <ThrowOnError extends boolean = false>(options: Options<DeleteCompanyAppSettingsData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCompanyAppSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/clients/{cid}/settings/companies/{cpid}',
        ...options
    });
};

/**
 * Get company-level preference settings for an application.
 *
 * This API is only usable with an OAuth token and only by the current user or admin.
 */
export const getCompanyAppSettings = <ThrowOnError extends boolean = false>(options: Options<GetCompanyAppSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCompanyAppSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/clients/{cid}/settings/companies/{cpid}',
        ...options
    });
};

/**
 * Update company preference settings for an application.
 *
 * This API is only usable with an OAuth token and only by the current user or admin.
 * * Add or update a setting identified by key with value.
 * * Operation and field may optionally be specified when updating Map type settings.
 * * Field specifies the key of the setting Map to update.
 * * Operation may be one of:
 * * `ADD`: Add or update an existing field of the settings Map.
 * * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.
 * * `REMOVE`: Remove the field from the settings Map.
 *
 */
export const updateAppCompanySettings = <ThrowOnError extends boolean = false>(options: Options<UpdateAppCompanySettingsData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateAppCompanySettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/clients/{cid}/settings/companies/{cpid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete a user's application preference settings.
 *
 * This API is only usable with an OAuth token and only by the current user or admin.
 */
export const deleteAppSettings = <ThrowOnError extends boolean = false>(options: Options<DeleteAppSettingsData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAppSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/clients/{cid}/settings/users/{uid}',
        ...options
    });
};

/**
 * Get user-level preference settings for an application.
 *
 * This API is only usable with an OAuth token and only by the current user or admin.
 */
export const getUserAppSettings = <ThrowOnError extends boolean = false>(options: Options<GetUserAppSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserAppSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/clients/{cid}/settings/users/{uid}',
        ...options
    });
};

/**
 * Update a user's application preference settings.
 *
 * This API is only usable with an OAuth token and only by the current user or admin.
 * * Add or update a setting identified by key with value.
 * * Operation and field may optionally be specified when updating Map type settings.
 * * Field specifies the key of the setting Map to update.
 * * Operation may be one of:
 * * `ADD`: Add or update an existing field of the settings Map.
 * * `UPDATE`: Update an existing field of the settings Map and return an error if the field does not exist.
 * * `REMOVE`: Remove the field from the settings Map.
 *
 */
export const updateAppSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateAppSettingsData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateAppSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/clients/{cid}/settings/users/{uid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of the client extensions the specified user has granted/accepted terms for.
 */
export const getApplicableExtensionsForClient = <ThrowOnError extends boolean = false>(options: Options<GetApplicableExtensionsForClientData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApplicableExtensionsForClientResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/applications/extensions/user/{uid}/client/{cid}',
        ...options
    });
};

/**
 * Get the view data for all named views for the specified element.
 */
export const getNamedViews = <ThrowOnError extends boolean = false>(options: Options<GetNamedViewsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetNamedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/e/{eid}/namedViews',
        ...options
    });
};

/**
 * Create a new assembly tab in the document.
 */
export const createAssembly = <ThrowOnError extends boolean = false>(options: Options<CreateAssemblyData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAssemblyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Gets the Bill Of Materials (BOM) for the specified assembly, or creates a BOM if none exist.
 */
export const getOrCreateBillOfMaterialsElement = <ThrowOnError extends boolean = false>(options: Options<GetOrCreateBillOfMaterialsElementData, ThrowOnError>) => {
    return (options.client ?? client).post<GetOrCreateBillOfMaterialsElementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/bomelement',
        ...options
    });
};

/**
 * Delete a feature from an assembly.
 */
export const deleteFeature = <ThrowOnError extends boolean = false>(options: Options<DeleteFeatureData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteFeatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}',
        ...options
    });
};

/**
 * Update an existing feature for an Assembly.
 */
export const updateFeature = <ThrowOnError extends boolean = false>(options: Options<UpdateFeatureData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateFeatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete an instance of an assembly.
 */
export const deleteInstance = <ThrowOnError extends boolean = false>(options: Options<DeleteInstanceData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteInstanceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/instance/nodeid/{nid}',
        ...options
    });
};

/**
 * Insert an instance of a part, sketch, assembly, or Part Studio into an assembly.
 *
 * Part Studio instances may include multiple parts.
 */
export const createInstance = <ThrowOnError extends boolean = false>(options: Options<CreateInstanceData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateInstanceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/instances',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Update mate values for the given mates in the specified assembly.
 *
 * * The input mates must support motion along the provided input degrees of freedom; otherwise, the input mate value will be ignored.
 * * Values associated with multiple allowed degrees of freedom for a mate can be updated simultaneously.
 * * Values associated with multiple mate features can be updated simultaneously.
 */
export const updateMateValues = <ThrowOnError extends boolean = false>(options: Options<UpdateMateValuesData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateMateValuesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/matevalues',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Modify an assembly.
 *
 * This endpoint can include multiple modifications to an assembly with one change. For example, it can delete/suppress/unsuppress/transform multiple instances. It creates one history entry in the document history list.
 */
export const modify = <ThrowOnError extends boolean = false>(options: Options<ModifyData, ThrowOnError>) => {
    return (options.client ?? client).post<ModifyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/modify',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Transform a list of assembly occurrences.
 */
export const transformOccurrences = <ThrowOnError extends boolean = false>(options: Options<TransformOccurrencesData, ThrowOnError>) => {
    return (options.client ?? client).post<TransformOccurrencesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/occurrencetransforms',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Create new instances with transformation.
 */
export const insertTransformedInstances = <ThrowOnError extends boolean = false>(options: Options<InsertTransformedInstancesData, ThrowOnError>) => {
    return (options.client ?? client).post<InsertTransformedInstancesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/w/{wid}/e/{eid}/transformedinstances',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get definition information for the specified assembly.
 *
 * All coordinates and translation matrix components are in meters (m).
 */
export const getAssemblyDefinition = <ThrowOnError extends boolean = false>(options: Options<GetAssemblyDefinitionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAssemblyDefinitionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}',
        ...options
    });
};

/**
 * Get the Bill Of Materials (BOM) content for the specified assembly.
 *
 * Returns the BOM in JSON in the Onshape BOM Standard format.
 */
export const getBillOfMaterials = <ThrowOnError extends boolean = false>(options: Options<GetBillOfMaterialsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBillOfMaterialsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/bom',
        ...options
    });
};

/**
 * Get bounding box information for the specified assembly.
 */
export const getAssemblyBoundingBoxes = <ThrowOnError extends boolean = false>(options: Options<GetAssemblyBoundingBoxesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAssemblyBoundingBoxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes',
        ...options
    });
};

/**
 * Get a list of display states for the specified assembly.
 */
export const getDisplayStates = <ThrowOnError extends boolean = false>(options: Options<GetDisplayStatesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDisplayStatesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/displaystates',
        ...options
    });
};

/**
 * Get a list of exploded views for the specified assembly.
 */
export const getExplodedViews = <ThrowOnError extends boolean = false>(options: Options<GetExplodedViewsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetExplodedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/explodedviews',
        ...options
    });
};

/**
 * Get the definitions of the specified features in an assembly.
 */
export const getFeatures = <ThrowOnError extends boolean = false>(options: Options<GetFeaturesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFeaturesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features',
        ...options
    });
};

/**
 * Add a feature to the assembly feature list.
 */
export const addFeature = <ThrowOnError extends boolean = false>(options: Options<AddFeatureData, ThrowOnError>) => {
    return (options.client ?? client).post<AddFeatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/features',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the feature spec definitions for an assembly.
 */
export const getFeatureSpecs = <ThrowOnError extends boolean = false>(options: Options<GetFeatureSpecsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFeatureSpecsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs',
        ...options
    });
};

/**
 * Get the mass properties for the assembly.
 *
 * The assembly must contain parts that have density. The returned schema includes the same information as in the Onshape [Mass Properties Tool](https://cad.onshape.com/help/Content/massprops-asmb.htm).
 * When three values are returned:
 * * The first is the calculated value.
 * * The second is the minimum possible value, considering tolerance.
 * * The third is the maximum possible value, considering tolerance.
 */
export const getAssemblyMassProperties = <ThrowOnError extends boolean = false>(options: Options<GetAssemblyMassPropertiesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAssemblyMassPropertiesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties',
        ...options
    });
};

/**
 * Get a list of all named positions for the assembly.
 */
export const getNamedPositions = <ThrowOnError extends boolean = false>(options: Options<GetNamedPositionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetNamedPositionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/namedpositions',
        ...options
    });
};

/**
 * Get an array of shaded view images for the document.
 */
export const getAssemblyShadedViews = <ThrowOnError extends boolean = false>(options: Options<GetAssemblyShadedViewsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAssemblyShadedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews',
        ...options
    });
};

/**
 * Export the assembly to glTF.
 *
 * Creates an asynchronous export of the assembly. See [API Guide: Import & Export](https://onshape-public.github.io/docs/api-adv/translation/#export-an-assembly-to-gltf-obj-solidworks-or-step) for details.
 */
export const createAssemblyExportGltf = <ThrowOnError extends boolean = false>(options: Options<CreateAssemblyExportGltfData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAssemblyExportGltfResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/gltf',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Export the assembly to OBJ.
 *
 * Creates an asynchronous export of the assembly. See [API Guide: Import & Export](https://onshape-public.github.io/docs/api-adv/translation/#export-an-assembly-to-gltf-obj-solidworks-or-step) for details.
 */
export const createAssemblyExportObj = <ThrowOnError extends boolean = false>(options: Options<CreateAssemblyExportObjData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAssemblyExportObjResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/obj',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Export the assembly to Solidworks.
 *
 * Creates an asynchronous export of the assembly. See [API Guide: Import & Export](https://onshape-public.github.io/docs/api-adv/translation/#export-an-assembly-to-gltf-obj-solidworks-or-step) for details.
 */
export const createAssemblyExportSolidworks = <ThrowOnError extends boolean = false>(options: Options<CreateAssemblyExportSolidworksData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAssemblyExportSolidworksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/solidworks',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Export the assembly to STEP.
 *
 * Creates an asynchronous export of the assembly. See [API Guide: Import & Export](https://onshape-public.github.io/docs/api-adv/translation/#export-an-assembly-to-gltf-obj-solidworks-or-step) for details.
 */
export const createAssemblyExportStep = <ThrowOnError extends boolean = false>(options: Options<CreateAssemblyExportStepData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateAssemblyExportStepResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/export/step',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of mate values in the specified assembly.
 *
 * Describes the relative position of the first mate connector with respect to the second along the designated degrees of freedom (DOF) for mates in the specified assembly.
 */
export const getMateValues = <ThrowOnError extends boolean = false>(options: Options<GetMateValuesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetMateValuesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/matevalues',
        ...options
    });
};

/**
 * Export the assembly to another format.
 *
 * Creates an asynchronous export. Use format-specific export endpoints where available.
 * * Use `formatName` in the JSON request body to specify the export file type. Use [Translations/getAllTranslatorFormats](#/Translation/getAllTranslatorFormats) to get a list of valid export file formats. Confirm that `couldBeAssembly=true.`
 * * Set `storeInDocument` to `false` to export to a data file. Set to `true` to export to a blob element in the same document.
 * * See [API Guide: Import & Export ](https://onshape-public.github.io/docs/api-adv/translation/#export-an-assembly-to-another-format) for more details.
 */
export const translateFormat = <ThrowOnError extends boolean = false>(options: Options<TranslateFormatData, ThrowOnError>) => {
    return (options.client ?? client).post<TranslateFormatResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/assemblies/d/{did}/{wv}/{wvid}/e/{eid}/translations',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get all billing plans and their information for an application by client ID.
 *
 * This API should be used within the context of an OAuth-enabled application.
 */
export const getClientPlans = <ThrowOnError extends boolean = false>(options: Options<GetClientPlansData, ThrowOnError>) => {
    return (options.client ?? client).get<GetClientPlansResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/billing/plans/client/{cid}',
        ...options
    });
};

/**
 * Upload a file and create a blob element from it.
 *
 * Request body parameters are multipart fields, so you must use `"Content-Type":"multipart/form-data"` in the request header.
 */
export const uploadFileCreateElement = <ThrowOnError extends boolean = false>(options: Options<UploadFileCreateElementData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadFileCreateElementResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/blobelements/d/{did}/w/{wid}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Download a file from a blob element for the specified workspace/version/microversion.
 *
 * See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
 */
export const downloadFileWorkspace = <ThrowOnError extends boolean = false>(options: Options<DownloadFileWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadFileWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/blobelements/d/{did}/w/{wid}/e/{eid}',
        ...options
    });
};

/**
 * Update a blob element by uploading a file.
 *
 * Request body parameters are multipart fields, so you must use `"Content-Type":"multipart/form-data"` in the request header.
 */
export const uploadFileUpdateElement = <ThrowOnError extends boolean = false>(options: Options<UploadFileUpdateElementData, ThrowOnError>) => {
    return (options.client ?? client).post<UploadFileUpdateElementResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/blobelements/d/{did}/w/{wid}/e/{eid}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Change the measurement units for the blob element.
 */
export const updateUnits = <ThrowOnError extends boolean = false>(options: Options<UpdateUnitsData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateUnitsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/blobelements/d/{did}/w/{wid}/e/{eid}/units',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Export a blob element to another format.
 *
 * * Use `formatName` in the JSON request body to specify the export file type. Use [Translations/getAllTranslatorFormats]#/Translation/getAllTranslatorFormats) to get a list of valid export file formats.
 * * Set `storeInDocument` to `false` to export to a data file. Set to `true` to export to a blob element in the same document.
 * * See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
 */
export const createBlobTranslation = <ThrowOnError extends boolean = false>(options: Options<CreateBlobTranslationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateBlobTranslationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/blobelements/d/{did}/{wv}/{wvid}/e/{eid}/translations',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of comments in a document.
 */
export const getComments = <ThrowOnError extends boolean = false>(options?: Options<GetCommentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCommentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments',
        ...options
    });
};

/**
 * Update a document with a new comment.
 */
export const createComment = <ThrowOnError extends boolean = false>(options: Options<CreateCommentData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete a comment from a document.
 */
export const deleteComment = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}',
        ...options
    });
};

/**
 * Get details for a comment.
 */
export const getComment = <ThrowOnError extends boolean = false>(options: Options<GetCommentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}',
        ...options
    });
};

/**
 * Update the content of an existing comment.
 */
export const updateComment = <ThrowOnError extends boolean = false>(options: Options<UpdateCommentData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateCommentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete all attachments from a comment.
 */
export const deleteAttachments = <ThrowOnError extends boolean = false>(options: Options<DeleteAttachmentsData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAttachmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}/attachment',
        ...options
    });
};

/**
 * Add an attachment to a comment.
 */
export const addAttachment = <ThrowOnError extends boolean = false>(options: Options<AddAttachmentData, ThrowOnError>) => {
    return (options.client ?? client).post<AddAttachmentResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}/attachment',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get the attachment with the specified file extension that is associated with the specified comment.
 *
 * Returns only a single attachment.
 */
export const getAttachment = <ThrowOnError extends boolean = false>(options: Options<GetAttachmentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAttachmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}/attachment/{fdid}.{ext}',
        ...options
    });
};

/**
 * Reopen a resolved comment.
 */
export const reopen = <ThrowOnError extends boolean = false>(options: Options<ReopenData, ThrowOnError>) => {
    return (options.client ?? client).post<ReopenResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}/reopen',
        ...options
    });
};

/**
 * Resolve a comment.
 */
export const resolve = <ThrowOnError extends boolean = false>(options: Options<ResolveData, ThrowOnError>) => {
    return (options.client ?? client).post<ResolveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/comments/{cid}/resolve',
        ...options
    });
};

/**
 * Get all companies to which the specified user belongs.
 *
 * If no user is specified, will return all companies associated with the current user.
 */
export const findCompany = <ThrowOnError extends boolean = false>(options?: Options<FindCompanyData, ThrowOnError>) => {
    return (options?.client ?? client).get<FindCompanyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies',
        ...options
    });
};

/**
 * Get company information by company ID.
 */
export const getCompany = <ThrowOnError extends boolean = false>(options: Options<GetCompanyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCompanyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}',
        ...options
    });
};

/**
 * Get document by exact document name.
 *
 * This API can only be called by company admins. Use the `name` field for the exact document name string.
 */
export const getDocumentsByName = <ThrowOnError extends boolean = false>(options: Options<GetDocumentsByNameData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentsByNameResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}/documentsbyname',
        ...options
    });
};

/**
 * Remove global permissions for a company user or team.
 *
 * Clear all or some of a user's global permissions
 */
export const clearGlobalPermissions = <ThrowOnError extends boolean = false>(options: Options<ClearGlobalPermissionsData, ThrowOnError>) => {
    return (options.client ?? client).delete<ClearGlobalPermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}/globalpermission/{type}/{id}',
        ...options
    });
};

/**
 * Add one or more global permissions to company user or team.
 *
 * List of global permissions to grant. See [Onshape Help: Global Permissions](https://cad.onshape.com/help/Content/Plans/global_permissions.htm#Assignin) for details on each of the available permissions.
 * * `0`: Manage role based access control
 * * `1`: Manage users, teams, and aliases
 * * `2`: Enterprise administrator
 * * `3`: Permanently delete
 * * `4`: Analytics administrator
 * * `5`: Invite guest users
 * * `6`: Create projects
 * * `7`: Approve releases
 * * `8`: Enable link sharing
 * * `9`: Create releases
 * * `10`: Allow access to the App Store
 * * `11`: Create documents and folders in the Enterprise root
 * * `12`: Allow access to public documents
 * * `17`: Manage non-geometric items
 * * `18`: Manage workflows
 * * `19`: Transfer documents out of Enterprise
 * * `20`: Sync to Arena
 * * `21`: Create tasks
 * * `22`: Manage standard content metadata
 * * `23`: Workspace protection permissions
 * * `24`: Import files
 * * `25`: Use revision tools  * `26`: Export files
 *
 */
export const addGlobalPermissionsForIdentity = <ThrowOnError extends boolean = false>(options: Options<AddGlobalPermissionsForIdentityData, ThrowOnError>) => {
    return (options.client ?? client).post<AddGlobalPermissionsForIdentityResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}/globalpermission/{type}/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Add a user to a company.
 *
 * Returns the company user info.
 */
export const addUserToCompany = <ThrowOnError extends boolean = false>(options: Options<AddUserToCompanyData, ThrowOnError>) => {
    return (options.client ?? client).post<AddUserToCompanyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Remove a user from a company, company teams, and all the direct shares.
 */
export const removeUserFromCompany = <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromCompanyData, ThrowOnError>) => {
    return (options.client ?? client).delete<RemoveUserFromCompanyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}/users/{uid}',
        ...options
    });
};

/**
 * Update the company's information for a user.
 *
 * Returns updated company user info. `globalPermissions` field is deprecated. Please use the following:
 * * [addGlobalPermissionsForIdentity](#/Company/addGlobalPermissionsForIdentity)
 * * [clearGlobalPermissions](#/Company/clearGlobalPermissions)
 */
export const updateCompanyUser = <ThrowOnError extends boolean = false>(options: Options<UpdateCompanyUserData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateCompanyUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/companies/{cid}/users/{uid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of documents that meet the criteria you specify.
 */
export const getDocuments = <ThrowOnError extends boolean = false>(options?: Options<GetDocumentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDocumentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents',
        ...options
    });
};

/**
 * Create and upload a document.
 *
 * The `name` field is required in the `BTDocumentParams` schema when creating a new document.
 */
export const createDocument = <ThrowOnError extends boolean = false>(options: Options<CreateDocumentData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Download external data file(s) associated with the document.
 *
 * * See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
 * * If downloading an exported file, poll the `requestState` in the translation response and wait for a result of `DONE` before attempting to download the file.
 * * Use the `resultExternalDataIds` from the translation response as the foreign id (`{fid}`) in this API.
 */
export const downloadExternalData = <ThrowOnError extends boolean = false>(options: Options<DownloadExternalDataData, ThrowOnError>) => {
    return (options.client ?? client).get<DownloadExternalDataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/externaldata/{fid}',
        ...options
    });
};

/**
 * Retrieve versions by document ID.
 */
export const getDocumentVersions = <ThrowOnError extends boolean = false>(options: Options<GetDocumentVersionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentVersionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/versions',
        ...options
    });
};

/**
 * Create version by document ID.
 */
export const createVersion = <ThrowOnError extends boolean = false>(options: Options<CreateVersionData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateVersionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/versions',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Retrieve version by document ID and version ID.
 */
export const getVersion = <ThrowOnError extends boolean = false>(options: Options<GetVersionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVersionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/versions/{vid}',
        ...options
    });
};

/**
 * Update external references to latest by document ID, workspace ID, and tab ID.
 */
export const updateExternalReferencesToLatestDocuments = <ThrowOnError extends boolean = false>(options: Options<UpdateExternalReferencesToLatestDocumentsData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateExternalReferencesToLatestDocumentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/w/{wid}/e/{eid}/latestdocumentreferences',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Move tab by document ID and workspace ID.
 */
export const moveElementsToDocument = <ThrowOnError extends boolean = false>(options: Options<MoveElementsToDocumentData, ThrowOnError>) => {
    return (options.client ?? client).post<MoveElementsToDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/w/{wid}/moveelement',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

export const revertUnchangedToRevisions = <ThrowOnError extends boolean = false>(options: Options<RevertUnchangedToRevisionsData, ThrowOnError>) => {
    return (options.client ?? client).post<RevertUnchangedToRevisionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/w/{wid}/revertunchangedtorevisions',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

export const syncAppElements = <ThrowOnError extends boolean = false>(options: Options<SyncAppElementsData, ThrowOnError>) => {
    return (options.client ?? client).post<SyncAppElementsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/w/{wid}/syncAppElements',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Retrieve workspaces by document ID.
 */
export const getDocumentWorkspaces = <ThrowOnError extends boolean = false>(options: Options<GetDocumentWorkspacesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentWorkspacesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/workspaces',
        ...options
    });
};

/**
 * Create workspace by document ID.
 */
export const createWorkspace = <ThrowOnError extends boolean = false>(options: Options<CreateWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/workspaces',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete workspace by document ID and workspace ID.
 */
export const deleteWorkspace = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/workspaces/{wid}',
        ...options
    });
};

/**
 * Retrieve document history by document ID and workspace or microversion ID.
 */
export const getDocumentHistory = <ThrowOnError extends boolean = false>(options: Options<GetDocumentHistoryData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wm}/{wmid}/documenthistory',
        ...options
    });
};

/**
 * Retrieve tabs and folders by document ID and workspace or version or microversion ID.
 *
 * Returns information on tabs and folders in the document.
 */
export const getDocumentContents = <ThrowOnError extends boolean = false>(options: Options<GetDocumentContentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentContentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wvm}/{wvmid}/contents',
        ...options
    });
};

/**
 * Retrieve tabs by document ID and workspace or version or microversion ID.
 *
 * This endpoint only returns the tabs and not folders in the document. Use the [getDocumentContents](#/Document/getDocumentContents) endpoint to get information about folders and tabs.
 */
export const getElementsInDocument = <ThrowOnError extends boolean = false>(options: Options<GetElementsInDocumentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetElementsInDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wvm}/{wvmid}/elements',
        ...options
    });
};

/**
 * Get the selected units and precision by document ID and workspace or version or microversion ID.
 */
export const getUnitInfo = <ThrowOnError extends boolean = false>(options: Options<GetUnitInfoData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUnitInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wvm}/{wvmid}/unitinfo',
        ...options
    });
};

/**
 * Retrieve current microversion by document ID and workspace or version ID.
 */
export const getCurrentMicroversion = <ThrowOnError extends boolean = false>(options: Options<GetCurrentMicroversionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCurrentMicroversionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wv}/{wvid}/currentmicroversion',
        ...options
    });
};

/**
 * Export document by document ID, workspace or version ID, and tab ID.
 */
export const export2Json = <ThrowOnError extends boolean = false>(options: Options<Export2JsonData, ThrowOnError>) => {
    return (options.client ?? client).post<Export2JsonResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wv}/{wvid}/e/{eid}/export',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Retrieve insertables by document ID and workspace or version ID.
 */
export const getInsertables = <ThrowOnError extends boolean = false>(options: Options<GetInsertablesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInsertablesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/d/{did}/{wv}/{wvid}/insertables',
        ...options
    });
};

/**
 * Search document.
 *
 * This returns list of documents based on search parameters.
 */
export const search = <ThrowOnError extends boolean = false>(options: Options<SearchData, ThrowOnError>) => {
    return (options.client ?? client).post<SearchResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/search',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete document by document ID.
 */
export const deleteDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}',
        ...options
    });
};

/**
 * Retrieve document by document ID.
 */
export const getDocument = <ThrowOnError extends boolean = false>(options: Options<GetDocumentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}',
        ...options
    });
};

/**
 * Update document attributes by document ID.
 */
export const updateDocumentAttributes = <ThrowOnError extends boolean = false>(options: Options<UpdateDocumentAttributesData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateDocumentAttributesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Retrieve access control list by document ID.
 */
export const getDocumentAcl = <ThrowOnError extends boolean = false>(options: Options<GetDocumentAclData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentAclResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/acl',
        ...options
    });
};

/**
 * Allow or deny anonymous access to a document or publication.
 *
 * If anonymous access is allowed, you can allow or deny anonymous users the ability to export the document or publication. If `anonymousAccessAllowed=false` and `anonymousAllowsExport=true`, the call will throw an error.
 */
export const updateAnonymousAccess = <ThrowOnError extends boolean = false>(options: Options<UpdateAnonymousAccessData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateAnonymousAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/acl/anonymousAccess',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Make a document public or private.
 *
 *  * Set `public=true` in the request body to make the document public. Set to `false` to make it private. Free users cannot make documents private.
 * * The `documentId` provided in the URL must match the one provided in the request body exactly.
 */
export const updatePublicAccess = <ThrowOnError extends boolean = false>(options: Options<UpdatePublicAccessData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdatePublicAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/acl/public',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Retrieve Document permissions by document ID.
 */
export const getDocumentPermissionSet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentPermissionSetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentPermissionSetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/permissionset',
        ...options
    });
};

/**
 * Share document by document ID.
 */
export const shareDocument = <ThrowOnError extends boolean = false>(options: Options<ShareDocumentData, ThrowOnError>) => {
    return (options.client ?? client).post<ShareDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/share',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Remove document View permissions from a user or other entity.
 *
 * Specify the ID of the entity to unshare with in the `eid` field, and specify the type of entity being identified in the `entryType` field. For example, to unshare a document with a company, you would use `1` as the `entryType` value and the `companyId` as the `entityId`.
 */
export const unShareDocument = <ThrowOnError extends boolean = false>(options: Options<UnShareDocumentData, ThrowOnError>) => {
    return (options.client ?? client).delete<UnShareDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/share/{eid}',
        ...options
    });
};

/**
 * Unshare document with support.
 */
export const unshareFromSupport = <ThrowOnError extends boolean = false>(options: Options<UnshareFromSupportData, ThrowOnError>) => {
    return (options.client ?? client).delete<UnshareFromSupportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/shareWithSupport',
        ...options
    });
};

/**
 * Share document by document ID with Onshape support.
 */
export const shareWithSupport = <ThrowOnError extends boolean = false>(options: Options<ShareWithSupportData, ThrowOnError>) => {
    return (options.client ?? client).post<ShareWithSupportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/shareWithSupport',
        ...options
    });
};

/**
 * Merge preview of changes that will occur based on document ID, workspace ID and source workspace/version ID
 */
export const mergePreview = <ThrowOnError extends boolean = false>(options: Options<MergePreviewData, ThrowOnError>) => {
    return (options.client ?? client).get<MergePreviewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/w/{wid}/mergePreview',
        ...options
    });
};

/**
 * Restore version or microversion to workspace by document ID, workspace ID, and version or microversion ID.
 */
export const restoreFromHistory = <ThrowOnError extends boolean = false>(options: Options<RestoreFromHistoryData, ThrowOnError>) => {
    return (options.client ?? client).post<RestoreFromHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/w/{wid}/restore/{vm}/{vmid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Copy workspace by document ID and workspace ID.
 */
export const copyWorkspace = <ThrowOnError extends boolean = false>(options: Options<CopyWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).post<CopyWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/workspaces/{wid}/copy',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Merge into workspace by document ID and workspace ID.
 */
export const mergeIntoWorkspace = <ThrowOnError extends boolean = false>(options: Options<MergeIntoWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).post<MergeIntoWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/documents/{did}/workspaces/{wid}/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Create a new drawing in a document.
 *
 * This endpoint takes a JSON Schema as input. See the schema docs below for details, and see [API Guide: Drawings](https://onshape-public.github.io/docs/api-adv/drawings/) for more information.
 */
export const createDrawingAppElement = <ThrowOnError extends boolean = false>(options: Options<CreateDrawingAppElementData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateDrawingAppElementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/d/{did}/w/{wid}/create',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Modify a drawing via JSON payload.
 *
 * See [API Guide: Drawings](https://onshape-public.github.io/docs/api-adv/drawings/) for more information.When polling for drawing modifications to complete, use a reasonable interval (e.g., avoid polling multiple times a second, use an exponential backoff strategy, etc.). See [Rate Limiting](/docs/api-adv/errors/#429) and [API Limits](/docs/auth/limits) for more information.
 */
export const modifyDrawing = <ThrowOnError extends boolean = false>(options: Options<ModifyDrawingData, ThrowOnError>) => {
    return (options.client ?? client).post<ModifyDrawingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/d/{did}/w/{wid}/e/{eid}/modify',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a list of all valid formats the drawing can be translated (exported) to.
 *
 * See [API Guide: Translations](https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json) for more information.
 */
export const getDrawingTranslatorFormats = <ThrowOnError extends boolean = false>(options: Options<GetDrawingTranslatorFormatsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDrawingTranslatorFormatsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/d/{did}/w/{wid}/e/{eid}/translationformats',
        ...options
    });
};

/**
 * Get details of all drawing views.
 */
export const getDrawingViews1 = <ThrowOnError extends boolean = false>(options: Options<GetDrawingViews1Data, ThrowOnError>) => {
    return (options.client ?? client).get<GetDrawingViews1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/d/{did}/{wvm}/{wvmid}/e/{eid}/views',
        ...options
    });
};

/**
 * Get view geometry of a drawing view in JSON format.
 */
export const getDrawingViewJsonGeometry1 = <ThrowOnError extends boolean = false>(options: Options<GetDrawingViewJsonGeometry1Data, ThrowOnError>) => {
    return (options.client ?? client).get<GetDrawingViewJsonGeometry1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/d/{did}/{wvm}/{wvmid}/e/{eid}/views/{viewid}/jsongeometry',
        ...options
    });
};

/**
 * Translate (export) a drawing to a different format.
 *
 * Export a drawing to a different format within a document. Use `getDrawingTranslatorFormats` for a list of supported translation (i.e., import/export) formats. See [API Guide: Translations](https://onshape-public.github.io/docs/api-adv/translation/#export-a-drawing-as-a-json) for more information.
 */
export const createDrawingTranslation = <ThrowOnError extends boolean = false>(options: Options<CreateDrawingTranslationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateDrawingTranslationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/d/{did}/{wv}/{wvid}/e/{eid}/translations',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the status of a drawing modification operation.
 */
export const getModificationStatus = <ThrowOnError extends boolean = false>(options: Options<GetModificationStatusData, ThrowOnError>) => {
    return (options.client ?? client).get<GetModificationStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/drawings/modify/status/{mrid}',
        ...options
    });
};

/**
 * Copy an element from a source document.
 *
 * Specify the target document and workspace in the URL. Specify the source document, workspace, and element in the request body.
 * If `anchorElementId` is specified, the copied element will be inserted after the anchor element. If not specified, the copied element will be inserted at the end of the tab list.
 *
 */
export const copyElementFromSourceDocument = <ThrowOnError extends boolean = false>(options: Options<CopyElementFromSourceDocumentData, ThrowOnError>) => {
    return (options.client ?? client).post<CopyElementFromSourceDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/copyelement/{did}/workspace/{wid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Encode a configuration option for use in other API calls.
 *
 * Returns a configuration string in the following form:
 * `configuration=parameterId%3DparameterValue`
 * The configuration string can be used in other Onshape API calls to specify which configuration option to use. See the [Configuration API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for additional details.
 *
 */
export const encodeConfigurationMap = <ThrowOnError extends boolean = false>(options: Options<EncodeConfigurationMapData, ThrowOnError>) => {
    return (options.client ?? client).post<EncodeConfigurationMapResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/d/{did}/e/{eid}/configurationencodings',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete an element from a document.
 *
 * Attempting to delete the last element in a document will result in an error.
 */
export const deleteElement = <ThrowOnError extends boolean = false>(options: Options<DeleteElementData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteElementResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/d/{did}/w/{wid}/e/{eid}',
        ...options
    });
};

/**
 * Update or replace references in an element.
 */
export const updateReferences = <ThrowOnError extends boolean = false>(options: Options<UpdateReferencesData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateReferencesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/d/{did}/w/{wid}/e/{eid}/updatereferences',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the configuration definition for a Part Studio, Variable Studio, or Assembly.
 *
 * Use Configurations to create variations of elements. You can configure feature and parameter values, part properties, custom part properties, face and part appearances, and sketch text. Each Part Studio can have only one Configuration, but it can contain multiple Configuration inputs.
 * See the [Configuration API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for additional details.
 */
export const getConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration',
        ...options
    });
};

/**
 * Update the configuration definition for a Part Studio, Variable Studio, or Assembly.
 *
 * See the [Configuration API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for additional details
 */
export const updateConfiguration = <ThrowOnError extends boolean = false>(options: Options<UpdateConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configuration',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Decode a configuration string.
 *
 * Decode a configuration string into its original JSON form to obtain configuration parameter ID and value. See the [Configuration API Guide](https://onshape-public.github.io/docs/api-adv/configs/) for additional details.
 */
export const decodeConfiguration = <ThrowOnError extends boolean = false>(options: Options<DecodeConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).get<DecodeConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/d/{did}/{wvm}/{wvmid}/e/{eid}/configurationencodings/{cid}',
        ...options
    });
};

/**
 * Gets the list of formats an element can be translated to or from.
 *
 * See the [Translation API Guide](https://onshape-public.github.io/docs/api-adv/translation/) for additional details.
 */
export const getElementTranslatorFormatsByVersionOrWorkspace = <ThrowOnError extends boolean = false>(options: Options<GetElementTranslatorFormatsByVersionOrWorkspaceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetElementTranslatorFormatsByVersionOrWorkspaceResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/elements/translatorFormats/{did}/{wv}/{wvid}/{eid}',
        ...options
    });
};

/**
 *  Get a list of valid export rule options for the user or company.
 *
 * Does NOT get the rules themselves; it gets the information used to create them.
 */
export const getValidRuleOptions = <ThrowOnError extends boolean = false>(options: Options<GetValidRuleOptionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetValidRuleOptionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/exportrules/options/{cu}/{cuid}',
        ...options
    });
};

/**
 * Create a new Feature Studio tab in a document.
 *
 * Specify the name for the new tab in the request body.
 */
export const createFeatureStudio = <ThrowOnError extends boolean = false>(options: Options<CreateFeatureStudioData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateFeatureStudioResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/featurestudios/d/{did}/w/{wid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the text for a Feature Studio element.
 */
export const getFeatureStudioContents = <ThrowOnError extends boolean = false>(options: Options<GetFeatureStudioContentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFeatureStudioContentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}',
        ...options
    });
};

/**
 * Update the text for a Feature Studio element.
 */
export const updateFeatureStudioContents = <ThrowOnError extends boolean = false>(options: Options<UpdateFeatureStudioContentsData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateFeatureStudioContentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the feature specs for a Feature Studio element.
 */
export const getFeatureStudioSpecs = <ThrowOnError extends boolean = false>(options: Options<GetFeatureStudioSpecsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFeatureStudioSpecsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/featurestudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs',
        ...options
    });
};

/**
 * Get the Access Control List (ACL) for a folder to view permissions.
 *
 * Returns the ACL of permission objects. Each object contains:
 * * The type of entity
 * * 0 (User)
 * * 1 (Company)
 * * 2 (Team)
 * * 3 (Document)
 * * 4 (Application)
 * * The ID of the entity for the specified type.
 * * The permissions for that entity.
 * *  OWNER (100): All permissions, including those not listed, such as permission to transfer ownership.
 * * DELETE (90)
 * * RESHARE (80)
 * * WRITE (70)
 * * READ (60)
 * * LINK (50)
 * * COPY (30): Can copy workspace
 * * EXPORT (20): Can export geometry
 * * COMMENT (10)
 * * ANONYMOUS_ACCESS (5): Special, restricted read access
 */
export const getFolderAcl = <ThrowOnError extends boolean = false>(options: Options<GetFolderAclData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFolderAclResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/folders/{fid}/acl',
        ...options
    });
};

/**
 * Share folder with an entity.
 *
 * * Specify the type of entity to share with using `entries.entryType`:
 * * 0 (User)
 * * 1 (Company)
 * * 2 (Team)
 * * 3 (Document)
 * * 4 (Application)
 * * Provide one of the identifiers in the `entries` object in the request body.
 * * You can share with non-Onshape users with the `email` field when `entryType=0`.
 * * Provide the string for the permission set. Do not include the integer in parentheses:
 * * OWNER (100): Object owner. Implies all permissions including those not listed such as permission to transfer ownership.
 * * DELETE (90)
 * * RESHARE (80)
 * * WRITE (70)
 * * READ (60)
 * * LINK (50)
 * * COPY (30): Can copy workspace
 * * EXPORT (20): Can export geometry
 * * COMMENT (10)
 * * ANONYMOUS_ACCESS (5): Special, restricted read access
 */
export const share = <ThrowOnError extends boolean = false>(options: Options<ShareData, ThrowOnError>) => {
    return (options.client ?? client).post<ShareResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/folders/{fid}/share',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Remove permissions from the folder for the specified Access Control List (ACL) entry.
 *
 * * Provide the folder ID for the folder to unshare.
 * * Provide the `entityType` for the type of entity to remove.
 * * 0 (User)
 * * 1 (Company)
 * * 2 (Team)
 * * 3 (Document)
 * * 4 (Application)
 * * Provide the entity ID in the `eid` param.
 */
export const unShare = <ThrowOnError extends boolean = false>(options: Options<UnShareData, ThrowOnError>) => {
    return (options.client ?? client).delete<UnShareResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/folders/{fid}/share/{eid}',
        ...options
    });
};

/**
 * Get a list of things in this document that can be inserted elsewhere.
 *
 * * Returns only the latest revision of released insertables.
 * * Use the document ID (`did`) parameter to specify the source document, not the insertion target.
 * * For example, you can insert a custom Feature library into another custom Feature library, insert Parts into an Assembly or a Drawing, etc.
 */
export const getLatestInDocument = <ThrowOnError extends boolean = false>(options: Options<GetLatestInDocumentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLatestInDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/insertables/d/{did}/latest',
        ...options
    });
};

/**
 * Get all items owned by a company/classroom/enterprise.
 *
 * Returns a list of all items owned by the company/classroom/enterprise.
 *
 * Either `documentId` or `companyId` must be provided.
 */
export const getItems = <ThrowOnError extends boolean = false>(options?: Options<GetItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetItemsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/items',
        ...options
    });
};

/**
 * Create a new item.
 */
export const createItem = <ThrowOnError extends boolean = false>(options: Options<CreateItemData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateItemResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/items',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete an item.
 *
 * Items can only be deleted if `publishState = 0` (`PENDING`). [`GET /items/{iid}`](#/Items/getItem) to get the `publishState`.
 */
export const deleteItem = <ThrowOnError extends boolean = false>(options: Options<DeleteItemData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteItemResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/items/{iid}',
        ...options
    });
};

/**
 * Get item by ID.
 *
 * Either `documentId` or `companyId` must be provided, in addition to the item ID.
 */
export const getItem = <ThrowOnError extends boolean = false>(options: Options<GetItemData, ThrowOnError>) => {
    return (options.client ?? client).get<GetItemResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/items/{iid}',
        ...options
    });
};

/**
 * Update an item.
 */
export const updateItem = <ThrowOnError extends boolean = false>(options: Options<UpdateItemData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateItemResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/items/{iid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the metadata for all elements in a document.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * You can specify the optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.
 * * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getWmvesMetadata = <ThrowOnError extends boolean = false>(options: Options<GetWmvesMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWmvesMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e',
        ...options
    });
};

/**
 * Get the metadata for an element.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.
 * * `configuration` optional query parameter defaults to default configuration.
 * * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getWmveMetadata = <ThrowOnError extends boolean = false>(options: Options<GetWmveMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWmveMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}',
        ...options
    });
};

/**
 * Update the metadata for an element.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * Microversion (`m`) in `wvm` path parameter option is not supported.
 * * Specify the property metadata to update in the Request body.
 */
export const updateWveMetadata = <ThrowOnError extends boolean = false>(options: Options<UpdateWveMetadataData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateWveMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the metadata for an assembly, including supporting metadata.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * `linkDocumentId` can be specified where applicable and this combined with the query param `inferMetadataOwner` (default value is `false`) will be used to infer metadata owner.
 * * `configuration` optional query parameter defaults to default configuration.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getFullAssemblyMetadata = <ThrowOnError extends boolean = false>(options: Options<GetFullAssemblyMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFullAssemblyMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/assembly-debug',
        ...options
    });
};

/**
 * Get the metadata for all parts in a document.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * The `configuration` optional query parameter uses the default configuration unless otherwise specified.
 * * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.
 * * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getWmvepsMetadata = <ThrowOnError extends boolean = false>(options: Options<GetWmvepsMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWmvepsMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/p',
        ...options
    });
};

/**
 * Get the metadata for a part.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * Specify the part in the `iden` or `pid` path parameter.
 * * The `configuration` optional query parameter uses the default configuration unless otherwise specified.
 * * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getWmvepMetadata = <ThrowOnError extends boolean = false>(options: Options<GetWmvepMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWmvepMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}',
        ...options
    });
};

/**
 * Update the metadata for a part.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * Specify the part in the `iden` or `pid` path parameter.
 * * The `configuration` optional query parameter uses the default configuration unless otherwise specified.
 * * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.
 * * Specify the property metadata to update in the Request body.
 */
export const updateWvepMetadata = <ThrowOnError extends boolean = false>(options: Options<UpdateWvepMetadataData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateWvepMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wvm}/{wvmid}/e/{eid}/{iden}/{pid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the metadata for a workspace or version.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * `linkDocumentId` can be specified where applicable. Combined with `inferMetadataOwner` (default value is `false`), this is used to infer metadata owner.
 * * You can specify an optional `depth` query parameter to get multiple levels in an assembly. Default `depth` is `1`.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getWvMetadata = <ThrowOnError extends boolean = false>(options: Options<GetWvMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWvMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wv}/{wvid}',
        ...options
    });
};

/**
 * Update the metadata for a workspace or version.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 */
export const updateWvMetadata = <ThrowOnError extends boolean = false>(options: Options<UpdateWvMetadataData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateWvMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/d/{did}/{wv}/{wvid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Update the metadata for a standard content part.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * Specify the document ID to update in the `did` path param.
 * * Specify the document in which you have inserted the standard content part in the `linkDocumentId` query param.
 * * Specify the property metadata to update in the Request body.
 */
export const updateVeopStandardContentPartMetadata = <ThrowOnError extends boolean = false>(options: Options<UpdateVeopStandardContentPartMetadataData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateVeopStandardContentPartMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/standardcontent/d/{did}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the metadata for a standard content part.
 *
 * See [API Guide: Metadata](https://onshape-public.github.io/docs/api-adv/metadata/) for details.
 * * Specify the part in the `pid` path parameter.
 * * The `configuration` and `linkDocumentId` query parameters are required.
 * * `includeComputedProperties` can be used to include or omit computed properties. Default value is `true`.
 * * `includeComputedAssemblyProperties` can be used to query computed assembly properties which are generally expensive. Default value is `false`.
 * * You can also choose to include a `thumbnail`. Default value is `false`.
 */
export const getVeopStandardContentMetadata = <ThrowOnError extends boolean = false>(options: Options<GetVeopStandardContentMetadataData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVeopStandardContentMetadataResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/p/{pid}',
        ...options
    });
};

/**
 * Get properties associated with the specified metadata categories.
 *
 * An object's category specifies its type: Part, Assembly, Drawing, etc. Available properties depend on the object's category.
 */
export const getCategoryProperties = <ThrowOnError extends boolean = false>(options?: Options<GetCategoryPropertiesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCategoryPropertiesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/metadatacategory/categoryproperties',
        ...options
    });
};

/**
 * Send the items to generate numbers for, and return the next valid available part numbers.
 *
 * Get the next available part number. See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-the-next-available-part-number) for more details.
 */
export const nextNumbers = <ThrowOnError extends boolean = false>(options: Options<NextNumbersData, ThrowOnError>) => {
    return (options.client ?? client).post<NextNumbersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/numberingscheme/nextnumbers',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the OpenAPI specification for the Onshape REST API.
 *
 * The Onshape API OpenAPI specification is returned in the JSON format.
 */
export const getOpenApi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenApiData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOpenApiResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/openapi',
        ...options
    });
};

/**
 * Get the list of tags in the Onshape OpenAPI specification.
 *
 * Tags are used to group operations. For example, `Document` groups operations on documents.
 */
export const getTags = <ThrowOnError extends boolean = false>(options?: Options<GetTagsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTagsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/openapi/tags',
        ...options
    });
};

/**
 * Send the items to generate numbers for, and return the next valid available part numbers.
 *
 * Get the next available part number. See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-the-next-available-part-number) for more details.
 */
export const updateNextNumbers = <ThrowOnError extends boolean = false>(options: Options<UpdateNextNumbersData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateNextNumbersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partnumber/nextnumbers',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get all parts in a workspace, version, or microversion.
 */
export const getPartsWmv = <ThrowOnError extends boolean = false>(options: Options<GetPartsWmvData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartsWmvResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}',
        ...options
    });
};

/**
 * Get all parts in an element.
 */
export const getPartsWmve = <ThrowOnError extends boolean = false>(options: Options<GetPartsWmveData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartsWmveResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}',
        ...options
    });
};

/**
 * Get a part's body details.
 *
 * All coordinates are in meters (m).
 */
export const getBodyDetails = <ThrowOnError extends boolean = false>(options: Options<GetBodyDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBodyDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/bodydetails',
        ...options
    });
};

/**
 * Get a part's bounding box details.
 */
export const getBoundingBoxes = <ThrowOnError extends boolean = false>(options: Options<GetBoundingBoxesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBoundingBoxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/boundingboxes',
        ...options
    });
};

/**
 * Synchronously export a part to a glTF file.
 *
 * Creates a synchronous export of the part (with limited tessellation settings) to a glTF file.
 * * Returns a 307 redirect from which to download the exported file.
 * * Export is much faster than asynchronous endpoints at the expense of limited control on tessellation settings.
 * * Use the [PartStudio/createPartStudioTranslation](#/PartStudio/createPartStudioTranslation) asynchronous export for greater control.
 *
 * See [API Guide: Synchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#synchronous-exports) for more details.
 */
export const exportPartGltf = <ThrowOnError extends boolean = false>(options: Options<ExportPartGltfData, ThrowOnError>) => {
    return (options.client ?? client).get<ExportPartGltfResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/gltf',
        ...options
    });
};

/**
 * Get a part's mass properties.
 *
 * Parts must have density. The returned schema includes the same information as in the Onshape [Mass Properties Tool](https://cad.onshape.com/help/Content/massprops-ps.htm).
 * When three values are returned:
 * * The first is the calculated value.
 * * The second is the minimum possible value, considering tolerance.
 * * The third is the maximum possible value, considering tolerance.
 */
export const getMassProperties = <ThrowOnError extends boolean = false>(options: Options<GetMassPropertiesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetMassPropertiesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/massproperties',
        ...options
    });
};

/**
 * Synchronously export a part to a Parasolid file.
 *
 * Creates a synchronous export of the part (with limited tessellation settings) to a Parasolid file.
 * * Returns a 307 redirect from which to download the exported file.
 * * Export is much faster than asynchronous endpoints at the expense of limited control on tessellation settings.
 * * Use the [PartStudio/createPartStudioTranslation](#/PartStudio/createPartStudioTranslation) asynchronous export for greater control.
 *
 * See [API Guide: Synchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#synchronous-exports) for more details.
 */
export const exportPs = <ThrowOnError extends boolean = false>(options: Options<ExportPsData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/parasolid',
        ...options
    });
};

/**
 * Get a part's shaded views.
 */
export const getPartShadedViews = <ThrowOnError extends boolean = false>(options: Options<GetPartShadedViewsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartShadedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/shadedviews',
        ...options
    });
};

/**
 * Get a part's sheet metal bend table.
 */
export const getBendTable = <ThrowOnError extends boolean = false>(options: Options<GetBendTableData, ThrowOnError>) => {
    return (options.client ?? client).get<GetBendTableResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/sheetmetal/bendtable',
        ...options
    });
};

/**
 * Synchronously export a part to an STL file.
 *
 * Creates a synchronous export of the part (with limited tessellation settings) to an STL file.
 * * Returns a 307 redirect from which to download the exported file.
 * * Export is much faster than asynchronous endpoints at the expense of limited control on tessellation settings.
 * * Use the [PartStudio/createPartStudioTranslation](#/PartStudio/createPartStudioTranslation) asynchronous export for greater control.
 *
 * See [API Guide: Synchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#synchronous-exports) for more details.
 */
export const exportStl = <ThrowOnError extends boolean = false>(options: Options<ExportStlData, ThrowOnError>) => {
    return (options.client ?? client).get<ExportStlResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/stl',
        ...options
    });
};

/**
 * Get a list of a part's tessellation edges.
 *
 * Returns the coordinates (in meters) of each edge's endpoints.
 */
export const getEdges = <ThrowOnError extends boolean = false>(options: Options<GetEdgesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetEdgesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatededges',
        ...options
    });
};

/**
 * Get a list of a part's tessellation faces.
 *
 * Coordinates are in meters (m).
 */
export const getFaces1 = <ThrowOnError extends boolean = false>(options: Options<GetFaces1Data, ThrowOnError>) => {
    return (options.client ?? client).get<GetFaces1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/parts/d/{did}/{wvm}/{wvmid}/e/{eid}/partid/{partid}/tessellatedfaces',
        ...options
    });
};

/**
 * Get a list of all named views that exist in the Part Studio.
 *
 * Returns a map from view name to view data for the given element. See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
 */
export const getPartStudioNamedViews = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioNamedViewsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioNamedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/e/{eid}/namedViews',
        ...options
    });
};

/**
 * Create a new Part Studio in a document.
 *
 * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
 */
export const createPartStudio = <ThrowOnError extends boolean = false>(options: Options<CreatePartStudioData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePartStudioResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/w/{wid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete a Part Studio feature.
 *
 * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
 */
export const deletePartStudioFeature = <ThrowOnError extends boolean = false>(options: Options<DeletePartStudioFeatureData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeletePartStudioFeatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}',
        ...options
    });
};

/**
 * Update the definition of a Part Studio feature.
 *
 * Replaces an existing feature in the location of the existing feature. See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
 */
export const updatePartStudioFeature = <ThrowOnError extends boolean = false>(options: Options<UpdatePartStudioFeatureData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdatePartStudioFeatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Move the Feature List rollback bar in the Part Studio.
 *
 * Replace `"string"` in the request body with an object that specifies the new location for the rollback bar:
 * `{ "rollbackIndex": integer }`
 *
 * For example: `{ "rollbackIndex": 2 }`
 *
 * Set to `-1` to move the rollback bar to the end of the list.
 *
 * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
 */
export const updateRollback = <ThrowOnError extends boolean = false>(options: Options<UpdateRollbackData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateRollbackResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Update multiple features in a Part Studio
 *
 * This API accepts a list of features (that must already exist in the Part Studio) to update. This call does not fully redefine the features; it updates only the parameters supplied in the top-level feature structure, and optionally can update feature suppression attributes.
 * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
 */
export const updateFeatures = <ThrowOnError extends boolean = false>(options: Options<UpdateFeaturesData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateFeaturesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the body details for a Part Studio.
 *
 * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
 */
export const getPartStudioBodyDetails = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioBodyDetailsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioBodyDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/bodydetails',
        ...options
    });
};

/**
 * Get the bounding boxes for a Part Studio.
 *
 * This endpoint does not result in a tight bounding box. The values returned are meant for graphics and visualization, and are approximate.
 * To calculate a tight bounding box, see the [FeatureScript API Guide](https://onshape-public.github.io/docs/api-adv/fs/#calculate-a-tight-bounding-box).
 */
export const getPartStudioBoundingBoxes = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioBoundingBoxesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioBoundingBoxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/boundingboxes',
        ...options
    });
};

/**
 * Get the differences between two Part Studios in a single document.
 */
export const comparePartStudios = <ThrowOnError extends boolean = false>(options: Options<ComparePartStudiosData, ThrowOnError>) => {
    return (options.client ?? client).get<ComparePartStudiosResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/compare',
        ...options
    });
};

/**
 * Get a list of features instantiated in the Part Studio.
 *
 * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
 */
export const getPartStudioFeatures = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioFeaturesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioFeaturesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features',
        ...options
    });
};

/**
 * Add a feature to the Part Studio's Feature List.
 *
 * The feature is added immediately before the rollback bar. Any geometry IDs specified in the feature must be valid at that point in the feature tree.
 *
 * See the [Features API Guide](https://onshape-public.github.io/docs/api-adv/featureaccess/) for additional information.
 */
export const addPartStudioFeature = <ThrowOnError extends boolean = false>(options: Options<AddPartStudioFeatureData, ThrowOnError>) => {
    return (options.client ?? client).post<AddPartStudioFeatureResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/features',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Evaluate the FeatureScript snippet for a Part Studio.
 *
 * See [API Guide: Evaluating FeatureScript](https://onshape-public.github.io/docs/api-adv/fs/) for more details.
 *
 * Note that only lambda expressions can be evaulated with this endpoint.
 */
export const evalFeatureScript = <ThrowOnError extends boolean = false>(options: Options<EvalFeatureScriptData, ThrowOnError>) => {
    return (options.client ?? client).post<EvalFeatureScriptResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescript',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the FeatureScript representation of a Part Studio.
 */
export const getFeatureScriptRepresentation = <ThrowOnError extends boolean = false>(options: Options<GetFeatureScriptRepresentationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFeatureScriptRepresentationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurescriptrepresentation',
        ...options
    });
};

/**
 * Get the specs for a Part Studio feature.
 *
 * Returns a list of feature specs available within the Part Studio. A feature spec provides a data description of the feature's interface to a feature.
 */
export const getPartStudioFeatureSpecs = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioFeatureSpecsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioFeatureSpecsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/featurespecs',
        ...options
    });
};

/**
 * Compute and return a FeatureScript table for a Part Studio.
 */
export const getFeatureScriptTable = <ThrowOnError extends boolean = false>(options: Options<GetFeatureScriptTableData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFeatureScriptTableResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/fstable',
        ...options
    });
};

/**
 * Synchronously export a Part Studio to a glTF file.
 *
 * Creates a synchronous export of the Part Studio (with limited tessellation settings) to a glTF file.
 * * Returns a 307 redirect from which to download the exported file.
 * * Export is much faster than asynchronous endpoints at the expense of limited control on tessellation settings.
 * * Use the [PartStudio/createPartStudioTranslation](#/PartStudio/createPartStudioTranslation) asynchronous export for greater control.
 *
 * See [API Guide: Synchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#synchronous-exports) for more details.
 */
export const exportPartStudioGltf = <ThrowOnError extends boolean = false>(options: Options<ExportPartStudioGltfData, ThrowOnError>) => {
    return (options.client ?? client).get<ExportPartStudioGltfResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/gltf',
        ...options
    });
};

/**
 * Find corresponding deterministic IDs from a source document microversion at the target version.
 *
 * * Deterministic IDs are only valid for one microversion.
 * * This maps deterministic IDs between microversions in an attempt to find the corresponding entities in each version.
 */
export const translateIds = <ThrowOnError extends boolean = false>(options: Options<TranslateIdsData, ThrowOnError>) => {
    return (options.client ?? client).post<TranslateIdsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/idtranslations',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the mass properties for a Part Studio.
 *
 * Parts must have density. The returned schema includes the same information as in the Onshape [Mass Properties Tool](https://cad.onshape.com/help/Content/massprops-ps.htm).
 *
 * When three values are returned:
 * * The first is the calculated value.
 * * The second is the minimum possible value, considering tolerance.
 * * The third is the maximum possible value, considering tolerance.
 *
 * See the [Part Studios API Guide](https://onshape-public.github.io/docs/api-adv/partstudios/) for details and tutorials.
 */
export const getPartStudioMassProperties = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioMassPropertiesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioMassPropertiesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/massproperties',
        ...options
    });
};

/**
 * Synchronously export a Part Studio to a Parasolid file.
 *
 * Creates a synchronous export of the Part Studio (with limited tessellation settings) to a Parasolid file.
 * * Returns a 307 redirect from which to download the exported file.
 * * Export is much faster than asynchronous endpoints at the expense of limited control on tessellation settings.
 * * Use the [PartStudio/createPartStudioTranslation](#/PartStudio/createPartStudioTranslation) asynchronous export for greater control.
 *
 * See [API Guide: Synchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#synchronous-exports) for more details.
 */
export const exportParasolid = <ThrowOnError extends boolean = false>(options: Options<ExportParasolidData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/parasolid',
        ...options
    });
};

/**
 * Get a list of shaded views for a Part Studio.
 */
export const getPartStudioShadedViews = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioShadedViewsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioShadedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/shadedviews',
        ...options
    });
};

/**
 * Get information for all sketches in Part Studio.
 */
export const getSketchInfo = <ThrowOnError extends boolean = false>(options: Options<GetSketchInfoData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSketchInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches',
        ...options
    });
};

/**
 * Get all bounding boxes for a sketch.
 */
export const getSketchBoundingBoxes = <ThrowOnError extends boolean = false>(options: Options<GetSketchBoundingBoxesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSketchBoundingBoxesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/boundingboxes',
        ...options
    });
};

/**
 * Get the tessellations of a sketch in a Part Studio.
 *
 * The accuracy of the tessellation to exact geometry is controlled by the `angleTolerance` and `chordTolerance` parameters. The tessellation points are computed closely enough so that neither the angle tolerance nor the chord tolerance are exceeded. For most parts, the angular tolerance is the most restrictive of the two default tolerances.
 */
export const getTessellatedEntities = <ThrowOnError extends boolean = false>(options: Options<GetTessellatedEntitiesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTessellatedEntitiesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/sketches/{sid}/tessellatedentities',
        ...options
    });
};

/**
 * Synchronously export a Part Studio to an STL file.
 *
 * Creates a synchronous export of the Part Studio (with limited tessellation settings) to an STL file.
 * * Returns a 307 redirect from which to download the exported file.
 * * Export is much faster than asynchronous endpoints at the expense of limited control on tessellation settings.
 * * Use the [PartStudio/createPartStudioTranslation](#/PartStudio/createPartStudioTranslation) asynchronous export for greater control.
 *
 * See [API Guide: Synchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#synchronous-exports) for more details.
 */
export const exportPartStudioStl = <ThrowOnError extends boolean = false>(options: Options<ExportPartStudioStlData, ThrowOnError>) => {
    return (options.client ?? client).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/stl',
        ...options
    });
};

/**
 * Get a list of all edges in a Part Studio.
 *
 * Returns the edges as tessellated data and includes display data.
 * Coordinates are in meters (m).
 */
export const getPartStudioEdges = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioEdgesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioEdgesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatededges',
        ...options
    });
};

/**
 * Get a list of all faces in a Part Studio.
 *
 * Coordinates are in meters (m).
 */
export const getPartStudioFaces = <ThrowOnError extends boolean = false>(options: Options<GetPartStudioFacesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPartStudioFacesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wvm}/{wvmid}/e/{eid}/tessellatedfaces',
        ...options
    });
};

/**
 * Asynchronously export a Part Studio to glTF.
 *
 * Creates an asynchronous export of a Part Studio to glTF. See [API Guide: Asynchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#export-a-part-studio-to-gltf-obj-solidworks-or-step) for more details.
 */
export const createPartStudioExportGltf = <ThrowOnError extends boolean = false>(options: Options<CreatePartStudioExportGltfData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePartStudioExportGltfResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/gltf',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Asynchronously export a Part Studio to OBJ.
 *
 * Creates an asynchronous export of a Part Studio to OBJ. See [API Guide: Asynchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#export-a-part-studio-to-gltf-obj-solidworks-or-step) for more details.
 */
export const createPartStudioExportObj = <ThrowOnError extends boolean = false>(options: Options<CreatePartStudioExportObjData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePartStudioExportObjResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/obj',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Asynchronously export a Part Studio to Solidworks.
 *
 * Creates an asynchronous export of a Part Studio to Solidworks. See [API Guide: Asynchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#export-a-part-studio-to-gltf-obj-solidworks-or-step) for more details.
 */
export const createPartStudioExportSolidworks = <ThrowOnError extends boolean = false>(options: Options<CreatePartStudioExportSolidworksData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePartStudioExportSolidworksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/solidworks',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Asynchronously export a Part Studio to STEP.
 *
 * Creates an asynchronous export of a Part Studio to STEP. See [API Guide: Asynchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#export-a-part-studio-to-gltf-obj-solidworks-or-step) for more details.
 */
export const createPartStudioExportStep = <ThrowOnError extends boolean = false>(options: Options<CreatePartStudioExportStepData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePartStudioExportStepResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/export/step',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Asynchronously export a Part Studio to another format.
 *
 * Creates an asynchronous export of a Part Studio to another file format.
 * * Can take longer than synchronous export options, but supports more formats and provides more control on tessellation and other settings.
 * * Use `formatName` in the JSON request body to specify the export file type. Use [Translations/getAllTranslatorFormats](#/Translation/getAllTranslatorFormats) to get a list of valid export file formats. `
 * * Set `storeInDocument` to `false` to export to a data file. Set to `true` to export to a blob element in the same document.
 * * See [API Guide: Asynchronous Exports](https://onshape-public.github.io/docs/api-adv/translation/#export-a-part-studio-to-another-format) for more details.
 */
export const createPartStudioTranslation = <ThrowOnError extends boolean = false>(options: Options<CreatePartStudioTranslationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePartStudioTranslationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/partstudios/d/{did}/{wv}/{wvid}/e/{eid}/translations',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Create a new publication.
 */
export const createPublication = <ThrowOnError extends boolean = false>(options: Options<CreatePublicationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePublicationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Delete a publication.
 */
export const deletePublication = <ThrowOnError extends boolean = false>(options: Options<DeletePublicationData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeletePublicationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications/{pid}',
        ...options
    });
};

/**
 * Update publication's attributes name, description, and notes.
 */
export const updatePublicationAttributes = <ThrowOnError extends boolean = false>(options: Options<UpdatePublicationAttributesData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdatePublicationAttributesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications/{pid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Add an item in a publication.
 */
export const addItemToPublication = <ThrowOnError extends boolean = false>(options: Options<AddItemToPublicationData, ThrowOnError>) => {
    return (options.client ?? client).post<AddItemToPublicationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications/{pid}/item',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Remove an item from a publication.
 */
export const deletePublicationItem = <ThrowOnError extends boolean = false>(options: Options<DeletePublicationItemData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeletePublicationItemResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications/{pid}/item/{iid}',
        ...options
    });
};

/**
 * Get all items in a publication.
 */
export const getPublicationItems = <ThrowOnError extends boolean = false>(options: Options<GetPublicationItemsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPublicationItemsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications/{pid}/items',
        ...options
    });
};

/**
 * Add publication items in bulk.
 */
export const addItemsToPublication = <ThrowOnError extends boolean = false>(options: Options<AddItemsToPublicationData, ThrowOnError>) => {
    return (options.client ?? client).post<AddItemsToPublicationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/publications/{pid}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Create an obsoletion package to make an existing revision obsolete.
 */
export const createObsoletionPackage = <ThrowOnError extends boolean = false>(options: Options<CreateObsoletionPackageData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateObsoletionPackageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/releasepackages/obsoletion/{wfid}',
        ...options
    });
};

/**
 * Create a new release package for one or more items.
 *
 * Once a release package is successfully created, use `updateReleasePackage` to update all desired item/package properties, and transition it to the desired state.
 *
 * To add items from other documents, you must select `Allow adding items from other documents` in your [Release management settings](https://cad.onshape.com/help/Content/Plans/release_management_2.htm#rel_candidate_dialog).
 */
export const createReleasePackage = <ThrowOnError extends boolean = false>(options: Options<CreateReleasePackageData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateReleasePackageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/releasepackages/release/{wfid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get details about the specified release package.
 */
export const getReleasePackage = <ThrowOnError extends boolean = false>(options: Options<GetReleasePackageData, ThrowOnError>) => {
    return (options.client ?? client).get<GetReleasePackageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/releasepackages/{rpid}',
        ...options
    });
};

/**
 * Update the release/obsoletion package/item properties.
 *
 * Use the `wfaction` query param to also perform a workflow transition.
 */
export const updateReleasePackage = <ThrowOnError extends boolean = false>(options: Options<UpdateReleasePackageData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateReleasePackageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/releasepackages/{rpid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get details for the specified revision.
 *
 * If the `revision` parameter is left blank, the latest revision information is returned. See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-latest-revision-info) for more details.
 */
export const getRevisionByPartNumber = <ThrowOnError extends boolean = false>(options: Options<GetRevisionByPartNumberData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRevisionByPartNumberResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/c/{cid}/partnumber/{pnum}',
        ...options
    });
};

/**
 * Get all revisions for a company.
 *
 * See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-all-revisions) for more details.
 * * Returns a list of `limit` size of all objects per API call.
 * * To get the next set of results, use the `next` URL from the response body.
 * * Do not change any other query parameters during subsequent enumeration.
 * * Persist `after` query param value and use it to begin a fresh enumeration at a later date.
 * * This API can only be called by company admins.
 */
export const enumerateRevisions = <ThrowOnError extends boolean = false>(options: Options<EnumerateRevisionsData, ThrowOnError>) => {
    return (options.client ?? client).get<EnumerateRevisionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/companies/{cid}',
        ...options
    });
};

/**
 * Get all revisions for an element (tab).
 *
 * See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-latest-revision-info) for more details.
 */
export const getRevisionHistoryInCompanyByElementId = <ThrowOnError extends boolean = false>(options: Options<GetRevisionHistoryInCompanyByElementIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRevisionHistoryInCompanyByElementIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}',
        ...options
    });
};

/**
 * Get all revisions for a part ID.
 *
 * See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-latest-revision-info) for more details.
 */
export const getRevisionHistoryInCompanyByPartId = <ThrowOnError extends boolean = false>(options: Options<GetRevisionHistoryInCompanyByPartIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRevisionHistoryInCompanyByPartIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/companies/{cid}/d/{did}/{wv}/{wvid}/e/{eid}/p/{pid}',
        ...options
    });
};

/**
 * Get all revisions for a part number.
 *
 * You can also request `elementType` in addition to `partNumber` since companies may or may not allow drawings to share part numbers with their parts/assemblies. To perform search without `elementType`, use `elementType = -1` (UNKNOWN).  See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-all-revisions) for more details.
 */
export const getRevisionHistoryInCompanyByPartNumber = <ThrowOnError extends boolean = false>(options: Options<GetRevisionHistoryInCompanyByPartNumberData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRevisionHistoryInCompanyByPartNumberResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/companies/{cid}/partnumber/{pnum}',
        ...options
    });
};

/**
 * Delete all revisions for a part number.
 *
 * Only company admins can call this API. All documents that contain or use the part number must be deleted first. This operation cannot be undone.
 */
export const deleteRevisionHistory = <ThrowOnError extends boolean = false>(options: Options<DeleteRevisionHistoryData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteRevisionHistoryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/companies/{cid}/partnumber/{pnum}/elementType/{et}',
        ...options
    });
};

/**
 * Get all revisions for a document.
 *
 * Retrieve a list of all revisions that exist in a document and are owned by the document's owning company.  See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-all-revisions) for more details.
 */
export const getAllInDocument = <ThrowOnError extends boolean = false>(options: Options<GetAllInDocumentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAllInDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/d/{did}',
        ...options
    });
};

/**
 * Get all revisions for a version.
 *
 * Retrieve a list of all revisions that exist in a document version and are owned by the document's owning company.  See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-all-revisions) for more details.
 */
export const getAllInDocumentVersion = <ThrowOnError extends boolean = false>(options: Options<GetAllInDocumentVersionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAllInDocumentVersionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/d/{did}/v/{vid}',
        ...options
    });
};

/**
 * Get the latest revision information for a part.
 *
 * See [API Guide: Release Management](https://onshape-public.github.io/docs/api-adv/relmgmt/#get-latest-revision-info) for more details. Returns 204 if no revisions are found.
 */
export const getLatestInDocumentOrCompany = <ThrowOnError extends boolean = false>(options: Options<GetLatestInDocumentOrCompanyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLatestInDocumentOrCompanyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/revisions/{cd}/{cdid}/p/{pnum}/latest',
        ...options
    });
};

/**
 * Sets the part number and description for a standard content component.
 */
export const setCustomParameters = <ThrowOnError extends boolean = false>(options: Options<SetCustomParametersData, ThrowOnError>) => {
    return (options.client ?? client).post<SetCustomParametersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/standardcontent/d/{did}/customparameters',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Gets all possible values for each of the standard content parameters.
 */
export const getParameterValuesForId = <ThrowOnError extends boolean = false>(options: Options<GetParameterValuesForIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetParameterValuesForIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/standardcontent/d/{did}/parametervalues',
        ...options
    });
};

/**
 * List all standard content.
 */
export const getStandardContentList = <ThrowOnError extends boolean = false>(options?: Options<GetStandardContentListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStandardContentListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/standardcontent/list',
        ...options
    });
};

/**
 * Create a new properties table template.
 */
export const createTableTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateTableTemplateData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTableTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tabletemplates',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get all properties table templates available for a company.
 */
export const getByCompanyId = <ThrowOnError extends boolean = false>(options: Options<GetByCompanyIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetByCompanyIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tabletemplates/companies/{cid}',
        ...options
    });
};

/**
 * Get all table templates that are available to use on the provided document.
 */
export const getByDocumentId = <ThrowOnError extends boolean = false>(options: Options<GetByDocumentIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetByDocumentIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tabletemplates/d/{did}',
        ...options
    });
};

/**
 * Delete a properties table template.
 */
export const deleteTableTemplate = <ThrowOnError extends boolean = false>(options: Options<DeleteTableTemplateData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTableTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tabletemplates/{tid}',
        ...options
    });
};

/**
 * Get a properties table template by template ID.
 */
export const getTableTemplate = <ThrowOnError extends boolean = false>(options: Options<GetTableTemplateData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTableTemplateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tabletemplates/{tid}',
        ...options
    });
};

/**
 * Lists tasks assigned to the specified user
 *
 * Returns a list of tasks assigneed to the userId specified in the request. Only company admins can view tasks that were not created by them and are not assigned to them.
 */
export const getActionItems = <ThrowOnError extends boolean = false>(options?: Options<GetActionItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetActionItemsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tasks',
        ...options
    });
};

/**
 * Create a new task in a draft state.
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTaskResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tasks',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get a task by id.
 */
export const getTask = <ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTaskResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tasks/{tid}',
        ...options
    });
};

/**
 * Update the task and its properties.
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateTaskResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tasks/{tid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Execute a workflow transition.
 */
export const transitionTask = <ThrowOnError extends boolean = false>(options: Options<TransitionTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<TransitionTaskResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/tasks/{tid}/{transition}',
        ...options
    });
};

/**
 * Get a list of all teams the current user belongs to.
 */
export const find = <ThrowOnError extends boolean = false>(options?: Options<FindData, ThrowOnError>) => {
    return (options?.client ?? client).get<FindResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/teams',
        ...options
    });
};

/**
 * Get team information by team ID.
 */
export const getTeam = <ThrowOnError extends boolean = false>(options: Options<GetTeamData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTeamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/teams/{tid}',
        ...options
    });
};

/**
 * Get a list of a team's members.
 *
 * Returns a maximum of 20 per page.
 */
export const getMembers = <ThrowOnError extends boolean = false>(options: Options<GetMembersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetMembersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/teams/{tid}/members',
        ...options
    });
};

/**
 * Get the thumbnail info for a document in the default workspace.
 *
 * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
 * * The default workspace may vary by user; the image served depends on the signed-in user.
 * * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
 */
export const getThumbnailForDocument = <ThrowOnError extends boolean = false>(options: Options<GetThumbnailForDocumentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThumbnailForDocumentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}',
        ...options
    });
};

/**
 * Get the thumbnail info for a version of a document.
 *
 * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
 * * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
 */
export const getThumbnailForDocumentAndVersion = <ThrowOnError extends boolean = false>(options: Options<GetThumbnailForDocumentAndVersionData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThumbnailForDocumentAndVersionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/v/{vid}',
        ...options
    });
};

/**
 * Get the thumbnail info for a workspace.
 *
 * * By default, returns thumbnail info for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
 * * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
 */
export const getDocumentThumbnail = <ThrowOnError extends boolean = false>(options: Options<GetDocumentThumbnailData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentThumbnailResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/w/{wid}',
        ...options
    });
};

/**
 * Get the thumbnail image with the given configuration for an element.
 *
 * Returns the thumbnail image for an element at a specified version, with the given configuration.
 */
export const getElementThumbnailWithApiConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetElementThumbnailWithApiConfigurationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetElementThumbnailWithApiConfigurationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/w/{wid}/e/{eid}/ac/{cid}/s/{sz}',
        ...options
    });
};

/**
 * Get the thumbnail image with the given size for a document.
 *
 * * By default, returns thumbnail image for the element with the most-recently generated image. If you pinned an element for the document thumbnail, that element will always be used for the document-level thumbnail, if it exists in the workspace.
 * * See also: [Tech tip on how to change a document thumbnail in onshape](https://www.onshape.com/en/resource-center/tech-tips/tech-tip-how-to-change-a-document-thumbnail-in-onshape)
 */
export const getDocumentThumbnailWithSize = <ThrowOnError extends boolean = false>(options: Options<GetDocumentThumbnailWithSizeData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentThumbnailWithSizeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/w/{wid}/s/{sz}',
        ...options
    });
};

/**
 * Delete an element's thumbnail.
 *
 * Deletes an application element's thumbnail and images for the given document, workspace or version, and element combination.
 */
export const deleteApplicationThumbnails = <ThrowOnError extends boolean = false>(options: Options<DeleteApplicationThumbnailsData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApplicationThumbnailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}',
        ...options
    });
};

/**
 * Get the thumbnail info structure for an element.
 *
 * Returns thumbnail info for the given document, workspace or version, and element.
 */
export const getElementThumbnail = <ThrowOnError extends boolean = false>(options: Options<GetElementThumbnailData, ThrowOnError>) => {
    return (options.client ?? client).get<GetElementThumbnailResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}',
        ...options
    });
};

/**
 * Set the thumbnail image for an application element.
 *
 * * Allows 3rd-party applications to set thumbnails for their elements.
 * * Application elements can have both primary and secondary thumbnails. A primary thumbnail represents the top-level of the element. A secondary thumbnail can represent sub-components of the element (e.g., a drawing sheet).
 * * To update one or more thumbnails, you must set the overwrite query param to `true` and supply the entire set of thumbnails. All previous thumbnails will be deleted prior to updating the element with the latest images.
 */
export const setApplicationElementThumbnail = <ThrowOnError extends boolean = false>(options: Options<SetApplicationElementThumbnailData, ThrowOnError>) => {
    return (options.client ?? client).post<SetApplicationElementThumbnailResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the thumbnail image with the given size for an element.
 */
export const getElementThumbnailWithSize = <ThrowOnError extends boolean = false>(options: Options<GetElementThumbnailWithSizeData, ThrowOnError>) => {
    return (options.client ?? client).get<GetElementThumbnailWithSizeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/d/{did}/{wv}/{wvid}/e/{eid}/s/{sz}',
        ...options
    });
};

/**
 * This endpoint will be deprecated soon. Use `getThumbnailForDocument` instead.
 *
 * This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.
 */
export const getThumbnailForDocumentOld = <ThrowOnError extends boolean = false>(options: Options<GetThumbnailForDocumentOldData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThumbnailForDocumentOldResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/document/{did}',
        ...options
    });
};

/**
 * This endpoint will be deprecated soon. Use `getThumbnailForDocumentAndVersion` instead.
 *
 * This API exists for historical reasons. It uses `/document/` in the path, rather than the standard `/d/` to specify the document.
 */
export const getThumbnailForDocumentAndVersionOld = <ThrowOnError extends boolean = false>(options: Options<GetThumbnailForDocumentAndVersionOldData, ThrowOnError>) => {
    return (options.client ?? client).get<GetThumbnailForDocumentAndVersionOldResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/thumbnails/document/{did}/version/{vid}',
        ...options
    });
};

/**
 * Get information on an in-progress or completed translation by document ID.
 */
export const getDocumentTranslations = <ThrowOnError extends boolean = false>(options: Options<GetDocumentTranslationsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentTranslationsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/translations/d/{did}',
        ...options
    });
};

/**
 * Import or upload a CAD file into Onshape, and translate the data into parts or assemblies.
 *
 * The API call may complete before the translation is finished. If `requestState = ACTIVE`, the translation can be polled until the state is either `DONE` or `FAILED`. Alternatively, a webhook callback can be registered for notification of translation completion (requires `Write` scope if `storeInDocument` is `true`).
 *
 * See [API Guide: Import & Export](https://onshape-public.github.io/docs/api-adv/translation/) for examples.
 */
export const createTranslation = <ThrowOnError extends boolean = false>(options: Options<CreateTranslationData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTranslationResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/translations/d/{did}/w/{wid}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get a list of formats this translation can use.
 *
 * Note that we don't necessarily support both import and export for any given format. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
 */
export const getAllTranslatorFormats = <ThrowOnError extends boolean = false>(options?: Options<GetAllTranslatorFormatsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTranslatorFormatsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/translations/translationformats',
        ...options
    });
};

/**
 * Delete a translation request.
 */
export const deleteTranslation = <ThrowOnError extends boolean = false>(options: Options<DeleteTranslationData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTranslationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/translations/{tid}',
        ...options
    });
};

/**
 * Get information on an in-progress or completed translation by translation ID.
 *
 * When the translation is complete, `requestState` changes from `ACTIVE` to `DONE` or `FAILED`. See [API Guide: Model Translation](https://onshape-public.github.io/docs/api-adv/translation/) for more details.
 *
 * When polling for translations to complete, use a reasonable interval (e.g., avoid polling multiple times a second, use an exponential backoff strategy, etc.) or use [Webhooks](/docs/app-dev/webhook). See [Rate Limiting](/docs/api-adv/errors/#429) and [API Limits](/docs/auth/limits) for more information.
 */
export const getTranslation = <ThrowOnError extends boolean = false>(options: Options<GetTranslationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTranslationResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/translations/{tid}',
        ...options
    });
};

/**
 * Authenticate a user's Onshape credentials, and create a session.
 *
 * Returned information depends on caller's `OAuth2ReadPll` scope.
 */
export const session = <ThrowOnError extends boolean = false>(options: Options<SessionData, ThrowOnError>) => {
    return (options.client ?? client).post<SessionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/session',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the session information for an authenticated (signed-in) user.
 *
 * Returned information depends on caller's `OAuth2ReadPll` scope.
 */
export const sessionInfo = <ThrowOnError extends boolean = false>(options?: Options<SessionInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<SessionInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/sessioninfo',
        ...options
    });
};

/**
 * Get the user settings for the signed-in user (i.e., you) for the current session.
 *
 * * Non-admins can call this API for their own user ID.
 * * Mouse button settings are contained in `reverseScrollWheelZoomDirection` and `viewManipulationMouseKeyMapping`.
 * * For each action in `viewManipulationMouseKeyMapping`, an array of modifier key/mouse combos is provided that performs that action.
 * * Possible modifier keys include `SHIFT` and `CTRL`.
 * * Possible mouse buttons include `MMB` (middle mouse button), `RMB` (right mouse button), and `SCROLLWHEEL`.
 * * Scrolling forward zooms in, unless `reverseScrollWheelZoomDirection` is set to `true`.
 */
export const getUserSettingsCurrentLoggedInUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserSettingsCurrentLoggedInUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserSettingsCurrentLoggedInUserResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/settings',
        ...options
    });
};

/**
 * Get the user settings for any user in your organization (admins only).
 *
 * * Mouse button settings are contained in `reverseScrollWheelZoomDirection` and `viewManipulationMouseKeyMapping`.
 * * For each action in `viewManipulationMouseKeyMapping`, an array of modifier key/mouse combos is provided that performs that action.
 * * Possible modifier keys include `SHIFT` and `CTRL`.
 * * Possible mouse buttons include `MMB` (middle mouse button), `RMB` (right mouse button), and `SCROLLWHEEL`.
 * * Scrolling forward zooms in, unless `reverseScrollWheelZoomDirection` is set to `true`.
 */
export const getUserSettings = <ThrowOnError extends boolean = false>(options: Options<GetUserSettingsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserSettingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{uid}/settings',
        ...options
    });
};

/**
 * Assign variables to a Variable Studio
 */
export const setVariables = <ThrowOnError extends boolean = false>(options: Options<SetVariablesData, ThrowOnError>) => {
    return (options.client ?? client).post<SetVariablesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/w/{wid}/e/{eid}/variables',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Set the Variable Studio references for an element.
 */
export const setVariableStudioReferences = <ThrowOnError extends boolean = false>(options: Options<SetVariableStudioReferencesData, ThrowOnError>) => {
    return (options.client ?? client).post<SetVariableStudioReferencesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/w/{wid}/e/{eid}/variablestudioreferences',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Set the scope the Variable Studio.
 */
export const setVariableStudioScope = <ThrowOnError extends boolean = false>(options: Options<SetVariableStudioScopeData, ThrowOnError>) => {
    return (options.client ?? client).post<SetVariableStudioScopeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/w/{wid}/e/{eid}/variablestudioscope',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Create a new Variable Studio in a document and workspace.
 */
export const createVariableStudio = <ThrowOnError extends boolean = false>(options: Options<CreateVariableStudioData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateVariableStudioResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/w/{wid}/variablestudio',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Get the contents of all variable tables in an element.
 */
export const getVariables = <ThrowOnError extends boolean = false>(options: Options<GetVariablesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVariablesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/{wv}/{wvid}/e/{eid}/variables',
        ...options
    });
};

/**
 * Get the Variable Studio references for an element.
 */
export const getVariableStudioReferences = <ThrowOnError extends boolean = false>(options: Options<GetVariableStudioReferencesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVariableStudioReferencesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioreferences',
        ...options
    });
};

/**
 * Get the scope of a Variable Studio.
 */
export const getVariableStudioScope = <ThrowOnError extends boolean = false>(options: Options<GetVariableStudioScopeData, ThrowOnError>) => {
    return (options.client ?? client).get<GetVariableStudioScopeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/variables/d/{did}/{wv}/{wvid}/e/{eid}/variablestudioscope',
        ...options
    });
};

/**
 * Get all versions of the Onshape REST APIs.
 */
export const getAllVersions = <ThrowOnError extends boolean = false>(options?: Options<GetAllVersionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllVersionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/versions',
        ...options
    });
};

/**
 * Get a list of all webhooks registered by a user or company.
 *
 * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
 */
export const getWebhooks = <ThrowOnError extends boolean = false>(options?: Options<GetWebhooksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWebhooksResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks',
        ...options
    });
};

/**
 * Create a new webhook.
 *
 * Click **Callbacks** below for a list of events your app can subscribe to. See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
 */
export const createWebhook = <ThrowOnError extends boolean = false>(options?: Options<CreateWebhookData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateWebhookResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options?.headers
        }
    });
};

/**
 * Unregister a webhook.
 *
 * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
 */
export const unregisterWebhook = <ThrowOnError extends boolean = false>(options: Options<UnregisterWebhookData, ThrowOnError>) => {
    return (options.client ?? client).delete<UnregisterWebhookResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhookid}',
        ...options
    });
};

/**
 * Get webhook info by webhook ID.
 *
 * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
 */
export const getWebhook = <ThrowOnError extends boolean = false>(options: Options<GetWebhookData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWebhookResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhookid}',
        ...options
    });
};

/**
 * Update a webhook.
 *
 * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
 */
export const updateWebhook = <ThrowOnError extends boolean = false>(options: Options<UpdateWebhookData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateWebhookResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhookid}',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=UTF-8; qs=0.09',
            ...options.headers
        }
    });
};

/**
 * Ping a webhook.
 *
 * See [API Guide: Webhooks](https://onshape-public.github.io/docs/app-dev/webhook/) for implementation details.
 */
export const pingWebhook = <ThrowOnError extends boolean = false>(options: Options<PingWebhookData, ThrowOnError>) => {
    return (options.client ?? client).post<PingWebhookResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhookid}/ping',
        ...options
    });
};

/**
 * Get all active workflows for the currently logged in user's company.
 *
 * Optionally takes a document ID to return all workflows for that document's owning company.
 */
export const getActiveWorkflows = <ThrowOnError extends boolean = false>(options?: Options<GetActiveWorkflowsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetActiveWorkflowsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workflow/active',
        ...options
    });
};

/**
 * Get all identities allowed to be approvers on a workflow object.
 *
 * * Identities can be users and/or teams.
 * * For Enterprise accounts, also includes roles and any aliases that contain allowed users/teams.
 * * Not object- or property-specific.
 * * Used for delegation and company settings.
 */
export const getAllowedApprovers = <ThrowOnError extends boolean = false>(options: Options<GetAllowedApproversData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAllowedApproversResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workflow/c/{companyId}/approvers',
        ...options
    });
};

/**
 * Enumerate all of a company's workflowable objects.
 *
 * * For example, you can enumerate RELEASES, TASKS, etc in a company by last modified time.
 * * Caller must be a company admin.
 * * Specify `modifiedAfter` and use the `next` URI for complete enumeration.
 */
export const enumerateObjectWorkflows = <ThrowOnError extends boolean = false>(options: Options<EnumerateObjectWorkflowsData, ThrowOnError>) => {
    return (options.client ?? client).get<EnumerateObjectWorkflowsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workflow/companies/{cid}/objects',
        ...options
    });
};

/**
 * Lightweight information about the current state of a workflowable object like release package.
 *
 * Caller must be a company admin as this api allows access to all company owned workflowable objects.
 */
export const getWorkflowById = <ThrowOnError extends boolean = false>(options: Options<GetWorkflowByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetWorkflowByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workflow/obj/{objectId}',
        ...options
    });
};

/**
 * Get all audit log entries for a workflowable object.
 */
export const getAuditLog = <ThrowOnError extends boolean = false>(options: Options<GetAuditLogData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAuditLogResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/workflow/obj/{objectId}/auditlog',
        ...options
    });
};
